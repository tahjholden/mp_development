[{"filePath":"/Users/tahjholden/mp_development/__tests__/example.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/admin/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/analytics/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/coaches/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/dashboard/activity/loading.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/dashboard/activity/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/dashboard/general/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/dashboard/security/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/development-plans/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DevelopmentPlanSchema' is assigned a value but never used.","line":40,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4168,4171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4168,4171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":22,"suggestions":[{"fix":{"range":[5601,5649],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":243,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":243,"endColumn":16,"suggestions":[{"fix":{"range":[7182,7234],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":251,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":251,"endColumn":20,"suggestions":[{"fix":{"range":[7462,7522],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":254,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":254,"endColumn":22,"suggestions":[{"fix":{"range":[7624,7669],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7908,7911],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7908,7911],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9308,9311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9308,9311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":302,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":302,"endColumn":24,"suggestions":[{"fix":{"range":[9824,9877],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":303,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":303,"endColumn":24,"suggestions":[{"fix":{"range":[9890,9938],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":309,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":309,"endColumn":24,"suggestions":[{"fix":{"range":[10122,10177],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":312,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":312,"endColumn":26,"suggestions":[{"fix":{"range":[10244,10359],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":330,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":330,"endColumn":26,"suggestions":[{"fix":{"range":[10828,10887],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11653,11656],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11653,11656],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":354,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":354,"endColumn":22,"suggestions":[{"fix":{"range":[11668,11710],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":359,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":359,"endColumn":20,"suggestions":[{"fix":{"range":[11849,11889],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":372,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":372,"endColumn":22,"suggestions":[{"fix":{"range":[12148,12208],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":396,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":396,"endColumn":24,"suggestions":[{"fix":{"range":[12925,12988],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":401,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":401,"endColumn":22,"suggestions":[{"fix":{"range":[13064,13110],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":410,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":410,"endColumn":22,"suggestions":[{"fix":{"range":[13310,13372],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":419,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13615,13618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13615,13618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":444,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":444,"endColumn":22,"suggestions":[{"fix":{"range":[14359,14407],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPlayers'. Either include it or remove the dependency array.","line":456,"column":6,"nodeType":"ArrayExpression","endLine":456,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPlayers, searchTerm, teamFilter]","fix":{"range":[14668,14692],"text":"[fetchPlayers, searchTerm, teamFilter]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Edit,\n  CheckCircle,\n  Circle,\n  Clock,\n  Target,\n  Zap,\n  Lightbulb,\n  Shield,\n  Plus,\n  Search,\n  Filter,\n} from 'lucide-react';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport { UniversalButton } from '@/components/ui/UniversalButton';\nimport type { PlayerStatus } from '@/components/basketball/PlayerListCard';\n\n// Define Player type locally to match the actual data structure\ninterface Player {\n  id: string;\n  name: string;\n  team: string;\n  status: PlayerStatus;\n}\nimport { z } from 'zod';\n\n// Zod schemas for validation\nconst DevelopmentGoalSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  description: z.string(),\n  status: z.enum(['not_started', 'in_progress', 'completed']),\n  targetDate: z.string(),\n  completedDate: z.string().optional(),\n});\n\nconst DevelopmentPlanSchema = z.object({\n  id: z.string(),\n  playerId: z.string(),\n  playerName: z.string(),\n  coachName: z.string().optional(),\n  initialObservation: z.string().optional(),\n  objective: z.string(),\n  description: z.string().optional(),\n  status: z.enum(['draft', 'active', 'completed', 'archived']),\n  startDate: z.string(),\n  endDate: z.string(),\n  goals: z.array(DevelopmentGoalSchema),\n  tags: z.array(z.string()),\n  readiness: z.enum(['high', 'medium', 'low']),\n  lastUpdated: z.string().optional(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\n\n// Types for development plans\ninterface DevelopmentPlan {\n  id: string;\n  playerId: string;\n  playerName: string;\n  coachName?: string;\n  initialObservation?: string;\n  objective: string;\n  description?: string;\n  status?: 'draft' | 'active' | 'completed' | 'archived';\n  startDate?: string;\n  endDate?: string | null;\n  goals?: DevelopmentGoal[];\n  tags?: string[];\n  readiness?: 'high' | 'medium' | 'low';\n  lastUpdated?: string;\n  createdAt?: string;\n  updatedAt?: string;\n  title?: string; // for UI compatibility\n}\n\ninterface DevelopmentGoal {\n  id: string;\n  title: string;\n  description: string;\n  status: 'not_started' | 'in_progress' | 'completed';\n  targetDate: string;\n  completedDate?: string;\n}\n\ninterface DrillSuggestion {\n  id: string;\n  name: string;\n  category:\n    | 'shooting'\n    | 'ball_handling'\n    | 'defense'\n    | 'conditioning'\n    | 'team_play';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: number; // minutes\n  description: string;\n  cues: string[];\n  constraints: string[];\n  players: number; // min players needed\n}\n\ninterface Team {\n  id: string;\n  name: string;\n}\n\nexport default function DevelopmentPlansPage() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n  const [plans, setPlans] = useState<DevelopmentPlan[]>([]);\n\n  // Player list state - EXACT SAME AS PLAYERS PAGE\n  const [playersById, setPlayersById] = useState<Record<string, Player>>({});\n  const [playerIds, setPlayerIds] = useState<string[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedPlayer, setSelectedPlayer] = useState<Player | null>(null);\n\n  // Infinite scroll state - EXACT SAME AS PLAYERS PAGE\n  const [loadingPlayers, setLoadingPlayers] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [offset, setOffset] = useState(0);\n\n  // Search and filter state - EXACT SAME AS PLAYERS PAGE\n  const [searchTerm, setSearchTerm] = useState('');\n  const [teamFilter, setTeamFilter] = useState('all');\n  const [isTeamDropdownOpen, setIsTeamDropdownOpen] = useState(false);\n\n  // Handler for selecting a player - EXACT SAME AS PLAYERS PAGE\n  const handlePlayerSelect = (player: Player) => {\n    setSelectedPlayer(player);\n  };\n\n  // Fetch players with pagination - EXACT SAME AS PLAYERS PAGE\n  const fetchPlayers = useCallback(\n    async (currentOffset: number = 0, reset: boolean = false) => {\n      setLoadingPlayers(true);\n      try {\n        const response = await fetch(\n          `/api/dashboard/players?offset=${currentOffset}&limit=10`\n        );\n        const data = await response.json();\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          if (reset) {\n            // Reset the list with normalized state\n            const playersMap: Record<string, Player> = {};\n            const ids: string[] = [];\n\n            transformedPlayers.forEach((player: Player) => {\n              if (!playersMap[player.id]) {\n                playersMap[player.id] = player;\n                ids.push(player.id);\n              }\n            });\n\n            setPlayersById(playersMap);\n            setPlayerIds(ids);\n            setOffset(10);\n          } else {\n            // Append to existing list with normalized state\n            setPlayersById(prevPlayersById => {\n              const newPlayersById = { ...prevPlayersById };\n              const newIds: string[] = [];\n\n              transformedPlayers.forEach((player: Player) => {\n                if (!newPlayersById[player.id]) {\n                  newPlayersById[player.id] = player;\n                  newIds.push(player.id);\n                }\n              });\n\n              setPlayerIds(prevIds => [...prevIds, ...newIds]);\n              return newPlayersById;\n            });\n            setOffset(prev => prev + 10);\n          }\n\n          setHasMore(data.players.length === 10);\n        }\n      } catch (error) {\n        console.error('Error fetching players:', error);\n      } finally {\n        setLoadingPlayers(false);\n      }\n    },\n    []\n  );\n\n  // Load more players when scrolling - EXACT SAME AS PLAYERS PAGE\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement>) => {\n      const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n      if (\n        scrollHeight - scrollTop <= clientHeight * 1.5 &&\n        !loadingPlayers &&\n        hasMore\n      ) {\n        fetchPlayers(offset);\n      }\n    },\n    [fetchPlayers, loadingPlayers, hasMore, offset]\n  );\n\n  // Filter players based on search and team filter - EXACT SAME AS PLAYERS PAGE\n  const filteredPlayers = playerIds\n    .map(id => playersById[id])\n    .filter(\n      (player: Player | undefined): player is Player => !!player && !!player.id\n    )\n    .filter(player => {\n      const matchesSearch = player.name\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase());\n      const matchesTeam = teamFilter === 'all' || player.team === teamFilter;\n      return matchesSearch && matchesTeam;\n    });\n  // Deduplicate by player.id before sorting and rendering\n  const dedupedPlayers = Array.from(\n    new Map(filteredPlayers.map(p => [p.id, p])).values()\n  );\n  const sortedPlayers = [...dedupedPlayers].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  // Add state and handlers for search, team filter, and dropdown (copied from Players page)\n  const [drillSuggestions, setDrillSuggestions] = useState<DrillSuggestion[]>(\n    []\n  );\n\n  // Fetch data with validation\n  useEffect(() => {\n    console.log('useEffect called, starting fetchData');\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch development plans with validation\n        const plansResponse = await fetch('/api/development-plans');\n        console.log('Plans response status:', plansResponse.status);\n        if (plansResponse.ok) {\n          const rawPlansData = await plansResponse.json();\n          console.log('Raw plans data:', rawPlansData);\n\n          // Handle the API response structure: direct array of plans\n          if (Array.isArray(rawPlansData)) {\n            // Transform the API data to match our interface\n            const transformedPlans = rawPlansData.map((plan: any) => ({\n              id: plan.id || '',\n              playerId: plan.playerId || '',\n              playerName: plan.playerName || 'Unknown Player',\n              coachName: 'Unknown Coach', // Not provided by API\n              initialObservation: '', // Not provided by API\n              objective: plan.objective || '',\n              description: plan.objective || '', // Use objective as description\n              status: (plan.status || 'draft') as\n                | 'draft'\n                | 'active'\n                | 'completed'\n                | 'archived',\n              startDate: plan.startDate || new Date().toISOString(),\n              endDate: plan.endDate || null, // API can return null\n              goals: plan.goals || [],\n              tags: plan.tags || [],\n              readiness: (plan.readiness || 'medium') as\n                | 'high'\n                | 'medium'\n                | 'low',\n              lastUpdated: plan.updatedAt || new Date().toISOString(),\n              createdAt: plan.createdAt || new Date().toISOString(),\n              updatedAt: plan.updatedAt || new Date().toISOString(),\n              // For UI compatibility, add a title field mapped from objective\n              title: plan.objective || '',\n            }));\n\n            // Skip validation for now to debug the issue\n            const validPlans = transformedPlans.filter(\n              (plan: any) =>\n                plan &&\n                typeof plan === 'object' &&\n                typeof plan.id === 'string' &&\n                typeof plan.playerId === 'string' &&\n                typeof plan.playerName === 'string' &&\n                typeof plan.objective === 'string' &&\n                plan.id.trim() !== '' &&\n                plan.playerId.trim() !== '' &&\n                plan.playerName.trim() !== '' &&\n                plan.objective.trim() !== ''\n            ) as DevelopmentPlan[];\n\n            console.log('Valid plans count:', validPlans.length);\n            console.log('First valid plan:', validPlans[0]);\n\n            // Deduplicate plans by id\n            const uniquePlans = Array.from(\n              new Map(validPlans.map(plan => [plan.id, plan])).values()\n            );\n            console.log('Unique plans count:', uniquePlans.length);\n            setPlans(uniquePlans);\n          } else {\n            console.error(\n              'Invalid API response structure for plans:',\n              rawPlansData\n            );\n            setPlans([]);\n          }\n        }\n\n        // Fetch teams with validation\n        const teamsResponse = await fetch('/api/user/teams');\n        if (teamsResponse.ok) {\n          const rawTeamsData = await teamsResponse.json();\n\n          // Validate teams data\n          const validatedTeams = z\n            .array(z.object({ id: z.string(), name: z.string() }))\n            .safeParse(rawTeamsData);\n          if (!validatedTeams.success) {\n            console.error('Invalid teams data:', validatedTeams.error);\n            throw new Error('Invalid teams data received');\n          }\n\n          // Filter out any invalid teams and deduplicate by id\n          const validTeams = validatedTeams.data.filter(\n            (team): team is Team =>\n              team &&\n              typeof team === 'object' &&\n              typeof team.id === 'string' &&\n              typeof team.name === 'string' &&\n              team.id.trim() !== '' &&\n              team.name.trim() !== ''\n          );\n\n          const uniqueTeams = Array.from(\n            new Map(validTeams.map(team => [team.id, team])).values()\n          );\n          setTeams(uniqueTeams);\n        }\n\n        // Skip mock drill suggestions for now to debug the issue\n        setDrillSuggestions([]);\n      } catch (err: any) {\n        console.error('Error in fetchData:', err);\n        setError(err.message || 'Failed to fetch data');\n        setPlans([]);\n        setDrillSuggestions([]);\n      } finally {\n        console.log('Setting loading to false');\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Fetch initial players and teams - EXACT SAME AS PLAYERS PAGE\n  useEffect(() => {\n    // Fetch teams\n    fetch('/api/user/teams')\n      .then(res => {\n        if (!res.ok) {\n          console.log('Teams API returned error status:', res.status);\n          setTeams([]);\n          return;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        let arr: unknown = data;\n        if (data && Array.isArray(data)) {\n          arr = data;\n        }\n        const result = z\n          .array(z.object({ id: z.string(), name: z.string() }))\n          .safeParse(arr);\n        if (result.success) {\n          // Deduplicate teams by id\n          const uniqueTeams = Array.from(\n            new Map(result.data.map(team => [team.id, team])).values()\n          );\n          uniqueTeams.sort((a, b) => a.name.localeCompare(b.name));\n          setTeams(uniqueTeams);\n        } else {\n          console.error('Zod validation error for teams:', result.error);\n          setTeams([]);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching teams:', error);\n        setTeams([]);\n      });\n\n    // Fetch initial players\n    setLoadingPlayers(true);\n    fetch('/api/dashboard/players?offset=0&limit=10')\n      .then(res => {\n        if (!res.ok) {\n          console.log('Players API returned error status:', res.status);\n          return null;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          // Reset the list with normalized state\n          const playersMap: Record<string, Player> = {};\n          const ids: string[] = [];\n\n          transformedPlayers.forEach((player: Player) => {\n            if (!playersMap[player.id]) {\n              playersMap[player.id] = player;\n              ids.push(player.id);\n            }\n          });\n\n          setPlayersById(playersMap);\n          setPlayerIds(ids);\n          setOffset(10);\n          setHasMore(data.players.length === 10);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching players:', error);\n      })\n      .finally(() => {\n        setLoadingPlayers(false);\n      });\n  }, []);\n\n  // Reset pagination when search or filter changes - EXACT SAME AS PLAYERS PAGE\n  useEffect(() => {\n    setOffset(0);\n    setHasMore(true);\n    fetchPlayers(0, true);\n  }, [searchTerm, teamFilter]);\n\n  // Get readiness color\n  const getReadinessColor = (readiness: string) => {\n    switch (readiness) {\n      case 'high':\n        return 'bg-green-500';\n      case 'medium':\n        return 'bg-yellow-500';\n      case 'low':\n        return 'bg-red-500';\n      default:\n        return 'bg-gray-500';\n    }\n  };\n\n  // Get drill suggestions based on selected players\n  const getFilteredDrillSuggestions = () => {\n    // In real app, this would use AI to generate suggestions based on player needs\n    return drillSuggestions;\n  };\n\n  // Helper function for goal status icons\n  const getGoalStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'in_progress':\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      case 'not_started':\n        return <Circle className=\"h-4 w-4 text-gray-500\" />;\n      default:\n        return <Circle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  // Example loading/error states:\n  if (loading) {\n    return (\n      <div className=\"h-screen w-screen bg-[#161616] flex items-center justify-center\">\n        <div className=\"flex flex-col items-center justify-center w-full\">\n          <span className=\"text-zinc-400 text-lg font-semibold mb-4\">\n            Loading development plans...\n          </span>\n          <div className=\"w-8 h-8 border-2 border-[#d8cc97] border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      </div>\n    );\n  }\n  if (error) {\n    return (\n      <div className=\"min-h-screen p-4 bg-[#161616] flex items-center justify-center\">\n        <div className=\"bg-red-900/20 border border-red-500 rounded p-4 text-red-300\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header - exact replica with coach info */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            Coach\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            coach@example.com\n          </span>\n          <span className=\"text-xs text-white leading-tight\">Coach</span>\n        </div>\n      </header>\n      {/* Sidebar */}\n      <Sidebar\n        user={{\n          name: 'Coach',\n          email: 'coach@example.com',\n          role: 'Coach',\n        }}\n      />\n      {/* Main Content: three columns, below header, to the right of sidebar */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT PANE: Player List - EXACT SAME AS PLAYERS PAGE */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold text-[#d8cc97] mt-0\">Players</h2>\n            <UniversalButton.Primary\n              size=\"sm\"\n              onClick={() => {}}\n              leftIcon={<Plus size={16} />}\n            >\n              Add Player\n            </UniversalButton.Primary>\n          </div>\n          {/* Search Input */}\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search players...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n          {/* Team Filter */}\n          <div className=\"relative mb-6\">\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <div className=\"relative\">\n              <button\n                onClick={() => setIsTeamDropdownOpen(!isTeamDropdownOpen)}\n                className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm text-white border border-zinc-700 focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n              >\n                <span>{teamFilter === 'all' ? 'All Teams' : teamFilter}</span>\n                <span className=\"text-zinc-400\">▼</span>\n              </button>\n              {isTeamDropdownOpen && (\n                <div className=\"absolute top-full left-0 right-0 mt-1 bg-zinc-800 border border-zinc-700 rounded shadow-lg z-10 max-h-48 overflow-y-auto\">\n                  <button\n                    onClick={() => {\n                      setTeamFilter('all');\n                      setIsTeamDropdownOpen(false);\n                    }}\n                    className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                  >\n                    All Teams\n                  </button>\n                  {teams.map(team => (\n                    <button\n                      key={team.id}\n                      onClick={() => {\n                        setTeamFilter(team.name);\n                        setIsTeamDropdownOpen(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                    >\n                      {team.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          {/* Player List - Fixed height for exactly 10 player cards */}\n          <div\n            className=\"flex-1 overflow-y-auto space-y-2\"\n            style={{ maxHeight: '400px' }} // Exactly 10 player cards (10 * 40px)\n            onScroll={handleScroll}\n          >\n            {sortedPlayers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Shield className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n                <p className=\"text-zinc-400 text-sm\">No players found</p>\n              </div>\n            ) : (\n              sortedPlayers.map((player: Player) => (\n                <div\n                  key={player.id}\n                  onClick={() => handlePlayerSelect(player)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all ${\n                    selectedPlayer?.id === player.id\n                      ? 'bg-[#d8cc97]/20 border border-[#d8cc97]'\n                      : 'bg-zinc-800/50 border border-zinc-700 hover:bg-zinc-800 hover:border-zinc-600'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-white\">\n                        {String(player.name)}\n                      </p>\n                      <p className=\"text-sm text-zinc-400\">{player.team}</p>\n                    </div>\n                    <div\n                      className={`w-2 h-2 rounded-full ${\n                        player.status === 'active'\n                          ? 'bg-green-500'\n                          : 'bg-zinc-500'\n                      }`}\n                    />\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n        {/* CENTER and RIGHT columns: leave unchanged except for being direct siblings in the flex layout */}\n        <div className=\"flex-1 min-w-0\">\n          {/* CENTER: Active PDP Summary View */}\n          <div className=\"space-y-6\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-bold text-[#d8cc97]\">\n                Active PDP Summary\n              </h2>\n              <div className=\"flex gap-2\">\n                <UniversalButton.Secondary size=\"sm\">\n                  <Edit className=\"h-3 w-3 mr-1\" />\n                  Edit Plans\n                </UniversalButton.Secondary>\n                <UniversalButton.Primary size=\"sm\">\n                  Export Plan\n                </UniversalButton.Primary>\n              </div>\n            </div>\n            {plans.length === 0 ? (\n              <div className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6 flex flex-col items-center justify-center h-96\">\n                <Target className=\"text-zinc-700 w-20 h-20 mb-5\" />\n                <h3 className=\"text-lg font-medium text-white mb-2\">\n                  No Development Plans Found\n                </h3>\n                <p className=\"text-sm text-zinc-400 max-w-md mb-6 text-center\">\n                  No development plans are currently available for the players.\n                </p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {plans.length > 0 ? (\n                  plans.map(plan => (\n                    <div\n                      key={plan.id}\n                      className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6\"\n                    >\n                      <div className=\"flex justify-between items-start mb-4\">\n                        <div>\n                          <h3 className=\"text-lg font-bold text-[#d8cc97]\">\n                            {plan.title ? plan.title : 'Untitled Plan'}\n                          </h3>\n                          <p className=\"text-sm text-zinc-300 mb-2\">\n                            {plan.objective\n                              ? plan.objective\n                              : 'No objective provided'}\n                          </p>\n                          <p className=\"text-sm text-zinc-400\">\n                            Player: {plan.playerName}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <span\n                            className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${\n                              plan.status === 'active'\n                                ? 'bg-green-500/20 text-green-500'\n                                : plan.status === 'completed'\n                                  ? 'bg-blue-500/20 text-blue-500'\n                                  : 'bg-yellow-500/20 text-yellow-500'\n                            }`}\n                          >\n                            {(plan.status || 'draft').charAt(0).toUpperCase() +\n                              (plan.status || 'draft').slice(1)}\n                          </span>\n                          <div\n                            className={`w-2 h-2 rounded-full ${getReadinessColor(plan.readiness || 'medium')}`}\n                          />\n                        </div>\n                      </div>\n                      <div className=\"space-y-4\">\n                        <div>\n                          <h4 className=\"text-sm font-medium text-zinc-400 mb-2\">\n                            Focus Areas\n                          </h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {(plan.tags || []).map((tag, index) => (\n                              <span\n                                key={index}\n                                className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-zinc-800 text-zinc-300\"\n                              >\n                                {tag}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                        <div>\n                          <h4 className=\"text-sm font-medium text-zinc-400 mb-2\">\n                            Active Goals\n                          </h4>\n                          <div className=\"space-y-2\">\n                            {(plan.goals || [])\n                              .filter(g => g.status !== 'completed')\n                              .slice(0, 3)\n                              .map(goal => (\n                                <div\n                                  key={goal.id}\n                                  className=\"flex items-center space-x-2 p-2 bg-zinc-800/50 rounded\"\n                                >\n                                  {getGoalStatusIcon(goal.status)}\n                                  <span className=\"text-sm text-white\">\n                                    {goal.title}\n                                  </span>\n                                </div>\n                              ))}\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6 text-center\">\n                    <Target className=\"text-zinc-700 w-16 h-16 mx-auto mb-4\" />\n                    <p className=\"text-zinc-400 mb-2\">\n                      No development plans found for selected players\n                    </p>\n                    <p className=\"text-sm text-zinc-500\">\n                      Create development plans to track player progress\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n        <div style={{ width: 340 }}>\n          {/* RIGHT: Drill Suggestions */}\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97]\">\n            Drill Suggestions\n          </h2>\n          {plans.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <Lightbulb className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n              <p className=\"text-zinc-400 text-sm\">\n                No development plans available\n              </p>\n              <p className=\"text-xs text-zinc-500 mt-1\">\n                Drill suggestions will appear when plans are available\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {/* Smart Logic Header */}\n              <div className=\"bg-zinc-800/50 border border-zinc-700 rounded-lg p-4\">\n                <div className=\"flex items-center space-x-2 mb-2\">\n                  <Zap className=\"text-[#d8cc97] w-4 h-4\" />\n                  <h4 className=\"font-medium text-white\">Smart Suggestions</h4>\n                </div>\n                <p className=\"text-xs text-zinc-400\">\n                  Showing drill suggestions based on available development plans\n                </p>\n              </div>\n              {/* Drill Suggestions */}\n              <div className=\"space-y-3\">\n                {getFilteredDrillSuggestions().map(drill => (\n                  <div\n                    key={drill.id}\n                    className=\"bg-zinc-800/50 border border-zinc-700 rounded-lg p-4\"\n                  >\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <h4 className=\"font-medium text-white text-sm\">\n                        {drill.name}\n                      </h4>\n                      <span\n                        className={`text-xs px-2 py-1 rounded ${\n                          drill.difficulty === 'beginner'\n                            ? 'bg-green-500/20 text-green-500'\n                            : drill.difficulty === 'intermediate'\n                              ? 'bg-yellow-500/20 text-yellow-500'\n                              : 'bg-red-500/20 text-red-500'\n                        }`}\n                      >\n                        {drill.difficulty}\n                      </span>\n                    </div>\n                    <p className=\"text-xs text-zinc-400 mb-2\">\n                      {drill.description}\n                    </p>\n                    <p className=\"text-xs text-zinc-500\">\n                      Duration: {drill.duration} minutes\n                    </p>\n                    <p className=\"text-xs text-zinc-500\">\n                      Players needed: {drill.players}\n                    </p>\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {drill.cues.map((cue, index) => (\n                        <span\n                          key={index}\n                          className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-zinc-700 text-zinc-300\"\n                        >\n                          {cue}\n                        </span>\n                      ))}\n                    </div>\n                    <div className=\"flex flex-wrap gap-1 mt-2\">\n                      {drill.constraints.map((constraint, index) => (\n                        <span\n                          key={index}\n                          className=\"inline-flex items-center px-2 py-1 rounded-full text-xs bg-zinc-700 text-zinc-300\"\n                        >\n                          {constraint}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/drills/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Edit' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'page' is assigned a value but never used.","line":101,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":102,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'players' is assigned a value but never used.","line":105,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":105,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'teams' is assigned a value but never used.","line":106,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filteredDrills' is assigned a value but never used.","line":116,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":23},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":220,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":220,"endColumn":24,"suggestions":[{"fix":{"range":[6688,6749],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":265,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":265,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8480,8483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8480,8483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":278,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":278,"endColumn":28,"suggestions":[{"fix":{"range":[8923,8986],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":301,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":301,"endColumn":26,"suggestions":[{"fix":{"range":[9840,9959],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":317,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":317,"endColumn":26,"suggestions":[{"fix":{"range":[10365,10424],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":342,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":342,"endColumn":22,"suggestions":[{"fix":{"range":[11214,11257],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  Edit,\n  ChevronDown,\n  ChevronUp,\n  Search,\n  Filter,\n  Target,\n} from 'lucide-react';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport { z } from 'zod';\n\n// Zod schemas for validation\nconst DrillSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  category: z.enum([\n    'shooting',\n    'ball_handling',\n    'defense',\n    'conditioning',\n    'team_play',\n    'passing',\n    'rebounding',\n  ]),\n  difficulty: z.enum(['beginner', 'intermediate', 'advanced']),\n  duration: z.number(),\n  description: z.string(),\n  instructions: z.array(z.string()),\n  cues: z.array(z.string()),\n  constraints: z.array(z.string()),\n  players: z.number(),\n  equipment: z.array(z.string()),\n  variations: z.array(z.string()),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\nconst DrillsArraySchema = z.array(DrillSchema);\n\nconst PlayerSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  team: z.string(),\n  status: z.string(),\n});\nconst PlayersArraySchema = z.array(PlayerSchema);\n\nconst TeamSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n});\nconst TeamsArraySchema = z.array(TeamSchema);\n\n// Types for drills\ninterface Drill {\n  id: string;\n  name: string;\n  category:\n    | 'shooting'\n    | 'ball_handling'\n    | 'defense'\n    | 'conditioning'\n    | 'team_play'\n    | 'passing'\n    | 'rebounding';\n  difficulty: 'beginner' | 'intermediate' | 'advanced';\n  duration: number; // minutes\n  description: string;\n  instructions: string[];\n  cues: string[];\n  constraints: string[];\n  players: number; // min players needed\n  equipment: string[];\n  variations: string[];\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Player {\n  id: string;\n  name: string;\n  team: string;\n  status: string;\n}\n\ninterface Team {\n  id: string;\n  name: string;\n}\n\n// Main component\nexport default function DrillsPage() {\n  const [drills, setDrills] = useState<Drill[]>([]);\n  const [selectedDrill, setSelectedDrill] = useState<Drill | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Pagination state for drills\n  const [page, setPage] = useState(1);\n  const pageSize = 5;\n\n  // Player/team data for left column\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedDrillId, setSelectedDrillId] = useState<string | null>(null);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [categoryFilter, setCategoryFilter] = useState('all');\n  const [difficultyFilter, setDifficultyFilter] = useState('all');\n  const [isCategoryDropdownOpen, setIsCategoryDropdownOpen] = useState(false);\n  const [isDifficultyDropdownOpen, setIsDifficultyDropdownOpen] =\n    useState(false);\n\n  // Filter drills by selected category\n  const filteredDrills = selectedDrillId\n    ? drills.filter(drill => drill.id === selectedDrillId)\n    : drills;\n\n  const filteredDrillsList = drills.filter(drill => {\n    const matchesSearch = drill.name\n      .toLowerCase()\n      .includes(searchTerm.toLowerCase());\n    const matchesCategory =\n      categoryFilter === 'all' || drill.category === categoryFilter;\n    const matchesDifficulty =\n      difficultyFilter === 'all' || drill.difficulty === difficultyFilter;\n    return matchesSearch && matchesCategory && matchesDifficulty;\n  });\n\n  // Handle drill selection with toggle functionality\n  const handleDrillSelect = (drillId: string) => {\n    if (selectedDrillId === drillId) {\n      // Clicking the same drill again - show all drills\n      setSelectedDrillId(null);\n    } else {\n      // Clicking a different drill - filter to their details\n      setSelectedDrillId(drillId);\n    }\n  };\n\n  // Fetch real data with validation\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Mock drills data with validation - in real app, this would come from API\n        const mockDrills: Drill[] = [\n          {\n            id: '1',\n            name: '3-Point Shooting Progression',\n            category: 'shooting',\n            difficulty: 'intermediate',\n            duration: 30,\n            description:\n              'Progressive shooting drill focusing on form and accuracy',\n            instructions: [\n              'Start at 5 feet from basket',\n              'Make 5 shots before moving back',\n              'Move back 2 feet after each set',\n              'Continue until reaching 3-point line',\n            ],\n            cues: ['Follow through', 'Square shoulders', 'Bend knees'],\n            constraints: ['Must make 5 in a row', 'No dribbling'],\n            players: 2,\n            equipment: ['Basketball', 'Basket'],\n            variations: ['Add defender', 'Time pressure'],\n            createdAt: '2024-01-01',\n            updatedAt: '2024-01-15',\n          },\n          {\n            id: '2',\n            name: 'Ball Handling Circuit',\n            category: 'ball_handling',\n            difficulty: 'beginner',\n            duration: 20,\n            description: 'Station-based ball handling improvement',\n            instructions: [\n              'Set up 4 cones in a square',\n              'Dribble around each cone',\n              'Switch hands at each cone',\n              'Complete 3 full circuits',\n            ],\n            cues: ['Keep head up', 'Finger tips', 'Low stance'],\n            constraints: ['No looking down', 'Speed variations'],\n            players: 1,\n            equipment: ['Basketball', 'Cones'],\n            variations: ['Add obstacles', 'Speed drills'],\n            createdAt: '2024-01-01',\n            updatedAt: '2024-01-15',\n          },\n          {\n            id: '3',\n            name: 'Defensive Slides',\n            category: 'defense',\n            difficulty: 'intermediate',\n            duration: 15,\n            description: 'Defensive footwork and positioning',\n            instructions: [\n              'Start in defensive stance',\n              'Slide laterally without crossing feet',\n              'Keep hands active and ready',\n              'Maintain low center of gravity',\n            ],\n            cues: ['Stay low', 'Active hands', \"Slide don't cross\"],\n            constraints: ['Maintain stance', 'No crossing feet'],\n            players: 2,\n            equipment: ['Cones'],\n            variations: ['Add offensive player', 'Speed variations'],\n            createdAt: '2024-01-01',\n            updatedAt: '2024-01-15',\n          },\n        ];\n\n        // Validate drills data\n        const validatedDrills = DrillsArraySchema.safeParse(mockDrills);\n        if (!validatedDrills.success) {\n          console.error('Invalid drills data:', validatedDrills.error);\n          throw new Error('Invalid drills data received');\n        }\n\n        // Filter out any invalid drills\n        const validDrills = validatedDrills.data.filter(\n          (drill): drill is Drill =>\n            drill &&\n            typeof drill === 'object' &&\n            typeof drill.id === 'string' &&\n            typeof drill.name === 'string' &&\n            typeof drill.description === 'string' &&\n            Array.isArray(drill.instructions) &&\n            Array.isArray(drill.cues) &&\n            Array.isArray(drill.constraints) &&\n            Array.isArray(drill.equipment) &&\n            Array.isArray(drill.variations) &&\n            typeof drill.createdAt === 'string' &&\n            typeof drill.updatedAt === 'string' &&\n            drill.id.trim() !== '' &&\n            drill.name.trim() !== '' &&\n            drill.description.trim() !== '' &&\n            drill.createdAt.trim() !== '' &&\n            drill.updatedAt.trim() !== ''\n        );\n\n        // Deduplicate drills by id\n        const uniqueDrills = Array.from(\n          new Map(validDrills.map(drill => [drill.id, drill])).values()\n        );\n        setDrills(uniqueDrills);\n\n        // Fetch players with validation\n        const playersResponse = await fetch(\n          '/api/dashboard/players?offset=0&limit=10'\n        );\n        if (playersResponse.ok) {\n          const rawPlayersData = await playersResponse.json();\n          // Handle the API response structure: { players: [...], total: number }\n          if (\n            rawPlayersData &&\n            rawPlayersData.players &&\n            Array.isArray(rawPlayersData.players)\n          ) {\n            const transformedRawPlayers = rawPlayersData.players.map(\n              (player: any) => ({\n                id: player.id,\n                name: player.name || 'Unknown Player',\n                team: player.team || 'No Team',\n                status: player.status || 'active',\n              })\n            );\n\n            // Validate players data\n            const validatedPlayers = PlayersArraySchema.safeParse(\n              transformedRawPlayers\n            );\n            if (!validatedPlayers.success) {\n              console.error('Invalid players data:', validatedPlayers.error);\n              throw new Error('Invalid players data received');\n            }\n\n            // Filter out any invalid players\n            const validPlayers = validatedPlayers.data.filter(\n              (player): player is Player =>\n                player &&\n                typeof player === 'object' &&\n                typeof player.id === 'string' &&\n                typeof player.name === 'string' &&\n                typeof player.team === 'string' &&\n                player.id.trim() !== '' &&\n                player.name.trim() !== '' &&\n                player.team.trim() !== ''\n            );\n\n            // Deduplicate players by id\n            const uniquePlayers = Array.from(\n              new Map(validPlayers.map(player => [player.id, player])).values()\n            );\n            setPlayers(uniquePlayers);\n          } else {\n            console.error(\n              'Invalid API response structure for players:',\n              rawPlayersData\n            );\n            setPlayers([]);\n          }\n        }\n\n        // Fetch teams with validation\n        const teamsResponse = await fetch('/api/user/teams');\n        if (teamsResponse.ok) {\n          const rawTeamsData = await teamsResponse.json();\n\n          // Validate teams data\n          const validatedTeams = TeamsArraySchema.safeParse(rawTeamsData);\n          if (!validatedTeams.success) {\n            console.error('Invalid teams data:', validatedTeams.error);\n            throw new Error('Invalid teams data received');\n          }\n\n          // Filter out any invalid teams and deduplicate by id\n          const validTeams = validatedTeams.data.filter(\n            (team): team is Team =>\n              team &&\n              typeof team === 'object' &&\n              typeof team.id === 'string' &&\n              typeof team.name === 'string' &&\n              team.id.trim() !== '' &&\n              team.name.trim() !== ''\n          );\n\n          const uniqueTeams = Array.from(\n            new Map(validTeams.map(team => [team.id, team])).values()\n          );\n          setTeams(uniqueTeams);\n        }\n\n        if (uniqueDrills.length > 0 && uniqueDrills[0]) {\n          setSelectedDrill(uniqueDrills[0]);\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n        setDrills([]);\n        setPlayers([]);\n        setTeams([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Reset page when drill selection changes\n  useEffect(() => {\n    setPage(1);\n  }, [selectedDrillId]);\n\n  if (loading) {\n    return (\n      <div className=\"h-screen w-screen bg-[#161616] flex items-center justify-center\">\n        <div className=\"flex flex-col items-center justify-center w-full\">\n          <span className=\"text-zinc-400 text-lg font-semibold mb-4\">\n            Loading drills...\n          </span>\n          <div className=\"w-8 h-8 border-2 border-[#d8cc97] border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen p-4 bg-[#161616] flex items-center justify-center\">\n        <div className=\"bg-red-900/20 border border-red-500 rounded p-4 text-red-300\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header - exact replica with coach info */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            Coach\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            coach@example.com\n          </span>\n          <span className=\"text-xs text-white leading-tight\">Coach</span>\n        </div>\n      </header>\n      {/* Sidebar */}\n      <Sidebar\n        user={{\n          name: 'Coach',\n          email: 'coach@example.com',\n          role: 'Coach',\n        }}\n      />\n      {/* Main Content */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT PANE: Drill Categories */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">Drills</h2>\n\n          {/* Search Input */}\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n\n          {/* Category Filter */}\n          <div className=\"relative mb-6\">\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <button\n              onClick={() => setIsCategoryDropdownOpen(!isCategoryDropdownOpen)}\n              className=\"w-full pl-10 pr-4 py-3 text-left bg-zinc-800 border border-zinc-700 rounded text-sm text-white focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n            >\n              <span>\n                {categoryFilter === 'all' ? 'All Categories' : categoryFilter}\n              </span>\n              {isCategoryDropdownOpen ? (\n                <ChevronUp size={16} />\n              ) : (\n                <ChevronDown size={16} />\n              )}\n            </button>\n            {isCategoryDropdownOpen && (\n              <div className=\"absolute z-10 mt-1 w-full bg-zinc-800 border border-zinc-700 rounded shadow-lg overflow-hidden\">\n                <button\n                  onClick={() => {\n                    setCategoryFilter('all');\n                    setIsCategoryDropdownOpen(false);\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white\"\n                >\n                  All Categories\n                </button>\n                {[\n                  'shooting',\n                  'ball_handling',\n                  'defense',\n                  'conditioning',\n                  'team_play',\n                  'passing',\n                  'rebounding',\n                ].map(category => (\n                  <button\n                    key={category}\n                    onClick={() => {\n                      setCategoryFilter(category);\n                      setIsCategoryDropdownOpen(false);\n                    }}\n                    className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white capitalize\"\n                  >\n                    {category.replace('_', ' ')}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Difficulty Filter */}\n          <div className=\"relative mb-6\">\n            <Target className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <button\n              onClick={() =>\n                setIsDifficultyDropdownOpen(!isDifficultyDropdownOpen)\n              }\n              className=\"w-full pl-10 pr-4 py-3 text-left bg-zinc-800 border border-zinc-700 rounded text-sm text-white focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n            >\n              <span>\n                {difficultyFilter === 'all'\n                  ? 'All Difficulties'\n                  : difficultyFilter}\n              </span>\n              {isDifficultyDropdownOpen ? (\n                <ChevronUp size={16} />\n              ) : (\n                <ChevronDown size={16} />\n              )}\n            </button>\n            {isDifficultyDropdownOpen && (\n              <div className=\"absolute z-10 mt-1 w-full bg-zinc-800 border border-zinc-700 rounded shadow-lg overflow-hidden\">\n                <button\n                  onClick={() => {\n                    setDifficultyFilter('all');\n                    setIsDifficultyDropdownOpen(false);\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white\"\n                >\n                  All Difficulties\n                </button>\n                {['beginner', 'intermediate', 'advanced'].map(difficulty => (\n                  <button\n                    key={difficulty}\n                    onClick={() => {\n                      setDifficultyFilter(difficulty);\n                      setIsDifficultyDropdownOpen(false);\n                    }}\n                    className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white capitalize\"\n                  >\n                    {difficulty}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Drill List */}\n          <div className=\"space-y-3 max-h-[calc(100vh-400px)] overflow-y-auto\">\n            {filteredDrillsList.length === 0 ? (\n              <div className=\"text-sm text-gray-500 text-center py-4\">\n                No drills found\n              </div>\n            ) : (\n              filteredDrillsList.map(drill => (\n                <div\n                  key={drill.id}\n                  onClick={() => handleDrillSelect(drill.id)}\n                  className={`p-4 rounded cursor-pointer transition-all ${\n                    selectedDrillId === drill.id\n                      ? 'bg-[#d8cc97] text-black font-semibold'\n                      : 'bg-zinc-800 hover:bg-zinc-700'\n                  }`}\n                >\n                  <p className=\"font-medium\">{drill.name}</p>\n                  <p className=\"text-xs text-gray-400\">\n                    {drill.category.replace('_', ' ')} • {drill.difficulty} •{' '}\n                    {drill.duration}min\n                  </p>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* CENTER PANE: Drill Details */}\n        <div\n          className=\"w-1/2 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            {selectedDrillId\n              ? `${drills.find(d => d.id === selectedDrillId)?.name}`\n              : 'All Drills'}\n          </h2>\n\n          {selectedDrill ? (\n            <div className=\"space-y-6\">\n              {/* Drill Details Card */}\n              <div\n                className=\"bg-zinc-800 p-6 rounded\"\n                style={{ background: '#181818' }}\n              >\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-bold text-[#d8cc97]\">\n                      {selectedDrill.name}\n                    </h3>\n                    <p className=\"text-sm text-zinc-400 capitalize\">\n                      {selectedDrill.category.replace('_', ' ')} •{' '}\n                      {selectedDrill.difficulty}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <button\n                      className=\"text-xs text-[#d8cc97] font-semibold hover:underline bg-transparent\"\n                      style={{ background: 'transparent' }}\n                    >\n                      Edit\n                    </button>\n                    <button\n                      className=\"text-xs text-red-400 font-semibold hover:underline bg-transparent\"\n                      style={{ background: 'transparent' }}\n                    >\n                      Delete\n                    </button>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                  <div>\n                    <p className=\"text-zinc-400\">Duration</p>\n                    <p className=\"text-white\">\n                      {selectedDrill.duration} minutes\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Players Needed</p>\n                    <p className=\"text-white\">\n                      {selectedDrill.players} minimum\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Equipment</p>\n                    <p className=\"text-white\">\n                      {selectedDrill.equipment.join(', ')}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Category</p>\n                    <p className=\"text-white capitalize\">\n                      {selectedDrill.category.replace('_', ' ')}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"mb-4\">\n                  <p className=\"text-zinc-400 text-sm\">Description</p>\n                  <p className=\"text-white text-sm\">\n                    {selectedDrill.description}\n                  </p>\n                </div>\n              </div>\n\n              {/* Instructions */}\n              <div\n                className=\"bg-zinc-800 p-6 rounded\"\n                style={{ background: '#181818' }}\n              >\n                <h4 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n                  Instructions\n                </h4>\n                <ol className=\"list-decimal list-inside space-y-2\">\n                  {selectedDrill.instructions.map((instruction, index) => (\n                    <li key={index} className=\"text-sm text-white\">\n                      {instruction}\n                    </li>\n                  ))}\n                </ol>\n              </div>\n\n              {/* Coaching Cues */}\n              <div\n                className=\"bg-zinc-800 p-6 rounded\"\n                style={{ background: '#181818' }}\n              >\n                <h4 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n                  Coaching Cues\n                </h4>\n                <div className=\"flex flex-wrap gap-2\">\n                  {selectedDrill.cues.map((cue, index) => (\n                    <span\n                      key={index}\n                      className=\"px-3 py-1 bg-zinc-700 rounded text-xs text-white\"\n                    >\n                      {cue}\n                    </span>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-sm text-gray-500 text-center py-8\">\n              Select a drill to view details.\n            </div>\n          )}\n        </div>\n\n        {/* RIGHT PANE: Drill Management */}\n        <div\n          className=\"w-1/4 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            Management\n          </h2>\n\n          {/* Quick Drill Creation */}\n          <div className=\"bg-zinc-800 p-6 rounded mb-6\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Quick Actions\n            </h3>\n            <div className=\"space-y-3\">\n              <button className=\"w-full p-3 bg-[#d8cc97] text-black rounded text-sm font-semibold hover:bg-[#b3a14e] transition-colors\">\n                Create New Drill\n              </button>\n              <button className=\"w-full p-3 bg-zinc-700 text-white rounded text-sm font-semibold hover:bg-zinc-600 transition-colors\">\n                Import Drill Library\n              </button>\n              <button className=\"w-full p-3 bg-zinc-700 text-white rounded text-sm font-semibold hover:bg-zinc-600 transition-colors\">\n                Share Drill\n              </button>\n            </div>\n          </div>\n\n          {/* Drill Favorites */}\n          <div className=\"bg-zinc-800 p-6 rounded mb-6\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Favorites\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\">\n                <p className=\"text-sm font-semibold text-white\">\n                  3-Point Shooting Progression\n                </p>\n                <p className=\"text-xs text-zinc-400\">20 min • Intermediate</p>\n              </div>\n              <div className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\">\n                <p className=\"text-sm font-semibold text-white\">\n                  Ball Handling Circuit\n                </p>\n                <p className=\"text-xs text-zinc-400\">15 min • Beginner</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Related Drills */}\n          <div className=\"bg-zinc-800 p-6 rounded\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Related Drills\n            </h3>\n            <div className=\"space-y-3\">\n              {drills\n                .filter(\n                  d =>\n                    d.category === selectedDrill?.category &&\n                    d.id !== selectedDrill?.id\n                )\n                .slice(0, 3)\n                .map(drill => (\n                  <div\n                    key={drill.id}\n                    className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\"\n                  >\n                    <p className=\"text-sm font-semibold text-white\">\n                      {drill.name}\n                    </p>\n                    <p className=\"text-xs text-zinc-400\">\n                      {drill.duration} min • {drill.difficulty}\n                    </p>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/observations/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronUp' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":12},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··Player·as·SharedPlayer,⏎` with `·Player·as·SharedPlayer·`","line":21,"column":14,"nodeType":null,"messageId":"replace","endLine":23,"endColumn":1,"fix":{"range":[493,520],"text":" Player as SharedPlayer "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedObservation' is assigned a value but never used.","line":55,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":29},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `{}` with `⏎····{}⏎··`","line":67,"column":80,"nodeType":null,"messageId":"replace","endLine":67,"endColumn":82,"fix":{"range":[2010,2012],"text":"\n    {}\n  "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `null` with `⏎····null⏎··`","line":70,"column":77,"nodeType":null,"messageId":"replace","endLine":70,"endColumn":81,"fix":{"range":[2201,2205],"text":"\n    null\n  "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filteredObservations' is assigned a value but never used.","line":83,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":29},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `⏎···`","line":83,"column":31,"nodeType":null,"messageId":"delete","endLine":84,"endColumn":4,"fix":{"range":[2731,2735],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":85,"column":1,"nodeType":null,"messageId":"delete","endLine":85,"endColumn":3,"fix":{"range":[2751,2753],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `··`","line":86,"column":1,"nodeType":null,"messageId":"delete","endLine":86,"endColumn":3,"fix":{"range":[2822,2824],"text":""}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4009,4012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4009,4012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":165,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":165,"endColumn":22,"suggestions":[{"fix":{"range":[5460,5508],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleObsScrollLoad' is assigned a value but never used.","line":211,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":22,"suggestions":[{"fix":{"range":[7932,7975],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":22,"suggestions":[{"fix":{"range":[8368,8428],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `.array(z.object({·id:·z.string(),·name:·z.string()·}))` with `⏎··········.array(z.object({·id:·z.string(),·name:·z.string()·}))⏎··········`","line":276,"column":25,"nodeType":null,"messageId":"replace","endLine":276,"endColumn":79,"fix":{"range":[8731,8785],"text":"\n          .array(z.object({ id: z.string(), name: z.string() }))\n          "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":285,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":285,"endColumn":24,"suggestions":[{"fix":{"range":[9123,9186],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":290,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":290,"endColumn":22,"suggestions":[{"fix":{"range":[9262,9308],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":299,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":299,"endColumn":22,"suggestions":[{"fix":{"range":[9508,9570],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9813,9816],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9813,9816],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":333,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":333,"endColumn":22,"suggestions":[{"fix":{"range":[10569,10617],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPlayers'. Either include it or remove the dependency array.","line":345,"column":6,"nodeType":"ArrayExpression","endLine":345,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPlayers, searchTerm, teamFilter]","fix":{"range":[10878,10902],"text":"[fetchPlayers, searchTerm, teamFilter]"}}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":7,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport {\n  ChevronDown,\n  ChevronUp,\n  Search,\n  Filter,\n  Shield,\n  Plus,\n} from 'lucide-react';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport { Calendar } from '@/components/ui/calendar';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover';\nimport { Button } from '@/components/ui/button';\nimport type { DateRange } from 'react-day-picker';\nimport type {\n  Player as SharedPlayer,\n} from '@/components/basketball/PlayerListCard';\nimport { z } from 'zod';\n\n// Types for observations (matching actual API response)\ninterface Observation {\n  id: string;\n  playerId: string;\n  playerFirstName?: string;\n  playerLastName?: string;\n  playerName: string;\n  title: string;\n  description: string;\n  rating: number;\n  date: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string | null;\n}\n\ninterface Team {\n  id: string;\n  name: string;\n}\n\n// Main component\nexport default function ObservationsPage() {\n  const [observations, setObservations] = useState<Observation[]>([]);\n  const [totalObservations, setTotalObservations] = useState<number>(0);\n  const [obsOffset, setObsOffset] = useState(0);\n  const [obsLoadingMore, setObsLoadingMore] = useState(false);\n  const obsLimit = 20;\n  const obsListRef = useRef<HTMLDivElement>(null);\n  const [selectedObservation, setSelectedObservation] =\n    useState<Observation | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Pagination state for observations\n  const [pageSize, setPageSize] = useState<number | 'all'>(25);\n  const [page, setPage] = useState(1);\n  const [dateRange, setDateRange] = useState<DateRange | undefined>(undefined);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n\n  // Player/team data for left column - EXACT SAME AS PLAYERS PAGE\n  const [playersById, setPlayersById] = useState<Record<string, SharedPlayer>>({});\n  const [playerIds, setPlayerIds] = useState<string[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedPlayer, setSelectedPlayer] = useState<SharedPlayer | null>(null);\n\n  // Infinite scroll state - EXACT SAME AS PLAYERS PAGE\n  const [loadingPlayers, setLoadingPlayers] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [offset, setOffset] = useState(0);\n\n  // Search and filter state - EXACT SAME AS PLAYERS PAGE\n  const [searchTerm, setSearchTerm] = useState('');\n  const [teamFilter, setTeamFilter] = useState('all');\n  const [isTeamDropdownOpen, setIsTeamDropdownOpen] = useState(false);\n\n  // Filter observations by selected player\n  const filteredObservations =\n    selectedPlayer\n      ? observations.filter(obs => obs.playerId === selectedPlayer.id)\n      : observations;\n\n  // Date range filter logic\n  const filteredByDate = observations.filter(obs => {\n    if (!dateRange?.from || !dateRange?.to) return true;\n    const obsDate = new Date(obs.date);\n    return obsDate >= dateRange.from && obsDate <= dateRange.to;\n  });\n\n  // Pagination logic\n  const paginatedObservations =\n    pageSize === 'all'\n      ? filteredByDate\n      : filteredByDate.slice((page - 1) * pageSize, page * pageSize);\n  const totalPages =\n    pageSize === 'all'\n      ? 1\n      : Math.ceil(filteredByDate.length / (pageSize as number));\n\n  // Handler for selecting a player - EXACT SAME AS PLAYERS PAGE\n  const handlePlayerSelect = (player: SharedPlayer) => {\n    setSelectedPlayer(player);\n  };\n\n  // Fetch players with pagination - EXACT SAME AS PLAYERS PAGE\n  const fetchPlayers = useCallback(\n    async (currentOffset: number = 0, reset: boolean = false) => {\n      setLoadingPlayers(true);\n      try {\n        const response = await fetch(\n          `/api/dashboard/players?offset=${currentOffset}&limit=10`\n        );\n        const data = await response.json();\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          if (reset) {\n            // Reset the list with normalized state\n            const playersMap: Record<string, SharedPlayer> = {};\n            const ids: string[] = [];\n\n            transformedPlayers.forEach((player: SharedPlayer) => {\n              if (!playersMap[player.id]) {\n                playersMap[player.id] = player;\n                ids.push(player.id);\n              }\n            });\n\n            setPlayersById(playersMap);\n            setPlayerIds(ids);\n            setOffset(10);\n          } else {\n            // Append to existing list with normalized state\n            setPlayersById(prevPlayersById => {\n              const newPlayersById = { ...prevPlayersById };\n              const newIds: string[] = [];\n\n              transformedPlayers.forEach((player: SharedPlayer) => {\n                if (!newPlayersById[player.id]) {\n                  newPlayersById[player.id] = player;\n                  newIds.push(player.id);\n                }\n              });\n\n              setPlayerIds(prevIds => [...prevIds, ...newIds]);\n              return newPlayersById;\n            });\n            setOffset(prev => prev + 10);\n          }\n\n          setHasMore(data.players.length === 10);\n        }\n      } catch (error) {\n        console.error('Error fetching players:', error);\n      } finally {\n        setLoadingPlayers(false);\n      }\n    },\n    []\n  );\n\n  // Load more players when scrolling - EXACT SAME AS PLAYERS PAGE\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement>) => {\n      const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n      if (\n        scrollHeight - scrollTop <= clientHeight * 1.5 &&\n        !loadingPlayers &&\n        hasMore\n      ) {\n        fetchPlayers(offset);\n      }\n    },\n    [fetchPlayers, loadingPlayers, hasMore, offset]\n  );\n\n  // Filter players based on search and team filter - EXACT SAME AS PLAYERS PAGE\n  const filteredPlayers = playerIds\n    .map(id => playersById[id])\n    .filter(\n      (player: SharedPlayer | undefined): player is SharedPlayer =>\n        !!player && !!player.id\n    )\n    .filter(player => {\n      const matchesSearch = player.name\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase());\n      const matchesTeam = teamFilter === 'all' || player.team === teamFilter;\n      return matchesSearch && matchesTeam;\n    });\n  // Deduplicate by player.id before sorting and rendering\n  const dedupedPlayers = Array.from(\n    new Map(filteredPlayers.map(p => [p.id, p])).values()\n  );\n  const sortedPlayers = [...dedupedPlayers].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n\n  // Load more observations when scrolling\n  const handleObsScrollLoad = (e: React.UIEvent<HTMLDivElement>) => {\n    const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n    if (\n      scrollHeight - scrollTop <= clientHeight * 1.5 &&\n      !obsLoadingMore &&\n      observations.length < totalObservations\n    ) {\n      handleObsScroll();\n    }\n  };\n\n  // Fetch real data\n  useEffect(() => {\n    const fetchInitialData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch initial observations with pagination\n        const observationsResponse = await fetch(\n          `/api/observations?offset=0&limit=${obsLimit}`\n        );\n        if (!observationsResponse.ok) {\n          throw new Error('Failed to fetch observations');\n        }\n        const { observations: obsArr, total } =\n          await observationsResponse.json();\n        setObservations(obsArr);\n        setTotalObservations(total);\n        setObsOffset(obsArr.length);\n\n        if (obsArr.length > 0) {\n          setSelectedObservation(obsArr[0]);\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n        setObservations([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchInitialData();\n  }, []);\n\n  // Fetch initial players and teams - EXACT SAME AS PLAYERS PAGE\n  useEffect(() => {\n    // Fetch teams\n    fetch('/api/user/teams')\n      .then(res => {\n        if (!res.ok) {\n          console.log('Teams API returned error status:', res.status);\n          setTeams([]);\n          return;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        let arr: unknown = data;\n        if (data && Array.isArray(data)) {\n          arr = data;\n        }\n        const result = z.array(z.object({ id: z.string(), name: z.string() })).safeParse(arr);\n        if (result.success) {\n          // Deduplicate teams by id\n          const uniqueTeams = Array.from(\n            new Map(result.data.map(team => [team.id, team])).values()\n          );\n          uniqueTeams.sort((a, b) => a.name.localeCompare(b.name));\n          setTeams(uniqueTeams);\n        } else {\n          console.error('Zod validation error for teams:', result.error);\n          setTeams([]);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching teams:', error);\n        setTeams([]);\n      });\n\n    // Fetch initial players\n    setLoadingPlayers(true);\n    fetch('/api/dashboard/players?offset=0&limit=10')\n      .then(res => {\n        if (!res.ok) {\n          console.log('Players API returned error status:', res.status);\n          return null;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          // Reset the list with normalized state\n          const playersMap: Record<string, SharedPlayer> = {};\n          const ids: string[] = [];\n\n          transformedPlayers.forEach((player: SharedPlayer) => {\n            if (!playersMap[player.id]) {\n              playersMap[player.id] = player;\n              ids.push(player.id);\n            }\n          });\n\n          setPlayersById(playersMap);\n          setPlayerIds(ids);\n          setOffset(10);\n          setHasMore(data.players.length === 10);\n        }\n      })\n      .catch(error => {\n        console.error('Error fetching players:', error);\n      })\n      .finally(() => {\n        setLoadingPlayers(false);\n      });\n  }, []);\n\n  // Reset pagination when search or filter changes - EXACT SAME AS PLAYERS PAGE\n  useEffect(() => {\n    setOffset(0);\n    setHasMore(true);\n    fetchPlayers(0, true);\n  }, [searchTerm, teamFilter]);\n\n  // Reset page when player selection changes\n  useEffect(() => {\n    setPage(1);\n  }, [selectedPlayer]);\n\n  // Infinite scroll handler for expanded observations list\n  const handleObsScroll = async () => {\n    if (!showDatePicker || obsLoadingMore) return;\n    const el = obsListRef.current;\n    if (!el) return;\n    if (el.scrollTop + el.clientHeight >= el.scrollHeight - 64) {\n      // Near bottom, fetch more if available\n      if (observations.length < totalObservations) {\n        setObsLoadingMore(true);\n        try {\n          const res = await fetch(\n            `/api/observations?offset=${obsOffset}&limit=${obsLimit}`\n          );\n          if (res.ok) {\n            const data = await res.json();\n            setObservations(prev => [...prev, ...data.observations]);\n            setObsOffset(prev => prev + data.observations.length);\n          }\n        } finally {\n          setObsLoadingMore(false);\n        }\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"h-screen w-screen bg-[#161616] flex items-center justify-center\">\n        <div className=\"flex flex-col items-center justify-center w-full\">\n          <span className=\"text-zinc-400 text-lg font-semibold mb-4\">\n            Loading observations...\n          </span>\n          <div className=\"w-8 h-8 border-2 border-[#d8cc97] border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen p-4 bg-[#161616] flex items-center justify-center\">\n        <div className=\"bg-red-900/20 border border-red-500 rounded p-4 text-red-300\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header - exact replica with coach info */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            Coach\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            coach@example.com\n          </span>\n          <span className=\"text-xs text-white leading-tight\">Coach</span>\n        </div>\n      </header>\n      {/* Sidebar */}\n      <Sidebar\n        user={{\n          name: 'Coach',\n          email: 'coach@example.com',\n          role: 'Coach',\n        }}\n      />\n      {/* Main Content */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT PANE: Player List - EXACT SAME AS PLAYERS PAGE */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold text-[#d8cc97] mt-0\">Players</h2>\n            <Button\n              size=\"sm\"\n              onClick={() => {}}\n              className=\"bg-[#d8cc97] text-black hover:bg-[#d8cc97]/80\"\n            >\n              <Plus size={16} className=\"mr-1\" />\n              Add Player\n            </Button>\n          </div>\n          {/* Search Input */}\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search players...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n          {/* Team Filter */}\n          <div className=\"relative mb-6\">\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <div className=\"relative\">\n              <button\n                onClick={() => setIsTeamDropdownOpen(!isTeamDropdownOpen)}\n                className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm text-white border border-zinc-700 focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n              >\n                <span>{teamFilter === 'all' ? 'All Teams' : teamFilter}</span>\n                <span className=\"text-zinc-400\">▼</span>\n              </button>\n              {isTeamDropdownOpen && (\n                <div className=\"absolute top-full left-0 right-0 mt-1 bg-zinc-800 border border-zinc-700 rounded shadow-lg z-10 max-h-48 overflow-y-auto\">\n                  <button\n                    onClick={() => {\n                      setTeamFilter('all');\n                      setIsTeamDropdownOpen(false);\n                    }}\n                    className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                  >\n                    All Teams\n                  </button>\n                  {teams.map(team => (\n                    <button\n                      key={team.id}\n                      onClick={() => {\n                        setTeamFilter(team.name);\n                        setIsTeamDropdownOpen(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                    >\n                      {team.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          {/* Player List - Fixed height for exactly 10 player cards */}\n          <div\n            className=\"flex-1 overflow-y-auto space-y-2\"\n            style={{ maxHeight: '400px' }} // Exactly 10 player cards (10 * 40px)\n            onScroll={handleScroll}\n          >\n            {sortedPlayers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Shield className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n                <p className=\"text-zinc-400 text-sm\">No players found</p>\n              </div>\n            ) : (\n              sortedPlayers.map((player: SharedPlayer) => (\n                <div\n                  key={player.id}\n                  onClick={() => handlePlayerSelect(player)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all ${\n                    selectedPlayer?.id === player.id\n                      ? 'bg-[#d8cc97]/20 border border-[#d8cc97]'\n                      : 'bg-zinc-800/50 border border-zinc-700 hover:bg-zinc-800 hover:border-zinc-600'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-white\">{player.name}</p>\n                      <p className=\"text-sm text-zinc-400\">{player.team}</p>\n                    </div>\n                    <div\n                      className={`w-2 h-2 rounded-full ${\n                        player.status === 'active'\n                          ? 'bg-green-500'\n                          : 'bg-zinc-500'\n                      }`}\n                    />\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* CENTER PANE: Observations */}\n        <div\n          className=\"w-1/2 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <div className=\"flex items-center mb-6 gap-4 justify-between w-full\">\n            <h2 className=\"text-xl font-bold text-[#d8cc97] mt-0\">\n              {selectedPlayer\n                ? `${selectedPlayer.name}'s Observations`\n                : 'All Observations'}\n            </h2>\n            <div className=\"flex items-center gap-4\">\n              {/* Page size selector */}\n              <label className=\"text-sm text-zinc-400\">\n                Show:\n                <select\n                  className=\"ml-2 px-2 py-1 rounded bg-zinc-800 text-white border border-zinc-700\"\n                  value={pageSize}\n                  onChange={e => {\n                    setPageSize(\n                      e.target.value === 'all' ? 'all' : Number(e.target.value)\n                    );\n                    setPage(1);\n                  }}\n                >\n                  <option value={10}>10</option>\n                  <option value={25}>25</option>\n                  <option value={50}>50</option>\n                  <option value={100}>100</option>\n                  <option value=\"all\">All</option>\n                </select>\n              </label>\n              {/* Date range picker toggle */}\n              <Popover open={showDatePicker} onOpenChange={setShowDatePicker}>\n                <PopoverTrigger asChild>\n                  <Button\n                    variant=\"outline\"\n                    className=\"px-3 py-1 border border-zinc-700 bg-zinc-800 text-[#d8cc97] hover:border-[#d8cc97]\"\n                  >\n                    {dateRange?.from && dateRange?.to\n                      ? `${dateRange.from.toLocaleDateString()} - ${dateRange.to.toLocaleDateString()}`\n                      : 'Select Date Range'}\n                  </Button>\n                </PopoverTrigger>\n                <PopoverContent className=\"p-4 bg-black border-[#d8cc97] text-[#d8cc97] w-auto\">\n                  <Calendar\n                    mode=\"range\"\n                    selected={dateRange}\n                    onSelect={setDateRange}\n                    numberOfMonths={2}\n                    className=\"bg-black text-[#d8cc97]\"\n                  />\n                  <Button\n                    variant=\"ghost\"\n                    className=\"w-full mt-2 border border-[#d8cc97] text-[#d8cc97] hover:bg-[#232323]\"\n                    onClick={() => setShowDatePicker(false)}\n                  >\n                    Close\n                  </Button>\n                </PopoverContent>\n              </Popover>\n            </div>\n          </div>\n          {paginatedObservations.length > 0 ? (\n            <div\n              ref={obsListRef}\n              className=\"space-y-4\"\n              style={{\n                maxHeight: `${(pageSize === 'all' ? 12 : pageSize) * 64}px`,\n                minHeight: '0',\n                overflowY:\n                  paginatedObservations.length >\n                  (pageSize === 'all' ? 12 : pageSize)\n                    ? 'auto'\n                    : 'visible',\n              }}\n              onScroll={handleObsScroll}\n            >\n              {paginatedObservations.map(obs => (\n                <div\n                  key={obs.id}\n                  className=\"bg-zinc-800 px-6 py-3 rounded transition-all\"\n                  style={{ background: '#181818' }}\n                >\n                  <div className=\"flex justify-between items-start mb-3\">\n                    <div className=\"flex flex-col\">\n                      <div className=\"text-base font-bold text-[#d8cc97]\">\n                        {obs.playerName}\n                      </div>\n                      <div className=\"text-xs text-zinc-400\">\n                        {new Date(obs.date).toLocaleDateString()}\n                      </div>\n                    </div>\n                    <div className=\"flex gap-3\">\n                      <button\n                        className=\"text-xs text-[#d8cc97] font-semibold hover:underline bg-transparent\"\n                        style={{ background: 'transparent' }}\n                      >\n                        Edit\n                      </button>\n                      <button\n                        className=\"text-xs text-red-400 font-semibold hover:underline bg-transparent\"\n                        style={{ background: 'transparent' }}\n                      >\n                        Delete\n                      </button>\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-zinc-300 line-clamp-3\">\n                    {obs.description}\n                  </p>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-sm text-gray-500 text-center py-8\">\n              {selectedPlayer\n                ? 'No observations found for this player.'\n                : 'No observations found.'}\n            </div>\n          )}\n          {/* Pagination controls */}\n          {pageSize !== 'all' && totalPages > 1 && (\n            <div className=\"flex justify-center mt-4 gap-2\">\n              <button\n                className=\"px-2 py-1 rounded bg-zinc-800 border border-zinc-700 text-sm\"\n                onClick={() => setPage(p => Math.max(1, p - 1))}\n                disabled={page === 1}\n              >\n                Prev\n              </button>\n              <span className=\"px-2 py-1 text-sm\">\n                Page {page} of {totalPages}\n              </span>\n              <button\n                className=\"px-2 py-1 rounded bg-zinc-800 border border-zinc-700 text-sm\"\n                onClick={() => setPage(p => Math.min(totalPages, p + 1))}\n                disabled={page === totalPages}\n              >\n                Next\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* RIGHT PANE: Insights */}\n        <div\n          className=\"w-1/4 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            Insights\n          </h2>\n\n          {/* Teaser Feature Block */}\n          <div className=\"bg-zinc-800 p-6 rounded\">\n            <div className=\"p-4 bg-zinc-900 rounded border border-dashed border-[#d8cc97]\">\n              <p className=\"text-sm text-[#d8cc97] font-semibold mb-3\">\n                🚀 Coming Soon to This Panel:\n              </p>\n              <ul className=\"text-sm text-gray-400 list-disc list-inside space-y-2\">\n                <li>AI-powered constraint suggestions</li>\n                <li>Tag trend visualizations</li>\n                <li>Drill recommendations based on this observation</li>\n              </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart3' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":12}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport DashboardLayout from '@/components/layouts/DashboardLayout';\nimport UniversalCard from '@/components/ui/UniversalCard';\nimport UniversalButton from '@/components/ui/UniversalButton';\nimport {\n  Users,\n  Award,\n  Calendar,\n  BarChart3,\n  TrendingUp,\n  Activity,\n} from 'lucide-react';\n\nexport default function DashboardPage() {\n  const [stats, setStats] = useState({\n    totalPlayers: 0,\n    totalTeams: 0,\n    activePlans: 0,\n    recentObservations: 0,\n  });\n\n  useEffect(() => {\n    // Fetch dashboard stats\n    // This would typically fetch from your API\n    setStats({\n      totalPlayers: 12,\n      totalTeams: 3,\n      activePlans: 8,\n      recentObservations: 15,\n    });\n  }, []);\n\n  return (\n    <DashboardLayout title=\"Dashboard\">\n      <div className=\"space-y-6\">\n        {/* Stats Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <UniversalCard.Default>\n            <div className=\"flex items-center\">\n              <div className=\"p-2 rounded-lg bg-blue-500/20\">\n                <Users className=\"h-6 w-6 text-blue-500\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-zinc-400\">\n                  Total Players\n                </p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {stats.totalPlayers}\n                </p>\n              </div>\n            </div>\n          </UniversalCard.Default>\n\n          <UniversalCard.Default>\n            <div className=\"flex items-center\">\n              <div className=\"p-2 rounded-lg bg-green-500/20\">\n                <Award className=\"h-6 w-6 text-green-500\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-zinc-400\">Total Teams</p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {stats.totalTeams}\n                </p>\n              </div>\n            </div>\n          </UniversalCard.Default>\n\n          <UniversalCard.Default>\n            <div className=\"flex items-center\">\n              <div className=\"p-2 rounded-lg bg-purple-500/20\">\n                <Calendar className=\"h-6 w-6 text-purple-500\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-zinc-400\">\n                  Active Plans\n                </p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {stats.activePlans}\n                </p>\n              </div>\n            </div>\n          </UniversalCard.Default>\n\n          <UniversalCard.Default>\n            <div className=\"flex items-center\">\n              <div className=\"p-2 rounded-lg bg-orange-500/20\">\n                <Activity className=\"h-6 w-6 text-orange-500\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-zinc-400\">\n                  Recent Observations\n                </p>\n                <p className=\"text-2xl font-bold text-white\">\n                  {stats.recentObservations}\n                </p>\n              </div>\n            </div>\n          </UniversalCard.Default>\n        </div>\n\n        {/* Quick Actions */}\n        <UniversalCard.Default title=\"Quick Actions\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            <a href=\"/players\">\n              <UniversalButton.Primary>\n                View All Players\n              </UniversalButton.Primary>\n            </a>\n\n            <a href=\"/development-plans\">\n              <UniversalButton.Secondary>\n                Development Plans\n              </UniversalButton.Secondary>\n            </a>\n\n            <a href=\"/observations\">\n              <UniversalButton.Secondary>\n                View Observations\n              </UniversalButton.Secondary>\n            </a>\n\n            <a href=\"/teams\">\n              <UniversalButton.Secondary>\n                Manage Teams\n              </UniversalButton.Secondary>\n            </a>\n\n            <a href=\"/analytics\">\n              <UniversalButton.Secondary>\n                View Analytics\n              </UniversalButton.Secondary>\n            </a>\n\n            <a href=\"/settings\">\n              <UniversalButton.Secondary>Settings</UniversalButton.Secondary>\n            </a>\n          </div>\n        </UniversalCard.Default>\n\n        {/* Recent Activity */}\n        <UniversalCard.Default title=\"Recent Activity\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4 p-3 rounded-lg bg-zinc-800/50\">\n              <div className=\"p-2 rounded-lg bg-green-500/20\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-white\">\n                  New player added to Team A\n                </p>\n                <p className=\"text-xs text-zinc-400\">2 hours ago</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4 p-3 rounded-lg bg-zinc-800/50\">\n              <div className=\"p-2 rounded-lg bg-blue-500/20\">\n                <Calendar className=\"h-4 w-4 text-blue-500\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-white\">\n                  Development plan updated for John Doe\n                </p>\n                <p className=\"text-xs text-zinc-400\">4 hours ago</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-4 p-3 rounded-lg bg-zinc-800/50\">\n              <div className=\"p-2 rounded-lg bg-purple-500/20\">\n                <Activity className=\"h-4 w-4 text-purple-500\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-sm font-medium text-white\">\n                  New observation recorded for Team B\n                </p>\n                <p className=\"text-xs text-zinc-400\">6 hours ago</p>\n              </div>\n            </div>\n          </div>\n        </UniversalCard.Default>\n      </div>\n    </DashboardLayout>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/players/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··Shield,⏎··Plus,⏎··Eye,⏎··Search,⏎··Filter,⏎` with `·Shield,·Plus,·Eye,·Search,·Filter·`","line":4,"column":9,"nodeType":null,"messageId":"replace","endLine":10,"endColumn":1,"fix":{"range":[88,134],"text":" Shield, Plus, Eye, Search, Filter "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'loadingObservations' is assigned a value but never used.","line":78,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'errorObservations' is assigned a value but never used.","line":79,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":79,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3378,3381],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3378,3381],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'newPlayer' is assigned a value but never used.","line":119,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":119,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5067,5070],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5067,5070],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":211,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":211,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":301,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":301,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":320,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":320,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9745,9748],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9745,9748],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":344,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":344,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":393,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":393,"endColumn":17},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchPlayers'. Either include it or remove the dependency array.","line":405,"column":6,"nodeType":"ArrayExpression","endLine":405,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchPlayers, searchTerm, teamFilter]","fix":{"range":[12419,12443],"text":"[fetchPlayers, searchTerm, teamFilter]"}}]},{"ruleId":"no-undef","severity":2,"message":"'Star' is not defined.","line":411,"column":8,"nodeType":"JSXIdentifier","messageId":"undef","endLine":411,"endColumn":12}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect, useCallback } from 'react';\nimport {\n  Shield,\n  Plus,\n  Eye,\n  Search,\n  Filter,\n} from 'lucide-react';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport UniversalButton from '@/components/ui/UniversalButton';\nimport UniversalModal from '@/components/ui/UniversalModal';\nimport AddPlayerModal from '@/components/basketball/AddPlayerModal';\nimport ArchivePlanModal from '@/components/basketball/ArchivePlanModal';\nimport { z } from 'zod';\nimport type { Player as SharedPlayer } from '@/components/basketball/PlayerListCard';\n\n// Types for observations\ninterface Observation {\n  id: string;\n  playerId: string;\n  playerFirstName?: string | undefined;\n  playerLastName?: string | undefined;\n  playerName: string;\n  title: string;\n  description: string;\n  rating: number;\n  date: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string | null;\n}\n\ninterface Team {\n  id: string;\n  name: string;\n}\n\n// Zod schema for Observation (matching actual API response)\nconst ObservationSchema = z.object({\n  id: z.string(),\n  playerId: z.string(),\n  playerFirstName: z.string().optional(),\n  playerLastName: z.string().optional(),\n  playerName: z.string(),\n  title: z.string(),\n  description: z.string(),\n  rating: z.number(),\n  date: z.string(),\n  tags: z.array(z.string()),\n  createdAt: z.string(),\n  updatedAt: z.string().nullable(),\n});\nconst ObservationsArraySchema = z.array(ObservationSchema);\n\n// Zod schema for Team\nconst TeamSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n});\nconst TeamsArraySchema = z.array(TeamSchema);\n\nexport default function PlayersPage() {\n  // Normalized state pattern - industry standard\n  const [playersById, setPlayersById] = useState<Record<string, SharedPlayer>>(\n    {}\n  );\n  const [playerIds, setPlayerIds] = useState<string[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedPlayer, setSelectedPlayer] = useState<SharedPlayer | null>(\n    null\n  );\n  const [showAddPlayerModal, setShowAddPlayerModal] = useState(false);\n  const [showDeletePlayerModal, setShowDeletePlayerModal] = useState(false);\n  const [showArchivePlanModal, setShowArchivePlanModal] = useState(false);\n  const [observations, setObservations] = useState<Observation[]>([]);\n  const [loadingObservations, setLoadingObservations] = useState(true);\n  const [errorObservations, setErrorObservations] = useState<string | null>(\n    null\n  );\n\n  // Infinite scroll state\n  const [loading, setLoading] = useState(false);\n  const [hasMore, setHasMore] = useState(true);\n  const [offset, setOffset] = useState(0);\n\n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState('');\n  const [teamFilter, setTeamFilter] = useState('all');\n  const [isTeamDropdownOpen, setIsTeamDropdownOpen] = useState(false);\n\n  // Handler for adding a new player\n  const handleAddPlayer = () => {\n    setShowAddPlayerModal(true);\n  };\n\n  // Handler for selecting a player\n  const handlePlayerSelect = (player: SharedPlayer) => {\n    setSelectedPlayer(player);\n  };\n\n  // Handler for deleting a player\n  const handleDeletePlayer = () => {\n    setShowDeletePlayerModal(true);\n  };\n\n  // Handler for archiving a development plan\n  const handleArchivePlan = () => {\n    setShowArchivePlanModal(true);\n  };\n\n  // Handler for add player form submission\n  const handleAddPlayerSubmit = (data: any) => {\n    // In a real app, this would add the player to the database\n    // console.log('Adding player:', data);\n\n    // Create a new player object\n    const newPlayer = {\n      id: `${playerIds.length + 1}`,\n      name: `${data.firstName} ${data.lastName}`,\n      teamId: data.teamId,\n      status: 'active' as const,\n    };\n\n    // For demo purposes, we'll just log it\n    // console.log('New player would be added:', newPlayer);\n\n    // Close the modal\n    setShowAddPlayerModal(false);\n  };\n\n  // Handler for delete player confirmation\n  const handleDeletePlayerConfirm = () => {\n    // In a real app, this would delete the player from the database\n    // console.log('Deleting player:', selectedPlayer);\n\n    // For demo purposes, we'll just log it and clear the selection\n    setSelectedPlayer(null);\n\n    // Close the modal\n    setShowDeletePlayerModal(false);\n  };\n\n  // Handler for archive plan confirmation\n  const handleArchivePlanConfirm = () => {\n    // In a real app, this would archive the development plan\n    // console.log('Archiving development plan for player:', selectedPlayer);\n\n    // For demo purposes, we'll just log it\n    // console.log('Plan would be archived');\n\n    // Close the modal\n    setShowArchivePlanModal(false);\n  };\n\n  // Fetch players with pagination\n  const fetchPlayers = useCallback(\n    async (currentOffset: number = 0, reset: boolean = false) => {\n      setLoading(true);\n      try {\n        const response = await fetch(\n          `/api/dashboard/players?offset=${currentOffset}&limit=10`\n        );\n        const data = await response.json();\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          if (reset) {\n            // Reset the list with normalized state\n            const playersMap: Record<string, SharedPlayer> = {};\n            const ids: string[] = [];\n\n            transformedPlayers.forEach((player: SharedPlayer) => {\n              if (!playersMap[player.id]) {\n                playersMap[player.id] = player;\n                ids.push(player.id);\n              }\n            });\n\n            setPlayersById(playersMap);\n            setPlayerIds(ids);\n            setOffset(10);\n          } else {\n            // Append to existing list with normalized state\n            setPlayersById(prevPlayersById => {\n              const newPlayersById = { ...prevPlayersById };\n              const newIds: string[] = [];\n\n              transformedPlayers.forEach((player: SharedPlayer) => {\n                if (!newPlayersById[player.id]) {\n                  newPlayersById[player.id] = player;\n                  newIds.push(player.id);\n                }\n              });\n\n              setPlayerIds(prevIds => [...prevIds, ...newIds]);\n              return newPlayersById;\n            });\n            setOffset(prev => prev + 10);\n          }\n\n          setHasMore(data.players.length === 10);\n        }\n      } catch (error) {\n        // console.error('Error fetching players:', error);\n      } finally {\n        setLoading(false);\n      }\n    },\n    []\n  );\n\n  // Load more players when scrolling\n  const handleScroll = useCallback(\n    (e: React.UIEvent<HTMLDivElement>) => {\n      const { scrollTop, scrollHeight, clientHeight } = e.currentTarget;\n      if (\n        scrollHeight - scrollTop <= clientHeight * 1.5 &&\n        !loading &&\n        hasMore\n      ) {\n        fetchPlayers(offset);\n      }\n    },\n    [fetchPlayers, loading, hasMore, offset]\n  );\n\n  // Filter players based on search and team filter\n  const filteredPlayers = playerIds\n    .map(id => playersById[id])\n    .filter(\n      (player: SharedPlayer | undefined): player is SharedPlayer =>\n        !!player && !!player.id\n    )\n    .filter(player => {\n      const matchesSearch = player.name\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase());\n      const matchesTeam = teamFilter === 'all' || player.team === teamFilter;\n      return matchesSearch && matchesTeam;\n    });\n  // Deduplicate by player.id before sorting and rendering\n  const dedupedPlayers = Array.from(\n    new Map(filteredPlayers.map(p => [p.id, p])).values()\n  );\n  const sortedPlayers = [...dedupedPlayers].sort((a, b) =>\n    a.name.localeCompare(b.name)\n  );\n  // Debug: log duplicate IDs or undefined/null\n  if (typeof window !== 'undefined') {\n    const idSet = new Set();\n    for (const p of sortedPlayers) {\n      if (idSet.has(p.id)) {\n        // console.error('DUPLICATE ID:', p.id);\n      }\n      idSet.add(p.id);\n    }\n    if (sortedPlayers.some(p => !p || !p.id)) {\n      // console.error('Undefined or null player in sortedPlayers', sortedPlayers);\n    }\n  }\n\n  useEffect(() => {\n    // Fetch teams\n    fetch('/api/user/teams')\n      .then(res => {\n        if (!res.ok) {\n          // console.log('Teams API returned error status:', res.status);\n          setTeams([]);\n          return;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        let arr: unknown = data;\n        if (data && Array.isArray(data)) {\n          arr = data;\n        }\n        const result = TeamsArraySchema.safeParse(arr);\n        if (result.success) {\n          // Deduplicate teams by id\n          const uniqueTeams = Array.from(\n            new Map(result.data.map(team => [team.id, team])).values()\n          );\n          uniqueTeams.sort((a, b) => a.name.localeCompare(b.name));\n          setTeams(uniqueTeams);\n        } else {\n          // console.error('Zod validation error for teams:', result.error);\n          setTeams([]);\n        }\n      })\n      .catch(error => {\n        // console.error('Error fetching teams:', error);\n        setTeams([]);\n      });\n\n    // Fetch initial players\n    setLoading(true);\n    fetch('/api/dashboard/players?offset=0&limit=10')\n      .then(res => {\n        if (!res.ok) {\n          // console.log('Players API returned error status:', res.status);\n          return null;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        if (data.players) {\n          const transformedPlayers = data.players.map((player: any) => ({\n            id: player.id,\n            name: player.name || 'Unknown Player',\n            team: player.team || 'No Team',\n            status: player.status || 'active',\n          }));\n\n          // Reset the list with normalized state\n          const playersMap: Record<string, SharedPlayer> = {};\n          const ids: string[] = [];\n\n          transformedPlayers.forEach((player: SharedPlayer) => {\n            if (!playersMap[player.id]) {\n              playersMap[player.id] = player;\n              ids.push(player.id);\n            }\n          });\n\n          setPlayersById(playersMap);\n          setPlayerIds(ids);\n          setOffset(10);\n          setHasMore(data.players.length === 10);\n        }\n      })\n      .catch(error => {\n        // console.error('Error fetching players:', error);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n\n    // Fetch observations\n    setLoadingObservations(true);\n    setErrorObservations(null);\n    fetch('/api/observations')\n      .then(res => {\n        if (!res.ok) {\n          // console.log('Observations API returned error status:', res.status);\n          setObservations([]);\n          setErrorObservations('Failed to fetch observations');\n          return null;\n        }\n        return res.json();\n      })\n      .then(data => {\n        if (!data) return; // Skip if no data (error case)\n\n        // Handle the API response structure: { observations: [...], total: number }\n        if (data && data.observations && Array.isArray(data.observations)) {\n          const result = ObservationsArraySchema.safeParse(data.observations);\n          if (result.success) {\n            setObservations(result.data);\n          } else {\n            // console.error(\n            //   'Zod validation error for observations:',\n            //   result.error\n            // );\n            setObservations([]);\n            setErrorObservations(\n              'Invalid observations data received from API.'\n            );\n          }\n        } else {\n          // console.error(\n          //   'Invalid API response structure for observations:',\n          //   data\n          // );\n          setObservations([]);\n          setErrorObservations(\n            'Invalid observations data structure received from API.'\n          );\n        }\n      })\n      .catch(err => {\n        // console.error('Error fetching observations:', err);\n        setErrorObservations('Failed to fetch observations');\n      })\n      .finally(() => setLoadingObservations(false));\n  }, []);\n\n  // Reset pagination when search or filter changes\n  useEffect(() => {\n    setOffset(0);\n    setHasMore(true);\n    fetchPlayers(0, true);\n  }, [searchTerm, teamFilter]);\n\n  // Helper to get rating stars\n  const getRatingStars = (rating: number | undefined) => {\n    const safeRating = typeof rating === 'number' ? rating : 0;\n    return Array.from({ length: 5 }, (_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${i < safeRating ? 'text-yellow-500 fill-current' : 'text-zinc-600'}`}\n      />\n    ));\n  };\n\n  // Defensive: always check Array.isArray before .filter\n  const safeObservations = Array.isArray(observations)\n    ? observations.filter(Boolean)\n    : [];\n  const playerObservations = selectedPlayer\n    ? safeObservations\n        .filter(\n          (obs): obs is Observation => !!obs && typeof obs.playerId === 'string'\n        )\n        .filter(obs => obs.playerId === selectedPlayer.id)\n    : [];\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header - exact replica with coach info */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            Coach\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            coach@example.com\n          </span>\n          <span className=\"text-xs text-white leading-tight\">Coach</span>\n        </div>\n      </header>\n\n      {/* Sidebar */}\n      <Sidebar\n        user={{\n          name: 'Coach',\n          email: 'coach@example.com',\n          role: 'Coach',\n        }}\n      />\n\n      {/* Main Content */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT PANE: Player List */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <div className=\"flex justify-between items-center mb-6\">\n            <h2 className=\"text-xl font-bold text-[#d8cc97] mt-0\">Players</h2>\n            <UniversalButton.Primary\n              size=\"sm\"\n              onClick={handleAddPlayer}\n              leftIcon={<Plus size={16} />}\n            >\n              Add Player\n            </UniversalButton.Primary>\n          </div>\n          {/* Search Input */}\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search players...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n          {/* Team Filter */}\n          <div className=\"relative mb-6\">\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <div className=\"relative\">\n              <button\n                onClick={() => setIsTeamDropdownOpen(!isTeamDropdownOpen)}\n                className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm text-white border border-zinc-700 focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n              >\n                <span>{teamFilter === 'all' ? 'All Teams' : teamFilter}</span>\n                <span className=\"text-zinc-400\">▼</span>\n              </button>\n              {isTeamDropdownOpen && (\n                <div className=\"absolute top-full left-0 right-0 mt-1 bg-zinc-800 border border-zinc-700 rounded shadow-lg z-10 max-h-48 overflow-y-auto\">\n                  <button\n                    onClick={() => {\n                      setTeamFilter('all');\n                      setIsTeamDropdownOpen(false);\n                    }}\n                    className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                  >\n                    All Teams\n                  </button>\n                  {teams.map(team => (\n                    <button\n                      key={team.id}\n                      onClick={() => {\n                        setTeamFilter(team.name);\n                        setIsTeamDropdownOpen(false);\n                      }}\n                      className=\"w-full px-4 py-2 text-left text-sm text-white hover:bg-zinc-700\"\n                    >\n                      {team.name}\n                    </button>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n          {/* Player List - Fixed height for exactly 10 player cards */}\n          <div\n            className=\"flex-1 overflow-y-auto space-y-2\"\n            style={{ maxHeight: '400px' }} // Exactly 10 player cards (10 * 40px)\n            onScroll={handleScroll}\n          >\n            {sortedPlayers.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Shield className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n                <p className=\"text-zinc-400 text-sm\">No players found</p>\n              </div>\n            ) : (\n              sortedPlayers.map((player: SharedPlayer) => (\n                <div\n                  key={player.id}\n                  onClick={() => handlePlayerSelect(player)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all ${\n                    selectedPlayer?.id === player.id\n                      ? 'bg-[#d8cc97]/20 border border-[#d8cc97]'\n                      : 'bg-zinc-800/50 border border-zinc-700 hover:bg-zinc-800 hover:border-zinc-600'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-white\">{player.name}</p>\n                      <p className=\"text-sm text-zinc-400\">{player.team}</p>\n                    </div>\n                    <div\n                      className={`w-2 h-2 rounded-full ${\n                        player.status === 'active'\n                          ? 'bg-green-500'\n                          : 'bg-zinc-500'\n                      }`}\n                    />\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* MIDDLE PANE: Player Profile */}\n        <div className=\"flex-1 p-6 bg-black\">\n          {selectedPlayer ? (\n            <div className=\"space-y-6\">\n              {/* Player Profile Section */}\n              <div className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <h3 className=\"text-xl font-bold text-[#d8cc97]\">\n                    Player Profile\n                  </h3>\n                  <div className=\"flex gap-2\">\n                    <UniversalButton.Secondary\n                      size=\"sm\"\n                      onClick={() => {\n                        /* Edit player logic */\n                      }}\n                    >\n                      Edit Player\n                    </UniversalButton.Secondary>\n\n                    <UniversalButton.Danger\n                      size=\"sm\"\n                      onClick={handleDeletePlayer}\n                    >\n                      Delete Player\n                    </UniversalButton.Danger>\n                  </div>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <p className=\"text-sm text-zinc-400\">Name</p>\n                      <p className=\"text-white\">{selectedPlayer.name}</p>\n                    </div>\n                    <div>\n                      <p className=\"text-sm text-zinc-400\">Team</p>\n                      <p className=\"text-white\">{selectedPlayer.team}</p>\n                    </div>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm text-zinc-400\">Status</p>\n                    <div\n                      className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${\n                        selectedPlayer.status === 'active'\n                          ? 'bg-gold-500/20 text-gold-500'\n                          : 'bg-danger-500/20 text-danger-500'\n                      }`}\n                    >\n                      {selectedPlayer.status === 'active'\n                        ? 'Active'\n                        : 'Archived'}\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Development Plan Section */}\n              <div className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6\">\n                <div className=\"flex justify-between items-start mb-4\">\n                  <h3 className=\"text-xl font-bold text-[#d8cc97]\">\n                    Development Plan\n                  </h3>\n                  <div className=\"flex gap-2\">\n                    <UniversalButton.Primary size=\"sm\">\n                      Create Plan\n                    </UniversalButton.Primary>\n                    <UniversalButton.Secondary\n                      size=\"sm\"\n                      onClick={handleArchivePlan}\n                    >\n                      Archive Plan\n                    </UniversalButton.Secondary>\n                  </div>\n                </div>\n\n                <div className=\"text-center py-8\">\n                  <Shield className=\"text-zinc-700 w-16 h-16 mx-auto mb-4\" />\n                  <p className=\"text-zinc-400 mb-2\">\n                    No development plan created yet\n                  </p>\n                  <p className=\"text-sm text-zinc-500\">\n                    Create a development plan to track this player's progress\n                  </p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"bg-zinc-900 border border-zinc-800 rounded-lg p-6 flex flex-col items-center justify-center h-full\">\n              <Shield className=\"text-zinc-700 w-20 h-20 mb-5\" />\n              <h3 className=\"text-lg font-medium text-white mb-2\">\n                Select a Player to View Their Profile\n              </h3>\n              <p className=\"text-sm text-zinc-400 max-w-md mb-6 text-center\">\n                Select a player from the list to view their profile details and\n                development plan.\n              </p>\n            </div>\n          )}\n        </div>\n\n        {/* RIGHT PANE: Recent Observations */}\n        <div\n          className=\"w-1/3 border-l border-zinc-800 p-6 bg-black flex flex-col min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97]\">\n            Recent Observations\n          </h2>\n\n          {selectedPlayer ? (\n            <div className=\"flex-1 overflow-y-auto space-y-4\">\n              {playerObservations.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Eye className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n                  <p className=\"text-zinc-400 text-sm\">No observations yet</p>\n                  <p className=\"text-xs text-zinc-500 mt-1\">\n                    Observations will appear here\n                  </p>\n                </div>\n              ) : (\n                playerObservations.slice(0, 5).map(observation => (\n                  <div\n                    key={observation.id}\n                    className=\"bg-zinc-800/50 border border-zinc-700 rounded-lg p-4\"\n                  >\n                    <div className=\"flex items-start justify-between mb-2\">\n                      <h4 className=\"font-medium text-white text-sm\">\n                        {observation.title}\n                      </h4>\n                      <div className=\"flex items-center gap-1\">\n                        {getRatingStars(observation.rating)}\n                      </div>\n                    </div>\n                    <p className=\"text-zinc-400 text-xs mb-2 line-clamp-2\">\n                      {observation.description}\n                    </p>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-zinc-500\">\n                        {new Date(observation.date).toLocaleDateString()}\n                      </span>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Eye className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n              <p className=\"text-zinc-400 text-sm\">\n                Select a player to view their observations\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Modals */}\n      {showAddPlayerModal && (\n        <AddPlayerModal\n          isOpen={showAddPlayerModal}\n          onClose={() => setShowAddPlayerModal(false)}\n          onSubmit={handleAddPlayerSubmit}\n          teams={teams}\n        />\n      )}\n\n      {showDeletePlayerModal && (\n        <UniversalModal.Confirm\n          open={showDeletePlayerModal}\n          onOpenChange={setShowDeletePlayerModal}\n          title=\"Delete Player\"\n          description={`Are you sure you want to delete ${selectedPlayer?.name}? This action cannot be undone.`}\n          confirmText=\"Delete Player\"\n          onConfirm={handleDeletePlayerConfirm}\n          onCancel={() => setShowDeletePlayerModal(false)}\n          variant=\"danger\"\n        />\n      )}\n\n      {showArchivePlanModal && (\n        <ArchivePlanModal\n          isOpen={showArchivePlanModal}\n          onClose={() => setShowArchivePlanModal(false)}\n          onConfirm={handleArchivePlanConfirm}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/pricing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/pricing/submit-button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/sessions/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Target' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'page' is assigned a value but never used.","line":95,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pageSize' is assigned a value but never used.","line":96,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filteredSessions' is assigned a value but never used.","line":109,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3912,3915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3912,3915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":171,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":171,"endColumn":26,"suggestions":[{"fix":{"range":[4791,4856],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":211,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":211,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6322,6325],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6322,6325],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":224,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":224,"endColumn":28,"suggestions":[{"fix":{"range":[6765,6828],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":247,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":247,"endColumn":26,"suggestions":[{"fix":{"range":[7682,7801],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":263,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":263,"endColumn":26,"suggestions":[{"fix":{"range":[8207,8266],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":292,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":292,"endColumn":22,"suggestions":[{"fix":{"range":[9142,9185],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  ChevronDown,\n  ChevronUp,\n  Search,\n  Filter,\n  Users,\n  Target,\n} from 'lucide-react';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport { z } from 'zod';\n\n// Zod schemas for validation\nconst SessionSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  date: z.string(),\n  time: z.string(),\n  team: z.string(),\n  type: z.enum([\n    'Practice',\n    'Game',\n    'Training',\n    'Meeting',\n    'Workout',\n    'Evaluation',\n  ]),\n  duration: z.number(),\n  coach: z.string(),\n  location: z.string(),\n  description: z.string(),\n  status: z.enum(['scheduled', 'in_progress', 'completed', 'cancelled']),\n  attendance: z.number(),\n  maxAttendance: z.number(),\n  createdAt: z.string(),\n  updatedAt: z.string(),\n});\nconst SessionsArraySchema = z.array(SessionSchema);\n\nconst PlayerSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  team: z.string(),\n  status: z.string(),\n});\nconst PlayersArraySchema = z.array(PlayerSchema);\n\nconst TeamSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n});\nconst TeamsArraySchema = z.array(TeamSchema);\n\n// Types for sessions\ninterface Session {\n  id: string;\n  title: string;\n  date: string;\n  time: string;\n  team: string;\n  type: 'Practice' | 'Game' | 'Training' | 'Meeting' | 'Workout' | 'Evaluation';\n  duration: number;\n  coach: string;\n  location: string;\n  description: string;\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';\n  attendance: number;\n  maxAttendance: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Player {\n  id: string;\n  name: string;\n  team: string;\n  status: string;\n}\n\ninterface Team {\n  id: string;\n  name: string;\n}\n\n// Main component\nexport default function SessionsPage() {\n  const [sessions, setSessions] = useState<Session[]>([]);\n  const [selectedSession, setSelectedSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  // Pagination state for sessions\n  const [page, setPage] = useState(1);\n  const pageSize = 5;\n\n  // Player/team data for left column\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedSessionId, setSelectedSessionId] = useState<string | null>(\n    null\n  );\n  const [searchTerm, setSearchTerm] = useState('');\n  const [teamFilter, setTeamFilter] = useState('all');\n  const [isTeamDropdownOpen, setIsTeamDropdownOpen] = useState(false);\n\n  // Filter sessions by selected team\n  const filteredSessions = selectedSessionId\n    ? sessions.filter(session => session.id === selectedSessionId)\n    : sessions;\n\n  const filteredSessionsList = sessions.filter(session => {\n    const matchesSearch = session.title\n      .toLowerCase()\n      .includes(searchTerm.toLowerCase());\n    const matchesTeam = teamFilter === 'all' || session.team === teamFilter;\n    return matchesSearch && matchesTeam;\n  });\n\n  // Handle session selection with toggle functionality\n  const handleSessionSelect = (sessionId: string) => {\n    if (selectedSessionId === sessionId) {\n      // Clicking the same session again - show all sessions\n      setSelectedSessionId(null);\n    } else {\n      // Clicking a different session - filter to their details\n      setSelectedSessionId(sessionId);\n    }\n  };\n\n  // Fetch real data\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        // Fetch sessions from API with validation\n        const sessionsResponse = await fetch('/api/dashboard/sessions');\n        let transformedSessions: Session[] = [];\n        if (sessionsResponse.ok) {\n          const rawSessionsData = await sessionsResponse.json();\n\n          // Transform the raw data to match our schema\n          const transformedRawSessions = rawSessionsData.map(\n            (session: any) => ({\n              id: session.id,\n              title: session.title,\n              date: session.date,\n              time: session.time,\n              team: session.team,\n              type: session.type,\n              duration: 90, // Default duration\n              coach: 'Coach Johnson', // Default coach\n              location: 'Main Gym',\n              description: `${session.type} session for ${session.team}`,\n              status: 'scheduled' as const,\n              attendance: Math.floor(Math.random() * 20) + 5,\n              maxAttendance: 25,\n              createdAt: '2024-01-01',\n              updatedAt: '2024-01-15',\n            })\n          );\n\n          // Validate sessions data\n          const validatedSessions = SessionsArraySchema.safeParse(\n            transformedRawSessions\n          );\n          if (!validatedSessions.success) {\n            console.error('Invalid sessions data:', validatedSessions.error);\n            throw new Error('Invalid sessions data received');\n          }\n\n          // Filter out any invalid sessions\n          const validSessions = validatedSessions.data.filter(\n            (session): session is Session =>\n              session &&\n              typeof session === 'object' &&\n              typeof session.id === 'string' &&\n              typeof session.title === 'string' &&\n              typeof session.team === 'string' &&\n              session.id.trim() !== '' &&\n              session.title.trim() !== '' &&\n              session.team.trim() !== ''\n          );\n\n          // Deduplicate sessions by id\n          const uniqueSessions = Array.from(\n            new Map(\n              validSessions.map(session => [session.id, session])\n            ).values()\n          );\n          setSessions(uniqueSessions);\n          transformedSessions = uniqueSessions;\n        }\n\n        // Fetch players with validation\n        const playersResponse = await fetch(\n          '/api/dashboard/players?offset=0&limit=10'\n        );\n        if (playersResponse.ok) {\n          const rawPlayersData = await playersResponse.json();\n          // Handle the API response structure: { players: [...], total: number }\n          if (\n            rawPlayersData &&\n            rawPlayersData.players &&\n            Array.isArray(rawPlayersData.players)\n          ) {\n            const transformedRawPlayers = rawPlayersData.players.map(\n              (player: any) => ({\n                id: player.id,\n                name: player.name || 'Unknown Player',\n                team: player.team || 'No Team',\n                status: player.status || 'active',\n              })\n            );\n\n            // Validate players data\n            const validatedPlayers = PlayersArraySchema.safeParse(\n              transformedRawPlayers\n            );\n            if (!validatedPlayers.success) {\n              console.error('Invalid players data:', validatedPlayers.error);\n              throw new Error('Invalid players data received');\n            }\n\n            // Filter out any invalid players\n            const validPlayers = validatedPlayers.data.filter(\n              (player): player is Player =>\n                player &&\n                typeof player === 'object' &&\n                typeof player.id === 'string' &&\n                typeof player.name === 'string' &&\n                typeof player.team === 'string' &&\n                player.id.trim() !== '' &&\n                player.name.trim() !== '' &&\n                player.team.trim() !== ''\n            );\n\n            // Deduplicate players by id\n            const uniquePlayers = Array.from(\n              new Map(validPlayers.map(player => [player.id, player])).values()\n            );\n            setPlayers(uniquePlayers);\n          } else {\n            console.error(\n              'Invalid API response structure for players:',\n              rawPlayersData\n            );\n            setPlayers([]);\n          }\n        }\n\n        // Fetch teams with validation\n        const teamsResponse = await fetch('/api/user/teams');\n        if (teamsResponse.ok) {\n          const rawTeamsData = await teamsResponse.json();\n\n          // Validate teams data\n          const validatedTeams = TeamsArraySchema.safeParse(rawTeamsData);\n          if (!validatedTeams.success) {\n            console.error('Invalid teams data:', validatedTeams.error);\n            throw new Error('Invalid teams data received');\n          }\n\n          // Filter out any invalid teams and deduplicate by id\n          const validTeams = validatedTeams.data.filter(\n            (team): team is Team =>\n              team &&\n              typeof team === 'object' &&\n              typeof team.id === 'string' &&\n              typeof team.name === 'string' &&\n              team.id.trim() !== '' &&\n              team.name.trim() !== ''\n          );\n\n          const uniqueTeams = Array.from(\n            new Map(validTeams.map(team => [team.id, team])).values()\n          );\n          setTeams(uniqueTeams);\n        }\n\n        if (\n          transformedSessions &&\n          transformedSessions.length > 0 &&\n          transformedSessions[0]\n        ) {\n          setSelectedSession(transformedSessions[0]);\n        }\n      } catch (err) {\n        console.error('Error fetching data:', err);\n        setError(err instanceof Error ? err.message : 'Failed to fetch data');\n        setSessions([]);\n        setPlayers([]);\n        setTeams([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  // Reset page when session selection changes\n  useEffect(() => {\n    setPage(1);\n  }, [selectedSessionId]);\n\n  if (loading) {\n    return (\n      <div className=\"h-screen w-screen bg-[#161616] flex items-center justify-center\">\n        <div className=\"flex flex-col items-center justify-center w-full\">\n          <span className=\"text-zinc-400 text-lg font-semibold mb-4\">\n            Loading sessions...\n          </span>\n          <div className=\"w-8 h-8 border-2 border-[#d8cc97] border-t-transparent rounded-full animate-spin\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen p-4 bg-[#161616] flex items-center justify-center\">\n        <div className=\"bg-red-900/20 border border-red-500 rounded p-4 text-red-300\">\n          {error}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header - exact replica with coach info */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            Coach\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            coach@example.com\n          </span>\n          <span className=\"text-xs text-white leading-tight\">Coach</span>\n        </div>\n      </header>\n      {/* Sidebar */}\n      <Sidebar\n        user={{\n          name: 'Coach',\n          email: 'coach@example.com',\n          role: 'Coach',\n        }}\n      />\n      {/* Main Content */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT PANE: Session List */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            Sessions\n          </h2>\n\n          {/* Search Input */}\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n\n          {/* Team Filter */}\n          <div className=\"relative mb-6\">\n            <Filter className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <button\n              onClick={() => setIsTeamDropdownOpen(!isTeamDropdownOpen)}\n              className=\"w-full pl-10 pr-4 py-3 text-left bg-zinc-800 border border-zinc-700 rounded text-sm text-white focus:outline-none focus:border-[#d8cc97] flex items-center justify-between\"\n            >\n              <span>{teamFilter === 'all' ? 'All Teams' : teamFilter}</span>\n              {isTeamDropdownOpen ? (\n                <ChevronUp size={16} />\n              ) : (\n                <ChevronDown size={16} />\n              )}\n            </button>\n            {isTeamDropdownOpen && (\n              <div className=\"absolute z-10 mt-1 w-full bg-zinc-800 border border-zinc-700 rounded shadow-lg overflow-hidden\">\n                <button\n                  onClick={() => {\n                    setTeamFilter('all');\n                    setIsTeamDropdownOpen(false);\n                  }}\n                  className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white\"\n                >\n                  All Teams\n                </button>\n                {teams.map(team => (\n                  <button\n                    key={team.id}\n                    onClick={() => {\n                      setTeamFilter(team.name);\n                      setIsTeamDropdownOpen(false);\n                    }}\n                    className=\"w-full text-left px-4 py-2 text-sm hover:bg-zinc-700 text-white\"\n                  >\n                    {team.name}\n                  </button>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Session List */}\n          <div className=\"space-y-3 max-h-[calc(100vh-400px)] overflow-y-auto\">\n            {filteredSessionsList.length === 0 ? (\n              <div className=\"text-sm text-gray-500 text-center py-4\">\n                No sessions found\n              </div>\n            ) : (\n              filteredSessionsList.map(session => (\n                <div\n                  key={session.id}\n                  onClick={() => handleSessionSelect(session.id)}\n                  className={`p-4 rounded cursor-pointer transition-all ${\n                    selectedSessionId === session.id\n                      ? 'bg-[#d8cc97] text-black font-semibold'\n                      : 'bg-zinc-800 hover:bg-zinc-700'\n                  }`}\n                >\n                  <p className=\"font-medium\">{session.title}</p>\n                  <p className=\"text-xs text-gray-400\">\n                    {session.date} • {session.time} • {session.team}\n                  </p>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        {/* CENTER PANE: Session Details */}\n        <div\n          className=\"w-1/2 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            {selectedSessionId\n              ? `${sessions.find(s => s.id === selectedSessionId)?.title}`\n              : 'All Sessions'}\n          </h2>\n\n          {selectedSession ? (\n            <div className=\"space-y-6\">\n              {/* Session Details Card */}\n              <div\n                className=\"bg-zinc-800 p-6 rounded\"\n                style={{ background: '#181818' }}\n              >\n                <div className=\"flex justify-between items-start mb-4\">\n                  <div>\n                    <h3 className=\"text-lg font-bold text-[#d8cc97]\">\n                      {selectedSession.title}\n                    </h3>\n                    <p className=\"text-sm text-zinc-400\">\n                      {selectedSession.type}\n                    </p>\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <button\n                      className=\"text-xs text-[#d8cc97] font-semibold hover:underline bg-transparent\"\n                      style={{ background: 'transparent' }}\n                    >\n                      Edit\n                    </button>\n                    <button\n                      className=\"text-xs text-red-400 font-semibold hover:underline bg-transparent\"\n                      style={{ background: 'transparent' }}\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4 text-sm mb-4\">\n                  <div>\n                    <p className=\"text-zinc-400\">Date & Time</p>\n                    <p className=\"text-white\">\n                      {selectedSession.date} at {selectedSession.time}\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Team</p>\n                    <p className=\"text-white\">{selectedSession.team}</p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Duration</p>\n                    <p className=\"text-white\">\n                      {selectedSession.duration} minutes\n                    </p>\n                  </div>\n                  <div>\n                    <p className=\"text-zinc-400\">Location</p>\n                    <p className=\"text-white\">{selectedSession.location}</p>\n                  </div>\n                </div>\n                <div>\n                  <p className=\"text-zinc-400 text-sm\">Description</p>\n                  <p className=\"text-white text-sm\">\n                    {selectedSession.description}\n                  </p>\n                </div>\n              </div>\n\n              {/* Attendance */}\n              <div\n                className=\"bg-zinc-800 p-6 rounded\"\n                style={{ background: '#181818' }}\n              >\n                <h4 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n                  Attendance ({selectedSession.attendance}/\n                  {selectedSession.maxAttendance})\n                </h4>\n                <div className=\"space-y-2\">\n                  {players\n                    .filter(p => p.team === selectedSession.team)\n                    .slice(0, 5)\n                    .map(player => (\n                      <div\n                        key={player.id}\n                        className=\"flex justify-between items-center p-2 bg-zinc-700 rounded\"\n                      >\n                        <span className=\"text-sm text-white\">\n                          {player.name}\n                        </span>\n                        <span className=\"text-xs text-green-400\">Present</span>\n                      </div>\n                    ))}\n                </div>\n              </div>\n            </div>\n          ) : (\n            <div className=\"text-sm text-gray-500 text-center py-8\">\n              Select a session to view details.\n            </div>\n          )}\n        </div>\n\n        {/* RIGHT PANE: Session Planning */}\n        <div\n          className=\"w-1/4 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            Planning\n          </h2>\n\n          {/* Quick Session Creation */}\n          <div className=\"bg-zinc-800 p-6 rounded mb-6\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Quick Actions\n            </h3>\n            <div className=\"space-y-3\">\n              <button className=\"w-full p-3 bg-[#d8cc97] text-black rounded text-sm font-semibold hover:bg-[#b3a14e] transition-colors\">\n                Create New Session\n              </button>\n              <button className=\"w-full p-3 bg-zinc-700 text-white rounded text-sm font-semibold hover:bg-zinc-600 transition-colors\">\n                Schedule Practice\n              </button>\n              <button className=\"w-full p-3 bg-zinc-700 text-white rounded text-sm font-semibold hover:bg-zinc-600 transition-colors\">\n                Plan Game Review\n              </button>\n            </div>\n          </div>\n\n          {/* Session Templates */}\n          <div className=\"bg-zinc-800 p-6 rounded mb-6\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Session Templates\n            </h3>\n            <div className=\"space-y-3\">\n              <div className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\">\n                <p className=\"text-sm font-semibold text-white\">\n                  Shooting Practice\n                </p>\n                <p className=\"text-xs text-zinc-400\">90 min • Focus on form</p>\n              </div>\n              <div className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\">\n                <p className=\"text-sm font-semibold text-white\">\n                  Defensive Drills\n                </p>\n                <p className=\"text-xs text-zinc-400\">60 min • Footwork focus</p>\n              </div>\n              <div className=\"p-3 bg-zinc-700 rounded cursor-pointer hover:bg-zinc-600 transition-colors\">\n                <p className=\"text-sm font-semibold text-white\">\n                  Team Scrimmage\n                </p>\n                <p className=\"text-xs text-zinc-400\">\n                  120 min • Game simulation\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Upcoming Sessions */}\n          <div className=\"bg-zinc-800 p-6 rounded\">\n            <h3 className=\"text-base font-bold text-[#d8cc97] mb-4\">\n              Upcoming\n            </h3>\n            <div className=\"space-y-3\">\n              {sessions.slice(0, 3).map(session => (\n                <div key={session.id} className=\"p-3 bg-zinc-700 rounded\">\n                  <p className=\"text-sm font-semibold text-white\">\n                    {session.title}\n                  </p>\n                  <p className=\"text-xs text-zinc-400\">\n                    {session.date} • {session.time}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/teams/page.tsx","messages":[{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎··Shield,⏎··Users,⏎··Loader2,⏎··Search,⏎` with `·Shield,·Users,·Loader2,·Search·`","line":4,"column":9,"nodeType":null,"messageId":"replace","endLine":9,"endColumn":1,"fix":{"range":[75,116],"text":" Shield, Users, Loader2, Search "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":50,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1390,1393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1390,1393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showAddTeamModal' is assigned a value but never used.","line":56,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":75,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":75,"endColumn":24,"suggestions":[{"fix":{"range":[2058,2115],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":80,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":80,"endColumn":24,"suggestions":[{"fix":{"range":[2234,2274],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":26,"suggestions":[{"fix":{"range":[2959,3018],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":113,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":113,"endColumn":26,"suggestions":[{"fix":{"range":[3621,3689],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":142,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":142,"endColumn":22,"suggestions":[{"fix":{"range":[4661,4706],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":22,"suggestions":[{"fix":{"range":[5312,5375],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":186,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":186,"endColumn":20,"suggestions":[{"fix":{"range":[6134,6187],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":407,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":407,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14932,14935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14932,14935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":1,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport {\n  Shield,\n  Users,\n  Loader2,\n  Search,\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { Sidebar } from '@/components/ui/Sidebar';\nimport UniversalButton from '@/components/ui/UniversalButton';\nimport { UserResponseSchema } from '@/lib/utils';\nimport { z } from 'zod';\n\n// Zod schemas for validation\nconst TeamSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  coachName: z.string().optional(),\n  createdAt: z.string(),\n});\nconst TeamsArraySchema = z.array(TeamSchema);\n\nconst PlayerSchema = z.object({\n  id: z.string(),\n  displayName: z.string(),\n  teamId: z.string(),\n  personType: z.string().optional(),\n  position: z.string().optional(),\n});\nconst PlayersArraySchema = z.array(PlayerSchema);\n\ninterface Team {\n  id: string;\n  name: string;\n  coachName?: string | undefined;\n  createdAt: string;\n}\n\ninterface Player {\n  id: string;\n  displayName: string;\n  teamId: string;\n  personType?: string;\n  position?: string;\n}\n\nexport default function TeamsPage() {\n  const router = useRouter();\n  const [isLoading, setIsLoading] = useState(true);\n  const [teams, setTeams] = useState<Team[]>([]);\n  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);\n  const [teamPlayers, setTeamPlayers] = useState<Player[]>([]);\n  const [currentUser, setCurrentUser] = useState<any>(null);\n  const [showAddTeamModal, setShowAddTeamModal] = useState(false);\n\n  // Search and filter state\n  const [searchTerm, setSearchTerm] = useState('');\n\n  // Fetch current user and their teams\n  useEffect(() => {\n    const fetchUserAndTeams = async () => {\n      try {\n        setIsLoading(true);\n\n        // Fetch current user with validation\n        const response = await fetch('/api/user');\n        if (!response.ok) throw new Error('Failed to fetch user');\n        const userData = await response.json();\n\n        // Validate user data\n        const validatedUser = UserResponseSchema.safeParse(userData);\n        if (!validatedUser.success) {\n          console.error('Invalid user data:', validatedUser.error);\n          throw new Error('Invalid user data received');\n        }\n\n        if (!validatedUser.data.user) {\n          console.error('No user data available');\n          throw new Error('No user data available');\n        }\n\n        setCurrentUser(validatedUser.data.user);\n\n        // Fetch teams - either all teams for superadmin or only teams user is part of\n        let teamsData: Team[] = [];\n\n        if (validatedUser.data.user.isSuperadmin) {\n          // Superadmin sees all teams\n          const teamsResponse = await fetch('/api/teams');\n          if (!teamsResponse.ok) throw new Error('Failed to fetch teams');\n          const rawTeamsData = await teamsResponse.json();\n\n          // Validate teams data\n          const validatedTeams = TeamsArraySchema.safeParse(rawTeamsData);\n          if (!validatedTeams.success) {\n            console.error('Invalid teams data:', validatedTeams.error);\n            throw new Error('Invalid teams data received');\n          }\n          teamsData = validatedTeams.data;\n        } else {\n          // Regular user only sees their teams\n          const userTeamsResponse = await fetch(`/api/user/teams`);\n          if (!userTeamsResponse.ok)\n            throw new Error('Failed to fetch user teams');\n          const rawUserTeamsData = await userTeamsResponse.json();\n\n          // Validate user teams data\n          const validatedUserTeams =\n            TeamsArraySchema.safeParse(rawUserTeamsData);\n          if (!validatedUserTeams.success) {\n            console.error('Invalid user teams data:', validatedUserTeams.error);\n            throw new Error('Invalid user teams data received');\n          }\n          teamsData = validatedUserTeams.data;\n        }\n\n        // Filter out any invalid teams and deduplicate by id\n        const validTeams = teamsData.filter(\n          (team): team is Team =>\n            team &&\n            typeof team === 'object' &&\n            typeof team.id === 'string' &&\n            typeof team.name === 'string' &&\n            team.id.trim() !== '' &&\n            team.name.trim() !== ''\n        );\n\n        const uniqueTeams = Array.from(\n          new Map(validTeams.map(team => [team.id, team])).values()\n        );\n        uniqueTeams.sort((a, b) => a.name.localeCompare(b.name));\n        setTeams(uniqueTeams);\n\n        // Select the first team by default if available\n        if (uniqueTeams.length > 0 && uniqueTeams[0]) {\n          setSelectedTeam(uniqueTeams[0]);\n          fetchTeamPlayers(uniqueTeams[0].id);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setTeams([]);\n        setCurrentUser(null);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchUserAndTeams();\n  }, []);\n\n  // Fetch team players with validation\n  const fetchTeamPlayers = async (teamId: string) => {\n    try {\n      const response = await fetch(`/api/teams/${teamId}/players`);\n      if (!response.ok) throw new Error('Failed to fetch team players');\n      const rawPlayersData = await response.json();\n\n      // Validate players data\n      const validatedPlayers = PlayersArraySchema.safeParse(rawPlayersData);\n      if (!validatedPlayers.success) {\n        console.error('Invalid players data:', validatedPlayers.error);\n        throw new Error('Invalid players data received');\n      }\n\n      // Filter out any invalid players\n      const validPlayers = validatedPlayers.data.filter(\n        (player): player is Player =>\n          player &&\n          typeof player === 'object' &&\n          typeof player.id === 'string' &&\n          typeof player.displayName === 'string' &&\n          typeof player.teamId === 'string' &&\n          player.id.trim() !== '' &&\n          player.displayName.trim() !== '' &&\n          player.teamId.trim() !== ''\n      );\n\n      // Deduplicate players by id\n      const uniquePlayers = Array.from(\n        new Map(validPlayers.map(player => [player.id, player])).values()\n      );\n      setTeamPlayers(uniquePlayers);\n    } catch (error) {\n      console.error('Error fetching team players:', error);\n      setTeamPlayers([]);\n    }\n  };\n\n  // Handler for selecting a team\n  const handleTeamSelect = (team: Team) => {\n    setSelectedTeam(team);\n    fetchTeamPlayers(team.id);\n  };\n\n  // Handler for adding a new team\n  const handleAddTeam = () => {\n    setShowAddTeamModal(true);\n  };\n\n  // Filter teams based on search\n  const filteredTeams = teams.filter(team => {\n    return team.name.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  // Check if there are any teams\n  const hasTeams = filteredTeams.length > 0;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex min-h-screen h-full bg-black text-white\">\n        <Sidebar\n          user={{ name: 'Coach', email: 'coach@example.com', role: 'Coach' }}\n        />\n        <div className=\"flex-1 flex flex-col min-h-screen\">\n          <header\n            className=\"w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n            style={{ boxShadow: 'none' }}\n          >\n            <span\n              className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n              style={{ letterSpacing: '0.04em' }}\n            >\n              MP Player Development\n            </span>\n            <div className=\"flex flex-col items-end\">\n              <span className=\"text-base font-semibold text-white leading-tight\">\n                Coach\n              </span>\n              <span className=\"text-xs text-[#d8cc97] leading-tight\">\n                coach@example.com\n              </span>\n              <span className=\"text-xs text-white leading-tight\">Coach</span>\n            </div>\n          </header>\n          <div className=\"flex-1 flex items-center justify-center\">\n            <div className=\"flex flex-col items-center\">\n              <Loader2 className=\"h-8 w-8 text-gold-500 animate-spin mb-4\" />\n              <p className=\"text-zinc-400\">Loading teams...</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            {currentUser?.displayName || 'Coach'}\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            {currentUser?.email || 'coach@example.com'}\n          </span>\n          <span className=\"text-xs text-white leading-tight\">\n            {currentUser?.role || 'Coach'}\n          </span>\n        </div>\n      </header>\n      <Sidebar\n        user={\n          currentUser\n            ? {\n                name: currentUser.displayName || currentUser.name || 'Coach',\n                email: currentUser.email || 'coach@example.com',\n                role: currentUser.role || 'Coach',\n              }\n            : {\n                name: 'Coach',\n                email: 'coach@example.com',\n                role: 'Coach',\n              }\n        }\n      />\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* LEFT COLUMN: Team Selector */}\n        <div\n          className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">Teams</h2>\n          <div className=\"flex justify-between items-center mb-6\">\n            <UniversalButton.Primary\n              size=\"sm\"\n              onClick={handleAddTeam}\n              leftIcon={<Users size={16} />}\n            >\n              Add Team\n            </UniversalButton.Primary>\n          </div>\n          <div className=\"relative mb-6\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-zinc-400 w-4 h-4\" />\n            <input\n              type=\"text\"\n              placeholder=\"Search teams...\"\n              value={searchTerm}\n              onChange={e => setSearchTerm(e.target.value)}\n              className=\"w-full pl-10 pr-4 py-3 rounded bg-zinc-800 text-sm placeholder-gray-400 border border-zinc-700 focus:outline-none focus:border-[#d8cc97]\"\n            />\n          </div>\n          <div className=\"flex-1 overflow-y-auto space-y-2\">\n            {!hasTeams ? (\n              <div className=\"text-center py-8\">\n                <Shield className=\"text-zinc-700 w-12 h-12 mx-auto mb-4\" />\n                <p className=\"text-zinc-400 text-sm\">No teams found</p>\n                <p className=\"text-xs text-zinc-500 mt-1\">\n                  Add your first team to get started\n                </p>\n              </div>\n            ) : (\n              filteredTeams.map(team => (\n                <div\n                  key={team.id}\n                  onClick={() => handleTeamSelect(team)}\n                  className={`p-3 rounded-lg cursor-pointer transition-all flex items-center justify-between border ${selectedTeam?.id === team.id ? 'bg-[#d8cc97]/20 border-[#d8cc97]' : 'bg-zinc-800/50 border-zinc-700 hover:bg-zinc-800 hover:border-zinc-600'}`}\n                >\n                  <div>\n                    <p className=\"font-medium text-white\">{team.name}</p>\n                    <p className=\"text-sm text-zinc-400\">\n                      {team.coachName ||\n                        currentUser?.displayName ||\n                        'Not assigned'}\n                    </p>\n                  </div>\n                  <div className=\"w-2 h-2 rounded-full bg-green-500\" />\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n        {/* CENTER COLUMN: Team Profile + Roster */}\n        <div\n          className=\"w-1/2 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">\n            {selectedTeam ? selectedTeam.name : 'Team Profile'}\n          </h2>\n          <div className=\"bg-neutral-900 border border-neutral-700 rounded-xl p-4 space-y-2 shadow-md mb-8\">\n            {selectedTeam ? (\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <p className=\"text-sm text-zinc-400\">Name</p>\n                  <p className=\"text-white\">{selectedTeam.name}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-zinc-400\">Coach</p>\n                  <p className=\"text-white\">\n                    {selectedTeam.coachName ||\n                      currentUser?.displayName ||\n                      'Not assigned'}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-zinc-400\">Players</p>\n                  <p className=\"text-white\">{teamPlayers.length} players</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-zinc-400\">Created</p>\n                  <p className=\"text-white\">\n                    {new Date(selectedTeam.createdAt).toLocaleDateString(\n                      'en-US',\n                      { month: 'long', day: 'numeric', year: 'numeric' }\n                    )}\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center justify-center h-full py-12\">\n                <Shield className=\"text-zinc-700 w-20 h-20 mb-5\" />\n                <h3 className=\"text-lg font-medium text-white mb-2\">\n                  Select a Team to View Details\n                </h3>\n                <p className=\"text-sm text-zinc-400 max-w-md mb-6 text-center\">\n                  Select a team from the list to view their profile and roster.\n                </p>\n              </div>\n            )}\n          </div>\n          <h2 className=\"text-xl font-bold mb-6 text-[#d8cc97] mt-0\">Roster</h2>\n          <div className=\"bg-neutral-900 border border-neutral-700 rounded-xl p-4 space-y-2 shadow-md\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <UniversalButton.Primary size=\"sm\">\n                Add Player to Team\n              </UniversalButton.Primary>\n            </div>\n            <div className=\"grid grid-cols-2 gap-4\">\n              {teamPlayers\n                .map((p: any) => ({\n                  id: p.id,\n                  name: p.displayName || p.name || 'Unknown Player',\n                  status: p.status || 'active',\n                }))\n                .sort((a, b) => a.name.localeCompare(b.name))\n                .map(player => (\n                  <button\n                    key={player.id}\n                    className={`w-full text-sm font-medium py-2 px-3 border rounded-md bg-neutral-800 hover:bg-neutral-700 transition-all whitespace-nowrap overflow-hidden text-ellipsis\n                      ${player.status === 'active' ? 'border-yellow-500 text-yellow-200' : player.status === 'archived' ? 'border-red-500 text-red-400' : 'border-neutral-700 text-white'}`}\n                    title={player.name}\n                  >\n                    {player.name}\n                  </button>\n                ))}\n            </div>\n          </div>\n        </div>\n        {/* RIGHT COLUMN: (Optional future content) */}\n        <div\n          className=\"w-1/4 p-6 bg-black flex flex-col justify-start min-h-screen\"\n          style={{ background: 'black' }}\n        >\n          {/* You can add insights, activity, or leave empty for now */}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(dashboard)/terminal.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'terminalSteps.length'. Either include it or remove the dependency array.","line":26,"column":6,"nodeType":"ArrayExpression","endLine":26,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: [terminalStep, terminalSteps.length]","fix":{"range":[638,652],"text":"[terminalStep, terminalSteps.length]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Copy, Check } from 'lucide-react';\n\nexport function Terminal() {\n  const [terminalStep, setTerminalStep] = useState(0);\n  const [copied, setCopied] = useState(false);\n  const terminalSteps = [\n    'git clone https://github.com/nextjs/saas-starter',\n    'pnpm install',\n    'pnpm db:setup',\n    'pnpm db:migrate',\n    'pnpm db:seed',\n    'pnpm dev 🎉',\n  ];\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTerminalStep(prev =>\n        prev < terminalSteps.length - 1 ? prev + 1 : prev\n      );\n    }, 500);\n\n    return () => clearTimeout(timer);\n  }, [terminalStep]);\n\n  const copyToClipboard = () => {\n    navigator.clipboard.writeText(terminalSteps.join('\\n'));\n    setCopied(true);\n    setTimeout(() => setCopied(false), 2000);\n  };\n\n  return (\n    <div className=\"w-full rounded-lg shadow-lg overflow-hidden bg-gray-900 text-white font-mono text-sm relative\">\n      <div className=\"p-4\">\n        <div className=\"flex justify-between items-center mb-4\">\n          <div className=\"flex space-x-2\">\n            <div className=\"w-3 h-3 rounded-full bg-red-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-yellow-500\"></div>\n            <div className=\"w-3 h-3 rounded-full bg-green-500\"></div>\n          </div>\n          <button\n            onClick={copyToClipboard}\n            className=\"text-gray-400 hover:text-white transition-colors\"\n            aria-label=\"Copy to clipboard\"\n          >\n            {copied ? (\n              <Check className=\"h-5 w-5\" />\n            ) : (\n              <Copy className=\"h-5 w-5\" />\n            )}\n          </button>\n        </div>\n        <div className=\"space-y-2\">\n          {terminalSteps.map((step, index) => (\n            <div\n              key={index}\n              className={`${index > terminalStep ? 'opacity-0' : 'opacity-100'} transition-opacity duration-300`}\n            >\n              <span className=\"text-green-400\">$</span> {step}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(login)/actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sql' is defined but never used.","line":4,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priceId' is assigned a value but never used.","line":118,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'inviteId' is assigned a value but never used.","line":134,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priceId' is assigned a value but never used.","line":191,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":217,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formData' is defined but never used.","line":217,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":217,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":217,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'userWithTeam' is assigned a value but never used.","line":342,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":342,"endColumn":23}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server';\n\nimport { z } from 'zod';\nimport { and, eq, sql, isNotNull } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport {\n  mpCorePerson,\n  mpCorePersonGroup,\n  infrastructureInvitations,\n  infrastructureActivityLogs,\n} from '@/lib/db/schema';\nimport { setSession } from '@/lib/auth/session';\nimport { redirect } from 'next/navigation';\nimport { cookies } from 'next/headers';\n// import { createCheckoutSession } from '@/lib/payments/stripe';\nimport { getUser, getUserWithTeam } from '@/lib/db/queries';\nimport {\n  validatedAction,\n  validatedActionWithUser,\n} from '@/lib/auth/middleware';\n\n// Define ActivityType enum since it's not in the schema\nexport enum ActivityType {\n  SIGN_IN = 'SIGN_IN',\n  SIGN_UP = 'SIGN_UP',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\n  CREATE_TEAM = 'CREATE_TEAM',\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\n}\n\n// Define types for the activity log\ntype NewActivityLog = {\n  organizationId: string | null;\n  personId: string;\n  action: ActivityType;\n  ipAddress: string;\n};\n\ntype NewPerson = {\n  email: string;\n  firstName: string;\n  displayName: string;\n  authUid: string;\n  organizationId: string | null;\n};\n\nasync function logActivity(\n  organizationId: string | null | undefined,\n  personId: string,\n  type: ActivityType,\n  ipAddress?: string\n) {\n  if (organizationId === null || organizationId === undefined || !db) {\n    return;\n  }\n  const newActivity: NewActivityLog = {\n    organizationId,\n    personId,\n    action: type,\n    ipAddress: ipAddress || '',\n  };\n  await db.insert(infrastructureActivityLogs).values(newActivity);\n}\n\nconst signInSchema = z.object({\n  email: z.string().email().min(3).max(255),\n  // Password validation is now handled by Supabase on the client\n});\n\nexport const signIn = validatedAction(signInSchema, async (data, formData) => {\n  // With Supabase Auth, we assume the user is already authenticated\n  // on the client side. We just need to find their profile in our DB\n  // and set our own application session.\n  const { email } = data;\n\n  if (!db) {\n    return {\n      error: 'Database connection not available.',\n      email,\n    };\n  }\n\n  const userWithTeam = await db\n    .select({\n      user: mpCorePerson,\n    })\n    .from(mpCorePerson)\n    .where(eq(mpCorePerson.email, email))\n    .limit(1);\n\n  if (userWithTeam.length === 0) {\n    return {\n      error: 'Could not find your profile. Please sign up.',\n      email,\n    };\n  }\n\n  const foundUser = userWithTeam[0]?.user;\n  if (!foundUser) {\n    return {\n      error: 'Could not find your profile. Please sign up.',\n      email,\n    };\n  }\n\n  await Promise.all([\n    setSession(foundUser),\n    logActivity(foundUser.organizationId, foundUser.id, ActivityType.SIGN_IN),\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    // return createCheckoutSession({ user: foundUser, priceId });\n    redirect('/dashboard');\n  }\n\n  redirect('/dashboard');\n});\n\nconst signUpSchema = z.object({\n  email: z.string().email(),\n  displayName: z.string().optional(),\n  authUid: z.string(), // Supabase Auth UID\n  inviteId: z.string().optional(),\n});\n\nexport const signUp = validatedAction(signUpSchema, async (data, formData) => {\n  const { email, displayName, authUid, inviteId } = data;\n\n  if (!db) {\n    return {\n      error: 'Database connection not available.',\n      email,\n    };\n  }\n\n  const existingUser = await db\n    .select()\n    .from(mpCorePerson)\n    .where(eq(mpCorePerson.email, email))\n    .limit(1);\n\n  if (existingUser.length > 0) {\n    // This case might happen in race conditions or if user signs up\n    // with provider (e.g., Google) and then with email/pass.\n    // For now, we'll treat it as an error to keep it simple.\n    return {\n      error: 'A user with this email already exists.',\n      email,\n    };\n  }\n\n  const newPerson: NewPerson = {\n    email,\n    firstName: displayName || email,\n    displayName: displayName || email,\n    authUid,\n    organizationId: null, // We'll handle this later if needed\n  };\n\n  const [createdPerson] = await db\n    .insert(mpCorePerson)\n    .values(newPerson)\n    .returning();\n\n  if (!createdPerson) {\n    return {\n      error: 'Failed to create your profile. Please try again.',\n      email,\n    };\n  }\n\n  // Simplified signup - just create the person\n  await Promise.all([\n    logActivity(\n      createdPerson.organizationId,\n      createdPerson.id,\n      ActivityType.SIGN_UP\n    ),\n    setSession(createdPerson),\n  ]);\n\n  const redirectTo = formData.get('redirect') as string | null;\n  if (redirectTo === 'checkout') {\n    const priceId = formData.get('priceId') as string;\n    // return createCheckoutSession({ user: createdPerson, priceId });\n    redirect('/dashboard');\n  }\n\n  redirect('/dashboard');\n});\n\nexport async function signOut() {\n  const user = await getUser();\n  if (!user) return;\n  await logActivity(user.organizationId, user.id, ActivityType.SIGN_OUT);\n  (await cookies()).delete('session');\n  redirect('/sign-in');\n}\n\nconst updatePasswordSchema = z.object({\n  // This entire action is now deprecated, as password management is\n  // handled by Supabase Auth. It should be removed from the UI.\n  currentPassword: z.string(),\n  newPassword: z.string(),\n  confirmPassword: z.string(),\n});\n\nexport const updatePassword = validatedActionWithUser(\n  updatePasswordSchema,\n  async (data, formData, user) => {\n    // This function is deprecated and should not be used.\n    // It is left here to avoid breaking the app if it's still called from somewhere.\n    return {\n      error: 'Password updates are handled by the authentication provider.',\n    };\n  }\n);\nconst removeUserSchema = z.object({\n  userId: z.string(), // Now a string (UUID)\n});\n\nexport const removeUser = validatedActionWithUser(\n  removeUserSchema,\n  async (data, formData, user) => {\n    const { userId } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n    if (!userWithTeam?.team) {\n      return { error: 'Team not found.' };\n    }\n\n    if (!db) {\n      return { error: 'Database connection not available.' };\n    }\n\n    const membership = await db.query.mpCorePersonGroup.findFirst({\n      where: and(\n        isNotNull(mpCorePersonGroup.groupId),\n        eq(mpCorePersonGroup.groupId, userWithTeam.team.id),\n        eq(mpCorePersonGroup.personId, user.id)\n      ),\n    });\n\n    if (membership?.role !== 'owner') {\n      return { error: 'Only owners can remove members.' };\n    }\n\n    await db\n      .delete(mpCorePersonGroup)\n      .where(\n        and(\n          eq(mpCorePersonGroup.personId, userId),\n          eq(mpCorePersonGroup.groupId, userWithTeam.team.id)\n        )\n      );\n\n    // Note: team.organizationId doesn't exist in the current schema\n    // We'll use the user's organizationId instead\n    if (user.organizationId) {\n      await logActivity(\n        user.organizationId,\n        user.id,\n        ActivityType.REMOVE_TEAM_MEMBER\n      );\n    }\n\n    return { success: true, message: 'User removed.' };\n  }\n);\n\nconst inviteUserSchema = z.object({\n  email: z.string().email(),\n  role: z.enum(['owner', 'member']),\n});\n\nexport const inviteUser = validatedActionWithUser(\n  inviteUserSchema,\n  async (data, formData, user) => {\n    const { email, role } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n    const team = userWithTeam?.team;\n    if (!team) {\n      return { error: 'Team not found.' };\n    }\n\n    if (!db) {\n      return { error: 'Database connection not available.' };\n    }\n\n    if (!team.id || !user.id) {\n      return { error: 'Invalid team or user ID.' };\n    }\n    // Check for existing pending invitation\n    const existingInvitation =\n      await db.query.infrastructureInvitations.findFirst({\n        where: and(\n          eq(infrastructureInvitations.teamId, team.id),\n          eq(infrastructureInvitations.email, email),\n          eq(infrastructureInvitations.status, 'pending')\n        ),\n      });\n\n    if (existingInvitation) {\n      return { error: 'An invitation has already been sent to this email.' };\n    }\n\n    await db.insert(infrastructureInvitations).values({\n      teamId: team.id,\n      email,\n      role,\n      invitedBy: user.id,\n    });\n\n    // Note: team.organizationId doesn't exist in the current schema\n    // We'll use the user's organizationId instead\n    if (user.organizationId) {\n      await logActivity(\n        user.organizationId,\n        user.id,\n        ActivityType.INVITE_TEAM_MEMBER\n      );\n    }\n    // In a real app, you would also send an email here.\n    return { success: true, message: 'Invitation sent.' };\n  }\n);\n\nconst updateProfileSchema = z.object({\n  displayName: z.string().min(1, 'Name cannot be empty.'),\n});\n\nexport const updateProfile = validatedActionWithUser(\n  updateProfileSchema,\n  async (data, formData, user) => {\n    const { displayName } = data;\n    const userWithTeam = await getUserWithTeam(user.id);\n\n    if (!db) {\n      return { error: 'Database connection not available.' };\n    }\n\n    await db\n      .update(mpCorePerson)\n      .set({ displayName })\n      .where(eq(mpCorePerson.id, user.id));\n\n    // Note: team.organizationId doesn't exist in the current schema\n    // We'll use the user's organizationId instead\n    if (user.organizationId) {\n      await logActivity(\n        user.organizationId,\n        user.id,\n        ActivityType.UPDATE_ACCOUNT\n      );\n    }\n\n    return { success: true, message: 'Profile updated successfully.' };\n  }\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(login)/login.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(login)/sign-in/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/(login)/sign-up/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/auth/signin/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":13,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":13,"endColumn":20,"suggestions":[{"fix":{"range":[433,476],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":20,"suggestions":[{"fix":{"range":[813,866],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":34,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":34,"endColumn":20,"suggestions":[{"fix":{"range":[977,1026],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":43,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":43,"endColumn":20,"suggestions":[{"fix":{"range":[1209,1260],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":20,"suggestions":[{"fix":{"range":[1885,2024],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":89,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":89,"endColumn":20,"suggestions":[{"fix":{"range":[2323,2378],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":18,"suggestions":[{"fix":{"range":[2572,2611],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase/server';\nimport { setSession } from '@/lib/auth/session';\nimport { eq } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson } from '@/lib/db/schema';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password } = await request.json();\n\n    if (!email || !password) {\n      console.error('Missing email or password');\n      return NextResponse.json(\n        { error: 'Email and password are required' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = createClient();\n\n    // Step 1: Authenticate with Supabase\n    const { data, error } = await supabase.auth.signInWithPassword({\n      email,\n      password,\n    });\n\n    if (error) {\n      console.error('Supabase Auth error:', error.message);\n      return NextResponse.json({ error: error.message }, { status: 401 });\n    }\n\n    if (!data.user) {\n      console.error('Supabase Auth: No user returned');\n      return NextResponse.json(\n        { error: 'Authentication failed' },\n        { status: 401 }\n      );\n    }\n\n    // Step 2: Find the user in our database\n    if (!db) {\n      console.error('Database connection not available');\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      );\n    }\n\n    // Try to find by auth_uid first, fallback to email for legacy\n    let userResult = await db\n      .select()\n      .from(mpCorePerson)\n      .where(eq(mpCorePerson.authUid, data.user.id))\n      .limit(1);\n\n    let user = userResult[0];\n\n    if (!user) {\n      // Fallback: try by email (legacy)\n      userResult = await db\n        .select()\n        .from(mpCorePerson)\n        .where(eq(mpCorePerson.email, email))\n        .limit(1);\n      user = userResult[0];\n    }\n\n    if (!user) {\n      console.error(\n        'User not found in mp_core_person for email:',\n        email,\n        'and auth_uid:',\n        data.user.id\n      );\n      return NextResponse.json(\n        {\n          error:\n            'Could not find your profile. Please contact your administrator.',\n        },\n        { status: 404 }\n      );\n    }\n\n    // Step 3: Set session cookie\n    try {\n      await setSession(user);\n    } catch (sessionError) {\n      console.error('Session creation error:', sessionError);\n      return NextResponse.json(\n        { error: 'Failed to create session.' },\n        { status: 500 }\n      );\n    }\n\n    return NextResponse.json({ success: true });\n  } catch (error) {\n    console.error('Sign-in error:', error);\n    return NextResponse.json(\n      { error: 'An unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/auth/signup/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"fix":{"range":[2414,2452],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { createClient } from '@/lib/supabase/server';\nimport { setSession } from '@/lib/auth/session';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson } from '@/lib/db/schema';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { email, password, firstName, lastName, displayName } =\n      await request.json();\n\n    if (!email || !password || !displayName) {\n      return NextResponse.json(\n        { error: 'Email, password, and display name are required' },\n        { status: 400 }\n      );\n    }\n\n    const supabase = createClient();\n\n    // First create the user in Supabase Auth\n    const { data: authData, error: authError } =\n      await supabase.auth.admin.createUser({\n        email,\n        password,\n        email_confirm: true, // Auto-confirm the email\n        user_metadata: {\n          firstName,\n          lastName,\n          displayName,\n        },\n      });\n\n    if (authError) {\n      return NextResponse.json({ error: authError.message }, { status: 400 });\n    }\n\n    if (!authData.user) {\n      return NextResponse.json(\n        { error: 'Failed to create user in authentication system' },\n        { status: 500 }\n      );\n    }\n\n    // Then create the user in our database\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      );\n    }\n\n    const userResult = await db\n      .insert(mpCorePerson)\n      .values({\n        email,\n        firstName: firstName || null,\n        lastName: lastName || null,\n        displayName,\n        personType: 'player', // Default to player\n        authUid: authData.user.id, // Link to Supabase Auth user\n        active: true,\n      })\n      .returning();\n\n    if (userResult.length === 0) {\n      return NextResponse.json(\n        { error: 'Failed to create user in database' },\n        { status: 500 }\n      );\n    }\n\n    const user = userResult[0];\n\n    if (!user) {\n      return NextResponse.json(\n        { error: 'Failed to create user in database' },\n        { status: 500 }\n      );\n    }\n\n    // Create our custom session\n    await setSession(user);\n\n    return NextResponse.json({\n      success: true,\n      user: {\n        id: user.id,\n        email: user.email,\n        displayName: user.displayName,\n        firstName: user.firstName,\n      },\n    });\n  } catch (error) {\n    console.error('Signup error:', error);\n    return NextResponse.json(\n      { error: 'An unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/auth/simple-signin/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":18,"suggestions":[{"fix":{"range":[1344,1390],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { setSession } from '@/lib/auth/session';\nimport { eq } from 'drizzle-orm';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson } from '@/lib/db/schema';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const { displayName } = await request.json();\n\n    if (!displayName) {\n      return NextResponse.json(\n        { error: 'Display name is required' },\n        { status: 400 }\n      );\n    }\n\n    // Find the user in our database by display name\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      );\n    }\n\n    const userResult = await db\n      .select()\n      .from(mpCorePerson)\n      .where(eq(mpCorePerson.displayName, displayName))\n      .limit(1);\n\n    if (userResult.length === 0) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const user = userResult[0];\n\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // Create our custom session\n    await setSession(user);\n\n    return NextResponse.json({\n      success: true,\n      user: {\n        id: user.id,\n        displayName: user.displayName,\n        firstName: user.firstName,\n      },\n    });\n  } catch (error) {\n    console.error('Simple sign-in error:', error);\n    return NextResponse.json(\n      { error: 'An unexpected error occurred' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/dashboard/activities/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":18,"suggestions":[{"fix":{"range":[141,213],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":18,"suggestions":[{"fix":{"range":[2850,2911],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\n\nexport async function GET() {\n  try {\n    const user = await getUser();\n\n    if (!user) {\n      console.log('No user found, returning mock activities for development');\n      // For development, return mock data if no user is found\n      const activities = [\n        {\n          id: '1',\n          type: 'player_added',\n          message: 'New player John Smith added to Varsity Boys',\n          time: '30 minutes ago',\n          user: 'Coach Johnson',\n        },\n        {\n          id: '2',\n          type: 'session_scheduled',\n          message: 'Shooting practice scheduled for tomorrow at 3:00 PM',\n          time: '1 hour ago',\n          user: 'Coach Williams',\n        },\n        {\n          id: '3',\n          type: 'observation_added',\n          message: 'New observation added for Sarah Johnson',\n          time: '2 hours ago',\n          user: 'Coach Davis',\n        },\n        {\n          id: '4',\n          type: 'development_plan_updated',\n          message: 'Development plan updated for Mike Wilson',\n          time: '4 hours ago',\n          user: 'Coach Brown',\n        },\n        {\n          id: '5',\n          type: 'team_created',\n          message: 'New team \"JV Girls\" created',\n          time: '6 hours ago',\n          user: 'Admin',\n        },\n      ];\n      return Response.json(activities);\n    }\n\n    // For now, return mock data since we don't have an activities table yet\n    // In a real implementation, you would query the activities table\n    const activities = [\n      {\n        id: '1',\n        type: 'player_added',\n        message: 'New player John Smith added to Varsity Boys',\n        timestamp: new Date(Date.now() - 1000 * 60 * 30).toISOString(), // 30 minutes ago\n        user: 'Coach Johnson',\n      },\n      {\n        id: '2',\n        type: 'session_scheduled',\n        message: 'Shooting practice scheduled for tomorrow at 3:00 PM',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60).toISOString(), // 1 hour ago\n        user: 'Coach Williams',\n      },\n      {\n        id: '3',\n        type: 'observation_added',\n        message: 'New observation added for Sarah Johnson',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 2).toISOString(), // 2 hours ago\n        user: 'Coach Davis',\n      },\n      {\n        id: '4',\n        type: 'development_plan_updated',\n        message: 'Development plan updated for Mike Wilson',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 4).toISOString(), // 4 hours ago\n        user: 'Coach Brown',\n      },\n      {\n        id: '5',\n        type: 'team_created',\n        message: 'New team \"JV Girls\" created',\n        timestamp: new Date(Date.now() - 1000 * 60 * 60 * 6).toISOString(), // 6 hours ago\n        user: 'Admin',\n      },\n    ];\n\n    return Response.json(activities);\n  } catch (error) {\n    console.error('Error fetching dashboard activities:', error);\n    return Response.json(\n      { error: 'Failed to fetch activities' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/dashboard/players/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":163,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":163,"endColumn":18,"suggestions":[{"fix":{"range":[5297,5355],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpCorePersonGroup, mpCoreGroup } from '@/lib/db/schema';\nimport { eq, and, isNotNull } from 'drizzle-orm';\n\nexport async function GET(req: Request) {\n  try {\n    const { searchParams } = new URL(req.url);\n    const offset = parseInt(searchParams.get('offset') || '0', 10);\n    const limit = Math.min(\n      parseInt(searchParams.get('limit') || '12', 10),\n      100\n    ); // max 100 per page\n\n    const user = await getUser();\n    if (!user) {\n      // For development, return mock data if no user is found\n      const mockPlayers = [\n        {\n          id: '1',\n          name: 'John Smith',\n          team: 'Varsity Boys',\n          position: 'Point Guard',\n          status: 'active',\n          performance: {\n            overall: 85,\n            shooting: 88,\n            defense: 82,\n            ballHandling: 90,\n          },\n        },\n        {\n          id: '2',\n          name: 'Sarah Johnson',\n          team: 'JV Girls',\n          position: 'Shooting Guard',\n          status: 'active',\n          performance: {\n            overall: 78,\n            shooting: 85,\n            defense: 75,\n            ballHandling: 72,\n          },\n        },\n        {\n          id: '3',\n          name: 'Mike Wilson',\n          team: 'Varsity Boys',\n          position: 'Center',\n          status: 'active',\n          performance: {\n            overall: 82,\n            shooting: 75,\n            defense: 88,\n            ballHandling: 70,\n          },\n        },\n        {\n          id: '4',\n          name: 'Emily Davis',\n          team: 'JV Girls',\n          position: 'Power Forward',\n          status: 'active',\n          performance: {\n            overall: 80,\n            shooting: 78,\n            defense: 85,\n            ballHandling: 75,\n          },\n        },\n        // Add more mock players for testing pagination\n        ...Array.from({ length: 40 }, (_, i) => ({\n          id: `${i + 5}`,\n          name: `Mock Player ${i + 5}`,\n          team: i % 2 === 0 ? 'Varsity Boys' : 'JV Girls',\n          position: 'Unknown',\n          status: 'active',\n          performance: {\n            overall: 70 + (i % 30),\n            shooting: 70 + (i % 30),\n            defense: 70 + (i % 30),\n            ballHandling: 70 + (i % 30),\n          },\n        })),\n      ];\n      const total = mockPlayers.length;\n      const paged = mockPlayers.slice(offset, offset + limit);\n      return Response.json({ players: paged, total });\n    }\n\n    if (!db) {\n      return Response.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get all players with their group/team info\n    const players = await db\n      .select({\n        id: mpCorePerson.id,\n        firstName: mpCorePerson.firstName,\n        lastName: mpCorePerson.lastName,\n        email: mpCorePerson.email,\n        teamId: mpCoreGroup.id,\n        teamName: mpCoreGroup.name,\n        position: mpCorePersonGroup.position,\n        role: mpCorePersonGroup.role,\n        personType: mpCorePerson.personType,\n        identifier: mpCorePersonGroup.identifier,\n        cycleName: mpCorePersonGroup.cycleId, // or join to cycle table if needed\n      })\n      .from(mpCorePerson)\n      .innerJoin(\n        mpCorePersonGroup,\n        eq(mpCorePerson.id, mpCorePersonGroup.personId)\n      )\n      .innerJoin(mpCoreGroup, eq(mpCorePersonGroup.groupId, mpCoreGroup.id))\n      .where(\n        and(\n          eq(mpCorePerson.personType, 'player'),\n          isNotNull(mpCorePersonGroup.groupId)\n        )\n      );\n\n    // Transform the data to match the expected format for the dashboard\n    const formattedPlayers = players.map(player => ({\n      id: player.id,\n      name:\n        player.firstName && player.lastName\n          ? `${player.firstName} ${player.lastName}`.trim()\n          : player.firstName || player.lastName || 'Unknown Player',\n      teamId: player.teamId,\n      team: player.teamName || 'Unknown Team',\n      position: player.position || 'Unknown',\n      role: player.role || 'player',\n      personType: player.personType || 'player',\n      email: player.email,\n      identifier: player.identifier,\n      cycleName: player.cycleName,\n      status: 'active', // Since we don't have status in the current schema\n      performance: {\n        overall: Math.floor(Math.random() * 40) + 60, // Mock performance data for now\n        shooting: Math.floor(Math.random() * 40) + 60,\n        defense: Math.floor(Math.random() * 40) + 60,\n        ballHandling: Math.floor(Math.random() * 40) + 60,\n      },\n      createdAt: new Date().toISOString(), // Since we don't have this in the current schema\n      updatedAt: new Date().toISOString(), // Since we don't have this in the current schema\n    }));\n\n    // Remove duplicates based on ID to prevent React key conflicts\n    const uniquePlayers = formattedPlayers.filter(\n      (player, index, self) => index === self.findIndex(p => p.id === player.id)\n    );\n    // Sort players alphabetically by name\n    uniquePlayers.sort((a, b) => a.name.localeCompare(b.name));\n    const total = uniquePlayers.length;\n    const paged = uniquePlayers.slice(offset, offset + limit);\n\n    return Response.json({ players: paged, total });\n  } catch (error) {\n    console.error('Error fetching dashboard players:', error);\n    return Response.json({ error: 'Failed to fetch players' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/dashboard/sessions/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":8,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":8,"endColumn":18,"suggestions":[{"fix":{"range":[141,211],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":102,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":102,"endColumn":18,"suggestions":[{"fix":{"range":[2421,2480],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\n\nexport async function GET() {\n  try {\n    const user = await getUser();\n\n    if (!user) {\n      console.log('No user found, returning mock sessions for development');\n      // For development, return mock data if no user is found\n      const sessions = [\n        {\n          id: '1',\n          title: 'Shooting Practice',\n          date: '2024-01-15',\n          time: '3:00 PM',\n          team: 'Varsity Boys',\n          type: 'Practice',\n        },\n        {\n          id: '2',\n          title: 'Defensive Drills',\n          date: '2024-01-16',\n          time: '4:30 PM',\n          team: 'JV Girls',\n          type: 'Training',\n        },\n        {\n          id: '3',\n          title: 'Game Review',\n          date: '2024-01-17',\n          time: '2:00 PM',\n          team: 'Varsity Boys',\n          type: 'Meeting',\n        },\n        {\n          id: '4',\n          title: 'Conditioning',\n          date: '2024-01-18',\n          time: '5:00 PM',\n          team: 'All Teams',\n          type: 'Workout',\n        },\n        {\n          id: '5',\n          title: 'Skills Assessment',\n          date: '2024-01-19',\n          time: '3:30 PM',\n          team: 'Freshman Boys',\n          type: 'Evaluation',\n        },\n      ];\n      return Response.json(sessions);\n    }\n\n    // For now, return mock data since we don't have a sessions table yet\n    // In a real implementation, you would query the sessions table\n    const sessions = [\n      {\n        id: '1',\n        title: 'Shooting Practice',\n        date: '2024-01-15',\n        time: '3:00 PM',\n        team: 'Varsity Boys',\n        type: 'Practice',\n      },\n      {\n        id: '2',\n        title: 'Defensive Drills',\n        date: '2024-01-16',\n        time: '4:30 PM',\n        team: 'JV Girls',\n        type: 'Training',\n      },\n      {\n        id: '3',\n        title: 'Game Review',\n        date: '2024-01-17',\n        time: '2:00 PM',\n        team: 'Varsity Boys',\n        type: 'Meeting',\n      },\n      {\n        id: '4',\n        title: 'Conditioning',\n        date: '2024-01-18',\n        time: '5:00 PM',\n        team: 'All Teams',\n        type: 'Workout',\n      },\n      {\n        id: '5',\n        title: 'Skills Assessment',\n        date: '2024-01-19',\n        time: '3:30 PM',\n        team: 'Freshman Boys',\n        type: 'Evaluation',\n      },\n    ];\n\n    return Response.json(sessions);\n  } catch (error) {\n    console.error('Error fetching dashboard sessions:', error);\n    return Response.json(\n      { error: 'Failed to fetch sessions' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/dashboard/stats/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":80,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":80,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpCorePersonGroup, mpCoreGroup } from '@/lib/db/schema';\nimport { eq, and, isNotNull } from 'drizzle-orm';\n\nexport async function GET() {\n  try {\n    // console.log('Dashboard stats API called');\n    const user = await getUser();\n    // console.log('User from getUser():', user ? user.email : 'null');\n\n    if (!user) {\n      // console.log('No user found, returning mock data for development');\n      // For development, return mock data if no user is found\n      const mockStats = {\n        totalPlayers: 24,\n        activeTeams: 3,\n        upcomingSessions: 5,\n        totalDrills: 12,\n        changes: {\n          players: '+2',\n          teams: '+1',\n          sessions: '+3',\n          drills: '+4',\n        },\n      };\n      return Response.json(mockStats);\n    }\n\n    if (!db) {\n      return Response.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get players count (players with a group membership)\n    const playersResult = await db\n      .select({ count: mpCorePerson.id })\n      .from(mpCorePerson)\n      .innerJoin(\n        mpCorePersonGroup,\n        eq(mpCorePerson.id, mpCorePersonGroup.personId)\n      )\n      .where(\n        and(\n          eq(mpCorePerson.personType, 'player'),\n          isNotNull(mpCorePersonGroup.groupId)\n        )\n      );\n    const totalPlayers = playersResult.length;\n\n    // Get teams count (unique group IDs from mpCoreGroup)\n    const teamsResult = await db\n      .select({ groupId: mpCoreGroup.id, groupName: mpCoreGroup.name })\n      .from(mpCoreGroup)\n      .innerJoin(\n        mpCorePersonGroup,\n        eq(mpCoreGroup.id, mpCorePersonGroup.groupId)\n      )\n      .where(isNotNull(mpCorePersonGroup.groupId))\n      .groupBy(mpCoreGroup.id, mpCoreGroup.name);\n    const activeTeams = teamsResult.length;\n\n    // For now, return mock data for sessions and drills since we don't have those tables yet\n    const stats = {\n      totalPlayers,\n      activeTeams,\n      upcomingSessions: 5, // Mock data\n      totalDrills: 12, // Mock data\n      changes: {\n        players: '+2',\n        teams: '+1',\n        sessions: '+3',\n        drills: '+4',\n      },\n    };\n\n    return Response.json(stats);\n  } catch (error) {\n    // console.error('Error fetching dashboard stats:', error);\n    return Response.json({ error: 'Failed to fetch stats' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/development-plans/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":16,"suggestions":[{"fix":{"range":[271,331],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":10,"column":1,"nodeType":null,"messageId":"delete","endLine":10,"endColumn":5,"fix":{"range":[332,336],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":12,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":12,"endColumn":16,"suggestions":[{"fix":{"range":[375,465],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'GET·/api/development-plans:·User·fetched:',·user·?·'User·found'·:·'No·user'` with `⏎······'GET·/api/development-plans:·User·fetched:',⏎······user·?·'User·found'·:·'No·user'⏎····`","line":12,"column":17,"nodeType":null,"messageId":"replace","endLine":12,"endColumn":93,"fix":{"range":[387,463],"text":"\n      'GET /api/development-plans: User fetched:',\n      user ? 'User found' : 'No user'\n    "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":15,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":15,"endColumn":20,"suggestions":[{"fix":{"range":[488,556],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":24,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":24,"endColumn":18,"suggestions":[{"fix":{"range":[757,858],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"fix":{"range":[870,943],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":30,"column":1,"nodeType":null,"messageId":"delete","endLine":30,"endColumn":5,"fix":{"range":[944,948],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":37,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":37,"endColumn":18,"suggestions":[{"fix":{"range":[1164,1268],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'GET·/api/development-plans:·Development·plans·table·accessible,·count:',·testQuery.length` with `⏎········'GET·/api/development-plans:·Development·plans·table·accessible,·count:',⏎········testQuery.length⏎······`","line":37,"column":19,"nodeType":null,"messageId":"replace","endLine":37,"endColumn":109,"fix":{"range":[1176,1266],"text":"\n        'GET /api/development-plans: Development plans table accessible, count:',\n        testQuery.length\n      "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":39,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":39,"endColumn":20,"suggestions":[{"fix":{"range":[1302,1400],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'GET·/api/development-plans:·Error·accessing·development·plans·table:',·tableError` with `⏎········'GET·/api/development-plans:·Error·accessing·development·plans·table:',⏎········tableError⏎······`","line":39,"column":21,"nodeType":null,"messageId":"replace","endLine":39,"endColumn":103,"fix":{"range":[1316,1398],"text":"\n        'GET /api/development-plans: Error accessing development plans table:',\n        tableError\n      "}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·error:·'Development·plans·table·not·accessible',·details:·tableError·instanceof·Error·?·tableError.message·:·String(tableError)` with `⏎··········error:·'Development·plans·table·not·accessible',⏎··········details:⏎············tableError·instanceof·Error⏎··············?·tableError.message⏎··············:·String(tableError),⏎·······`","line":41,"column":10,"nodeType":null,"messageId":"replace","endLine":41,"endColumn":138,"fix":{"range":[1442,1570],"text":"\n          error: 'Development plans table not accessible',\n          details:\n            tableError instanceof Error\n              ? tableError.message\n              : String(tableError),\n       "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":46,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":46,"endColumn":16,"suggestions":[{"fix":{"range":[1618,1685],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":47,"column":1,"nodeType":null,"messageId":"delete","endLine":47,"endColumn":5,"fix":{"range":[1686,1690],"text":""}},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `⏎········mpbcPerson,⏎········eq(mpbcDevelopmentPlan.playerId,·mpbcPerson.id)⏎······` with `mpbcPerson,·eq(mpbcDevelopmentPlan.playerId,·mpbcPerson.id)`","line":65,"column":17,"nodeType":null,"messageId":"replace","endLine":68,"endColumn":7,"fix":{"range":[2438,2521],"text":"mpbcPerson, eq(mpbcDevelopmentPlan.playerId, mpbcPerson.id)"}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":70,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":70,"endColumn":16,"suggestions":[{"fix":{"range":[2529,2629],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'GET·/api/development-plans:·Database·query·completed,·results·count:',·results.length` with `⏎······'GET·/api/development-plans:·Database·query·completed,·results·count:',⏎······results.length⏎····`","line":70,"column":17,"nodeType":null,"messageId":"replace","endLine":70,"endColumn":103,"fix":{"range":[2541,2627],"text":"\n      'GET /api/development-plans: Database query completed, results count:',\n      results.length\n    "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":92,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":92,"endColumn":16,"suggestions":[{"fix":{"range":[3373,3467],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'GET·/api/development-plans:·Successfully·returning·plans,·count:',·plans.length` with `⏎······'GET·/api/development-plans:·Successfully·returning·plans,·count:',⏎······plans.length⏎····`","line":92,"column":17,"nodeType":null,"messageId":"replace","endLine":92,"endColumn":97,"fix":{"range":[3385,3465],"text":"\n      'GET /api/development-plans: Successfully returning plans, count:',\n      plans.length\n    "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":18,"suggestions":[{"fix":{"range":[3529,3596],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `·error:·'Failed·to·fetch·development·plans',·details:·error·instanceof·Error·?·error.message·:·String(error)` with `⏎········error:·'Failed·to·fetch·development·plans',⏎········details:·error·instanceof·Error·?·error.message·:·String(error),⏎·····`","line":97,"column":8,"nodeType":null,"messageId":"replace","endLine":97,"endColumn":116,"fix":{"range":[3634,3742],"text":"\n        error: 'Failed to fetch development plans',\n        details: error instanceof Error ? error.message : String(error),\n     "}},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":103,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":35},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":16,"suggestions":[{"fix":{"range":[3841,3902],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Delete `····`","line":106,"column":1,"nodeType":null,"messageId":"delete","endLine":106,"endColumn":5,"fix":{"range":[3903,3907],"text":""}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":16,"suggestions":[{"fix":{"range":[3946,4037],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'POST·/api/development-plans:·User·fetched:',·user·?·'User·found'·:·'No·user'` with `⏎······'POST·/api/development-plans:·User·fetched:',⏎······user·?·'User·found'·:·'No·user'⏎····`","line":108,"column":17,"nodeType":null,"messageId":"replace","endLine":108,"endColumn":94,"fix":{"range":[3958,4035],"text":"\n      'POST /api/development-plans: User fetched:',\n      user ? 'User found' : 'No user'\n    "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":18,"suggestions":[{"fix":{"range":[4062,4135],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":117,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":117,"endColumn":16,"suggestions":[{"fix":{"range":[4352,4434],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Replace `'POST·/api/development-plans:·Successfully·created·development·plan'` with `⏎······'POST·/api/development-plans:·Successfully·created·development·plan'⏎····`","line":117,"column":17,"nodeType":null,"messageId":"replace","endLine":117,"endColumn":85,"fix":{"range":[4364,4432],"text":"\n      'POST /api/development-plans: Successfully created development plan'\n    "}},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":123,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":123,"endColumn":18,"suggestions":[{"fix":{"range":[4589,4814],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"prettier/prettier","severity":2,"message":"Insert `,`","line":126,"column":19,"nodeType":null,"messageId":"insert","endLine":126,"endColumn":19,"fix":{"range":[4806,4806],"text":","}}],"suppressedMessages":[],"errorCount":16,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":15,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpbcDevelopmentPlan, mpbcPerson } from '@/lib/db/schema';\nimport { eq } from 'drizzle-orm';\n\nexport async function GET() {\n  try {\n    console.log('GET /api/development-plans: Starting request');\n    \n    const user = await getUser();\n    console.log('GET /api/development-plans: User fetched:', user ? 'User found' : 'No user');\n\n    if (!db) {\n      console.error('GET /api/development-plans: Database not available');\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // If no user session, still fetch data for development\n    if (!user) {\n      console.log(\n        'No user session found, fetching all development plans for development'\n      );\n    }\n\n    console.log('GET /api/development-plans: Testing database connectivity');\n    \n    // First, test if we can access the development plans table\n    try {\n      const testQuery = await db\n        .select({ id: mpbcDevelopmentPlan.id })\n        .from(mpbcDevelopmentPlan)\n        .limit(1);\n      console.log('GET /api/development-plans: Development plans table accessible, count:', testQuery.length);\n    } catch (tableError) {\n      console.error('GET /api/development-plans: Error accessing development plans table:', tableError);\n      return NextResponse.json(\n        { error: 'Development plans table not accessible', details: tableError instanceof Error ? tableError.message : String(tableError) },\n        { status: 500 }\n      );\n    }\n\n    console.log('GET /api/development-plans: Starting database query');\n    \n    // Fetch development plans and join with player info\n    // Use only columns that exist in the real table\n    const results = await db\n      .select({\n        id: mpbcDevelopmentPlan.id,\n        playerId: mpbcDevelopmentPlan.playerId,\n        initialObservation: mpbcDevelopmentPlan.initialObservation,\n        objective: mpbcDevelopmentPlan.objective,\n        status: mpbcDevelopmentPlan.status,\n        startDate: mpbcDevelopmentPlan.startDate,\n        endDate: mpbcDevelopmentPlan.endDate,\n        createdAt: mpbcDevelopmentPlan.createdAt,\n        updatedAt: mpbcDevelopmentPlan.updatedAt,\n        playerFirstName: mpbcPerson.firstName,\n        playerLastName: mpbcPerson.lastName,\n      })\n      .from(mpbcDevelopmentPlan)\n      .leftJoin(\n        mpbcPerson,\n        eq(mpbcDevelopmentPlan.playerId, mpbcPerson.id)\n      );\n\n    console.log('GET /api/development-plans: Database query completed, results count:', results.length);\n\n    // Map to UI shape\n    const plans = results.map(plan => ({\n      id: plan.id,\n      playerId: plan.playerId,\n      playerName:\n        plan.playerFirstName && plan.playerLastName\n          ? `${plan.playerFirstName} ${plan.playerLastName}`.trim()\n          : plan.playerFirstName || plan.playerLastName || 'Unknown Player',\n      title: plan.initialObservation || '',\n      objective: plan.objective || '',\n      status: plan.status || '',\n      startDate: plan.startDate,\n      endDate: plan.endDate,\n      createdAt: plan.createdAt,\n      updatedAt: plan.updatedAt,\n      tags: [], // TODO: add tags if available\n      goals: [], // TODO: add goals if available\n      readiness: 'medium', // TODO: calculate if available\n    }));\n\n    console.log('GET /api/development-plans: Successfully returning plans, count:', plans.length);\n    return NextResponse.json(plans);\n  } catch (error) {\n    console.error('GET /api/development-plans: Error details:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch development plans', details: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    console.log('POST /api/development-plans: Starting request');\n    \n    const user = await getUser();\n    console.log('POST /api/development-plans: User fetched:', user ? 'User found' : 'No user');\n\n    if (!user) {\n      console.log('POST /api/development-plans: No user found, returning 404');\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    // In a real implementation, you would save the development plan to the database\n    // For now, return a success response\n    console.log('POST /api/development-plans: Successfully created development plan');\n    return NextResponse.json({\n      message: 'Development plan created successfully',\n      id: 'temp-id-' + Date.now(),\n    });\n  } catch (error) {\n    console.error('POST /api/development-plans: Error details:', {\n      message: error instanceof Error ? error.message : 'Unknown error',\n      stack: error instanceof Error ? error.stack : undefined,\n      error: error\n    });\n    return NextResponse.json(\n      { error: 'Failed to create development plan' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/observations/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'and' is defined but never used.","line":5,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isNotNull' is defined but never used.","line":5,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":20,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":20,"endColumn":18,"suggestions":[{"fix":{"range":[544,640],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":18,"suggestions":[{"fix":{"range":[2621,2674],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'body' is assigned a value but never used.","line":93,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":101,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":101,"endColumn":18,"suggestions":[{"fix":{"range":[3290,3342],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpbcObservations } from '@/lib/db/schema';\nimport { eq, and, isNotNull } from 'drizzle-orm';\n\nexport async function GET(req: Request) {\n  try {\n    const user = await getUser();\n\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // If no user session, still fetch data for development\n    if (!user) {\n      console.log(\n        'No user session found, fetching all observations for development'\n      );\n    }\n\n    // Parse pagination params\n    const { searchParams } = new URL(req.url);\n    const offset = parseInt(searchParams.get('offset') || '0', 10);\n    const limit = Math.min(\n      parseInt(searchParams.get('limit') || '20', 10),\n      100\n    ); // max 100 per page\n\n    // Fetch all observations (for total count)\n    const allResults = await db\n      .select({\n        id: mpbcObservations.id,\n      })\n      .from(mpbcObservations)\n      .leftJoin(mpCorePerson, eq(mpbcObservations.playerId, mpCorePerson.id))\n      .where(eq(mpCorePerson.personType, 'player'));\n    const total = allResults.length;\n\n    // Fetch paginated observations\n    const results = await db\n      .select({\n        id: mpbcObservations.id,\n        playerId: mpCorePerson.id,\n        playerFirstName: mpCorePerson.firstName,\n        playerLastName: mpCorePerson.lastName,\n        title: mpbcObservations.context,\n        description: mpbcObservations.observationText,\n        rating: mpbcObservations.performanceRating,\n        date: mpbcObservations.createdAt,\n        tags: mpbcObservations.tags,\n        createdAt: mpbcObservations.createdAt,\n        updatedAt: mpbcObservations.updatedAt,\n      })\n      .from(mpbcObservations)\n      .leftJoin(mpCorePerson, eq(mpbcObservations.playerId, mpCorePerson.id))\n      .where(eq(mpCorePerson.personType, 'player'))\n      .limit(limit)\n      .offset(offset);\n\n    // Map tags and other fields if needed\n    const observations = results.map(obs => ({\n      ...obs,\n      tags: Array.isArray(obs.tags) ? obs.tags : [],\n      rating: typeof obs.rating === 'number' ? obs.rating : 0,\n      playerName:\n        obs.playerFirstName && obs.playerLastName\n          ? `${obs.playerFirstName} ${obs.playerLastName}`.trim()\n          : obs.playerFirstName || obs.playerLastName || 'Unknown Player',\n      title: obs.title || '',\n      description: obs.description || '',\n    }));\n\n    return NextResponse.json({ observations, total });\n  } catch (error) {\n    console.error('Error fetching observations:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch observations' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function POST(request: Request) {\n  try {\n    const user = await getUser();\n    if (!user) {\n      return NextResponse.json({ error: 'User not found' }, { status: 404 });\n    }\n    const body = await request.json();\n    // In a real implementation, you would save the observation to the database\n    // For now, return a success response\n    return NextResponse.json({\n      message: 'Observation created successfully',\n      id: 'temp-id-' + Date.now(),\n    });\n  } catch (error) {\n    console.error('Error creating observation:', error);\n    return NextResponse.json(\n      { error: 'Failed to create observation' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/session/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/stripe/checkout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/stripe/webhook/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'request' is defined but never used.","line":7,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import Stripe from 'stripe';\n// import { handleSubscriptionChange, stripe } from '@/lib/payments/stripe';\nimport { NextRequest, NextResponse } from 'next/server';\n\n// const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET!;\n\nexport async function POST(request: NextRequest) {\n  // Stripe webhook is temporarily disabled\n  return NextResponse.json({ received: true });\n\n  /*\n  const payload = await request.text();\n  const signature = request.headers.get('stripe-signature') as string;\n\n  let event: Stripe.Event;\n\n  try {\n    event = stripe.webhooks.constructEvent(payload, signature, webhookSecret);\n  } catch (err) {\n    console.error('Webhook signature verification failed.', err);\n    return NextResponse.json(\n      { error: 'Webhook signature verification failed.' },\n      { status: 400 }\n    );\n  }\n\n  switch (event.type) {\n    case 'customer.subscription.updated':\n    case 'customer.subscription.deleted':\n      const subscription = event.data.object as Stripe.Subscription;\n      await handleSubscriptionChange(subscription);\n      break;\n    default:\n      console.log(`Unhandled event type ${event.type}`);\n  }\n\n  return NextResponse.json({ received: true });\n  */\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/team/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/teams/[id]/players/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isNotNull' is defined but never used.","line":4,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":28},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"fix":{"range":[2105,2158],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpCorePersonGroup, mpCoreGroup } from '@/lib/db/schema';\nimport { eq, and, isNotNull } from 'drizzle-orm';\n\nexport async function GET(\n  request: Request,\n  { params }: { params: Promise<{ id: string }> }\n) {\n  try {\n    const user = await getUser();\n\n    if (!user) {\n      return Response.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    const { id: teamId } = await params;\n\n    if (!db) {\n      return Response.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get players for the specific team with their group/team info\n    const players = await db\n      .select({\n        id: mpCorePerson.id,\n        firstName: mpCorePerson.firstName,\n        lastName: mpCorePerson.lastName,\n        email: mpCorePerson.email,\n        teamId: mpCoreGroup.id,\n        teamName: mpCoreGroup.name,\n        position: mpCorePersonGroup.position,\n        role: mpCorePersonGroup.role,\n        personType: mpCorePerson.personType,\n        identifier: mpCorePersonGroup.identifier,\n        cycleName: mpCorePersonGroup.cycleId, // or join to cycle table if needed\n      })\n      .from(mpCorePerson)\n      .innerJoin(\n        mpCorePersonGroup,\n        eq(mpCorePerson.id, mpCorePersonGroup.personId)\n      )\n      .innerJoin(mpCoreGroup, eq(mpCorePersonGroup.groupId, mpCoreGroup.id))\n      .where(\n        and(\n          eq(mpCorePersonGroup.groupId, teamId),\n          eq(mpCorePerson.personType, 'player')\n        )\n      );\n\n    // Transform the data to match the expected format\n    const formattedPlayers = players.map(player => ({\n      id: player.id,\n      displayName:\n        player.firstName && player.lastName\n          ? `${player.firstName} ${player.lastName}`.trim()\n          : player.firstName || player.lastName || 'Unknown Player',\n      teamId: player.teamId,\n      personType: player.personType || 'player',\n      position: player.position || 'Unknown',\n    }));\n\n    return Response.json(formattedPlayers);\n  } catch (error) {\n    console.error('Error fetching team players:', error);\n    return Response.json(\n      { error: 'Failed to fetch team players' },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/teams/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":68,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":68,"endColumn":18,"suggestions":[{"fix":{"range":[2181,2227],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpCorePersonGroup, mpCoreGroup } from '@/lib/db/schema';\nimport { and, isNotNull, eq } from 'drizzle-orm';\n\nexport async function GET() {\n  try {\n    const user = await getUser();\n\n    if (!user) {\n      return Response.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    if (!db) {\n      return Response.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get all teams from the normalized schema\n    const teams = await db\n      .select({\n        id: mpCoreGroup.id,\n        name: mpCoreGroup.name,\n        coachFirstName: mpCorePerson.firstName,\n        coachLastName: mpCorePerson.lastName,\n        role: mpCorePersonGroup.role,\n        personType: mpCorePerson.personType,\n        email: mpCorePerson.email,\n      })\n      .from(mpCoreGroup)\n      .innerJoin(\n        mpCorePersonGroup,\n        eq(mpCoreGroup.id, mpCorePersonGroup.groupId)\n      )\n      .innerJoin(mpCorePerson, eq(mpCorePersonGroup.personId, mpCorePerson.id))\n      .where(\n        and(isNotNull(mpCorePersonGroup.groupId), isNotNull(mpCoreGroup.name))\n      )\n      .groupBy(\n        mpCoreGroup.id,\n        mpCoreGroup.name,\n        mpCorePerson.firstName,\n        mpCorePerson.lastName,\n        mpCorePersonGroup.role,\n        mpCorePerson.personType,\n        mpCorePerson.email\n      );\n\n    // Transform the data to match the expected format\n    const formattedTeams = teams.map(team => ({\n      id: team.id || 'unknown',\n      name: team.name || 'Unknown Team',\n      coachName:\n        team.coachFirstName && team.coachLastName\n          ? `${team.coachFirstName} ${team.coachLastName}`.trim()\n          : team.coachFirstName || team.coachLastName || 'Unknown Coach',\n      role: team.role || 'member',\n      personType: team.personType || 'player',\n      email: team.email,\n      createdAt: new Date().toISOString(), // Since we don't have this in the current schema\n      updatedAt: new Date().toISOString(), // Since we don't have this in the current schema\n    }));\n\n    return Response.json(formattedTeams);\n  } catch (error) {\n    console.error('Error fetching teams:', error);\n    return Response.json({ error: 'Failed to fetch teams' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/test-users/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'NextRequest' is defined but never used.","line":1,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":21},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"fix":{"range":[982,1027],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson } from '@/lib/db/schema';\n\nexport async function GET() {\n  try {\n    if (!db) {\n      return NextResponse.json(\n        { error: 'Database connection not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get all users (limit to 10 for security)\n    const users = await db\n      .select({\n        id: mpCorePerson.id,\n        email: mpCorePerson.email,\n        displayName: mpCorePerson.displayName,\n        firstName: mpCorePerson.firstName,\n        authUid: mpCorePerson.authUid,\n      })\n      .from(mpCorePerson)\n      .limit(10);\n\n    return NextResponse.json({\n      success: true,\n      userCount: users.length,\n      users: users.map(user => ({\n        id: user.id,\n        email: user.email,\n        displayName: user.displayName,\n        firstName: user.firstName,\n        hasAuthUid: !!user.authUid,\n      })),\n    });\n  } catch (error) {\n    console.error('Database test error:', error);\n    return NextResponse.json(\n      {\n        error: 'Database test failed',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      },\n      { status: 500 }\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/user/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/api/user/teams/route.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":9,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":9,"endColumn":16,"suggestions":[{"fix":{"range":[290,327],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":16,"suggestions":[{"fix":{"range":[1380,1418],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":16,"suggestions":[{"fix":{"range":[2269,2322],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":18,"suggestions":[{"fix":{"range":[2390,2441],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { getUser } from '@/lib/db/queries';\nimport { db } from '@/lib/db/drizzle';\nimport { mpCorePerson, mpCorePersonGroup, mpCoreGroup } from '@/lib/db/schema';\nimport { eq, and, isNotNull } from 'drizzle-orm';\n\nexport async function GET() {\n  try {\n    const user = await getUser();\n    console.log('getUser result:', user);\n\n    if (!user) {\n      return Response.json({ error: 'User not found' }, { status: 404 });\n    }\n\n    if (!db) {\n      return Response.json(\n        { error: 'Database not available' },\n        { status: 500 }\n      );\n    }\n\n    // Get teams by joining with mpCorePersonGroup and mpCoreGroup tables\n    const teams = await db\n      .select({\n        id: mpCoreGroup.id,\n        name: mpCoreGroup.name,\n        coachName: mpCorePerson.firstName,\n        coachLastName: mpCorePerson.lastName,\n        role: mpCorePersonGroup.role,\n        personType: mpCorePerson.personType,\n      })\n      .from(mpCorePersonGroup)\n      .leftJoin(mpCoreGroup, eq(mpCorePersonGroup.groupId, mpCoreGroup.id))\n      .leftJoin(mpCorePerson, eq(mpCorePersonGroup.personId, mpCorePerson.id))\n      .where(and(isNotNull(mpCoreGroup.id), isNotNull(mpCoreGroup.name)))\n      .groupBy(\n        mpCoreGroup.id,\n        mpCoreGroup.name,\n        mpCorePerson.firstName,\n        mpCorePerson.lastName,\n        mpCorePersonGroup.role,\n        mpCorePerson.personType\n      );\n\n    console.log('Raw teams data:', teams);\n\n    // Transform the data to match the expected format\n    const formattedTeams = teams.map(team => ({\n      id: team.id || 'unknown',\n      name: team.name || 'Unknown Team',\n      coachName:\n        team.coachName && team.coachLastName\n          ? `${team.coachName} ${team.coachLastName}`.trim()\n          : team.coachName || team.coachLastName || 'Unknown Coach',\n      role: team.role || 'member',\n      personType: team.personType || 'player',\n      createdAt: new Date().toISOString(), // Since we don't have this in the current schema\n      updatedAt: new Date().toISOString(), // Since we don't have this in the current schema\n      // Add analytics fields with default values\n      performance: 75, // Default performance score\n      attendance: 85, // Default attendance rate\n      players: 12, // Default number of players\n    }));\n\n    console.log('Formatted teams data:', formattedTeams);\n\n    return Response.json(formattedTeams);\n  } catch (error) {\n    console.error('Error fetching user teams:', error);\n    return Response.json({ error: 'Failed to fetch teams' }, { status: 500 });\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/components-showcase/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UniversalModal' is defined but never used.","line":12,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport UniversalButton from '@/components/ui/UniversalButton';\nimport UniversalCard, {\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n} from '@/components/ui/UniversalCard';\nimport UniversalModal, { Modal } from '@/components/ui/UniversalModal';\n\nexport default function ComponentsShowcase() {\n  // State for modals\n  const [basicModalOpen, setBasicModalOpen] = useState(false);\n  const [deleteModalOpen, setDeleteModalOpen] = useState(false);\n  const [archiveModalOpen, setArchiveModalOpen] = useState(false);\n  const [successModalOpen, setSuccessModalOpen] = useState(false);\n  const [warningModalOpen, setWarningModalOpen] = useState(false);\n  const [addModalOpen, setAddModalOpen] = useState(false);\n  const [editModalOpen, setEditModalOpen] = useState(false);\n\n  // Mock loading state\n  const [loading, setLoading] = useState(false);\n\n  // Mock form data\n  const [formName, setFormName] = useState('');\n\n  // Mock handlers\n  const handleDelete = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setSuccessModalOpen(true);\n    }, 1000);\n  };\n\n  const handleArchive = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setSuccessModalOpen(true);\n    }, 1000);\n  };\n\n  const handleSubmit = () => {\n    setLoading(true);\n    setTimeout(() => {\n      setLoading(false);\n      setSuccessModalOpen(true);\n    }, 1000);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-zinc-950 text-white p-8\">\n      <h1 className=\"text-3xl font-bold mb-8 text-gold-500\">\n        Universal Components Showcase\n      </h1>\n\n      {/* Buttons Section */}\n      <section className=\"mb-16\">\n        <h2 className=\"text-2xl font-semibold mb-6 border-b border-zinc-800 pb-2\">\n          Universal Buttons\n        </h2>\n\n        <div className=\"space-y-8\">\n          {/* Primary Buttons */}\n          <div>\n            <h3 className=\"text-xl font-medium mb-4\">Primary Buttons</h3>\n            <div className=\"flex flex-wrap gap-4\">\n              <UniversalButton.Primary>Primary</UniversalButton.Primary>\n              <UniversalButton.Danger>Danger</UniversalButton.Danger>\n              <UniversalButton.Success>Success</UniversalButton.Success>\n              <UniversalButton.Warning>Warning</UniversalButton.Warning>\n              <UniversalButton.Archive>Archive</UniversalButton.Archive>\n              <UniversalButton.Gray>Gray</UniversalButton.Gray>\n            </div>\n          </div>\n\n          {/* Outline Buttons */}\n          <div>\n            <h3 className=\"text-xl font-medium mb-4\">Outline Buttons</h3>\n            <div className=\"flex flex-wrap gap-4\">\n              <UniversalButton.Secondary>Secondary</UniversalButton.Secondary>\n              <UniversalButton.DangerOutline>\n                Danger Outline\n              </UniversalButton.DangerOutline>\n              <UniversalButton.SuccessOutline>\n                Success Outline\n              </UniversalButton.SuccessOutline>\n              <UniversalButton.WarningOutline>\n                Warning Outline\n              </UniversalButton.WarningOutline>\n              <UniversalButton.ArchiveOutline>\n                Archive Outline\n              </UniversalButton.ArchiveOutline>\n              <UniversalButton.GrayOutline>\n                Gray Outline\n              </UniversalButton.GrayOutline>\n            </div>\n          </div>\n\n          {/* Ghost & Text Buttons */}\n          <div>\n            <h3 className=\"text-xl font-medium mb-4\">Ghost & Text Buttons</h3>\n            <div className=\"flex flex-wrap gap-4\">\n              <UniversalButton.Ghost>Ghost</UniversalButton.Ghost>\n              <UniversalButton.Text>Text Button</UniversalButton.Text>\n            </div>\n          </div>\n\n          {/* Button Sizes */}\n          <div>\n            <h3 className=\"text-xl font-medium mb-4\">Button Sizes</h3>\n            <div className=\"flex flex-wrap items-center gap-4\">\n              <UniversalButton.Primary size=\"xs\">\n                Extra Small\n              </UniversalButton.Primary>\n              <UniversalButton.Primary size=\"sm\">Small</UniversalButton.Primary>\n              <UniversalButton.Primary size=\"md\">\n                Medium\n              </UniversalButton.Primary>\n              <UniversalButton.Primary size=\"lg\">Large</UniversalButton.Primary>\n              <UniversalButton.Primary size=\"xl\">\n                Extra Large\n              </UniversalButton.Primary>\n            </div>\n          </div>\n\n          {/* Loading State */}\n          <div>\n            <h3 className=\"text-xl font-medium mb-4\">Loading State</h3>\n            <div className=\"flex flex-wrap gap-4\">\n              <UniversalButton.Primary loading>Loading</UniversalButton.Primary>\n              <UniversalButton.Danger loading>\n                Deleting...\n              </UniversalButton.Danger>\n              <UniversalButton.Success loading>\n                Saving...\n              </UniversalButton.Success>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Cards Section */}\n      <section className=\"mb-16\">\n        <h2 className=\"text-2xl font-semibold mb-6 border-b border-zinc-800 pb-2\">\n          Universal Cards\n        </h2>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Default Card */}\n          <UniversalCard.Default\n            title=\"Default Card\"\n            subtitle=\"With title and subtitle\"\n          >\n            <p>This is a default card with a title and subtitle.</p>\n          </UniversalCard.Default>\n\n          {/* Bordered Card */}\n          <UniversalCard.Bordered\n            title=\"Bordered Card\"\n            subtitle=\"With transparent background\"\n          >\n            <p>This card has a border but transparent background.</p>\n          </UniversalCard.Bordered>\n\n          {/* Elevated Card */}\n          <UniversalCard.Elevated\n            title=\"Elevated Card\"\n            subtitle=\"With shadow effect\"\n          >\n            <p>This card has elevation with a shadow effect.</p>\n          </UniversalCard.Elevated>\n\n          {/* Color Variants */}\n          <UniversalCard.Gold title=\"Gold Card\" subtitle=\"Brand primary color\">\n            <p>Card with gold accent color.</p>\n          </UniversalCard.Gold>\n\n          <UniversalCard.Danger\n            title=\"Danger Card\"\n            subtitle=\"For errors or warnings\"\n          >\n            <p>Card with danger accent color.</p>\n          </UniversalCard.Danger>\n\n          <UniversalCard.Success\n            title=\"Success Card\"\n            subtitle=\"For successful operations\"\n          >\n            <p>Card with success accent color.</p>\n          </UniversalCard.Success>\n\n          {/* Interactive Cards */}\n          <UniversalCard.Hoverable\n            title=\"Hoverable Card\"\n            subtitle=\"Hover to see effect\"\n          >\n            <p>This card highlights on hover.</p>\n          </UniversalCard.Hoverable>\n\n          <UniversalCard.Scalable\n            title=\"Scalable Card\"\n            subtitle=\"Hover to see effect\"\n          >\n            <p>This card scales slightly on hover.</p>\n          </UniversalCard.Scalable>\n\n          {/* Card with Footer */}\n          <UniversalCard.Default\n            title=\"Card with Footer\"\n            subtitle=\"And action buttons\"\n            footer={\n              <div className=\"flex justify-between w-full\">\n                <UniversalButton.Ghost size=\"sm\">Cancel</UniversalButton.Ghost>\n                <UniversalButton.Primary size=\"sm\">\n                  Save\n                </UniversalButton.Primary>\n              </div>\n            }\n          >\n            <p>This card includes a footer with action buttons.</p>\n          </UniversalCard.Default>\n\n          {/* Specialized Cards */}\n          <UniversalCard.PlayerCard\n            title=\"Player Card\"\n            subtitle=\"Specialized for players\"\n          >\n            <p>A specialized card for displaying player information.</p>\n          </UniversalCard.PlayerCard>\n\n          <UniversalCard.StatCard\n            title=\"Stat Card\"\n            subtitle=\"For displaying statistics\"\n          >\n            <div className=\"flex justify-between\">\n              <div>\n                <p className=\"text-sm text-zinc-400\">Points</p>\n                <p className=\"text-2xl font-bold\">24</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-zinc-400\">Rebounds</p>\n                <p className=\"text-2xl font-bold\">10</p>\n              </div>\n              <div>\n                <p className=\"text-sm text-zinc-400\">Assists</p>\n                <p className=\"text-2xl font-bold\">8</p>\n              </div>\n            </div>\n          </UniversalCard.StatCard>\n\n          <UniversalCard.EmptyState>\n            <div className=\"text-center\">\n              <h3 className=\"text-lg font-medium\">No Data Available</h3>\n              <p className=\"text-zinc-400 mt-2\">\n                This is an empty state card example.\n              </p>\n              <UniversalButton.Primary size=\"sm\" className=\"mt-4\">\n                Add Data\n              </UniversalButton.Primary>\n            </div>\n          </UniversalCard.EmptyState>\n        </div>\n      </section>\n\n      {/* Modals Section */}\n      <section className=\"mb-16\">\n        <h2 className=\"text-2xl font-semibold mb-6 border-b border-zinc-800 pb-2\">\n          Universal Modals\n        </h2>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {/* Basic Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Basic Modal</CardTitle>\n              <CardDescription>Simple content display</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A basic modal for displaying content.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Primary onClick={() => setBasicModalOpen(true)}>\n                Open Basic Modal\n              </UniversalButton.Primary>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Delete Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Delete Modal</CardTitle>\n              <CardDescription>Confirmation for deletion</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal for confirming deletion actions.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Danger onClick={() => setDeleteModalOpen(true)}>\n                Open Delete Modal\n              </UniversalButton.Danger>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Archive Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Archive Modal</CardTitle>\n              <CardDescription>Confirmation for archiving</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal for confirming archive actions.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Archive\n                onClick={() => setArchiveModalOpen(true)}\n              >\n                Open Archive Modal\n              </UniversalButton.Archive>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Success Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Success Modal</CardTitle>\n              <CardDescription>For successful operations</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal for displaying success messages.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Success\n                onClick={() => setSuccessModalOpen(true)}\n              >\n                Open Success Modal\n              </UniversalButton.Success>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Warning Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Warning Modal</CardTitle>\n              <CardDescription>For cautionary messages</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal for displaying warning messages.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Warning\n                onClick={() => setWarningModalOpen(true)}\n              >\n                Open Warning Modal\n              </UniversalButton.Warning>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Form Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Form Modal</CardTitle>\n              <CardDescription>For data entry</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal containing a form for data entry.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Primary onClick={() => setAddModalOpen(true)}>\n                Open Add Form Modal\n              </UniversalButton.Primary>\n            </CardFooter>\n          </UniversalCard.Default>\n\n          {/* Edit Form Modal */}\n          <UniversalCard.Default>\n            <CardHeader>\n              <CardTitle>Edit Form Modal</CardTitle>\n              <CardDescription>For editing existing data</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <p>A modal containing a form for editing data.</p>\n            </CardContent>\n            <CardFooter>\n              <UniversalButton.Secondary onClick={() => setEditModalOpen(true)}>\n                Open Edit Form Modal\n              </UniversalButton.Secondary>\n            </CardFooter>\n          </UniversalCard.Default>\n        </div>\n      </section>\n\n      {/* Modal Instances */}\n      <Modal.Info\n        open={basicModalOpen}\n        onOpenChange={setBasicModalOpen}\n        title=\"Information Modal\"\n        description=\"This is a basic information modal for displaying content.\"\n      >\n        <div className=\"py-4\">\n          <p>\n            This modal can be used to display any content or information to the\n            user.\n          </p>\n          <p className=\"mt-4\">\n            It's perfect for showing details, instructions, or any other content\n            that doesn't require user actions.\n          </p>\n        </div>\n      </Modal.Info>\n\n      <Modal.Delete\n        open={deleteModalOpen}\n        onOpenChange={setDeleteModalOpen}\n        title=\"Delete Item\"\n        description=\"Are you sure you want to delete this item? This action cannot be undone.\"\n        onConfirm={handleDelete}\n        loading={loading}\n      />\n\n      <Modal.Archive\n        open={archiveModalOpen}\n        onOpenChange={setArchiveModalOpen}\n        title=\"Archive Item\"\n        description=\"Are you sure you want to archive this item? You can restore it later.\"\n        onConfirm={handleArchive}\n        loading={loading}\n      />\n\n      <Modal.Success\n        open={successModalOpen}\n        onOpenChange={setSuccessModalOpen}\n        title=\"Operation Successful\"\n        description=\"The operation has been completed successfully.\"\n        onConfirm={() => setSuccessModalOpen(false)}\n      />\n\n      <Modal.Warning\n        open={warningModalOpen}\n        onOpenChange={setWarningModalOpen}\n        title=\"Warning\"\n        description=\"This action may have unintended consequences. Are you sure you want to proceed?\"\n        onConfirm={() => setWarningModalOpen(false)}\n      />\n\n      <Modal.Add\n        open={addModalOpen}\n        onOpenChange={setAddModalOpen}\n        title=\"Add New Item\"\n        description=\"Enter the details for the new item.\"\n        onSubmit={handleSubmit}\n        loading={loading}\n      >\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"name\" className=\"text-sm font-medium\">\n              Name\n            </label>\n            <input\n              id=\"name\"\n              className=\"w-full rounded-md border border-zinc-700 bg-zinc-800 px-3 py-2 text-sm\"\n              value={formName}\n              onChange={e => setFormName(e.target.value)}\n              placeholder=\"Enter name\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <label htmlFor=\"description\" className=\"text-sm font-medium\">\n              Description\n            </label>\n            <textarea\n              id=\"description\"\n              className=\"w-full rounded-md border border-zinc-700 bg-zinc-800 px-3 py-2 text-sm\"\n              placeholder=\"Enter description\"\n              rows={3}\n            />\n          </div>\n        </div>\n      </Modal.Add>\n\n      <Modal.Edit\n        open={editModalOpen}\n        onOpenChange={setEditModalOpen}\n        title=\"Edit Item\"\n        description=\"Update the details for this item.\"\n        onSubmit={handleSubmit}\n        loading={loading}\n      >\n        <div className=\"space-y-4 py-4\">\n          <div className=\"space-y-2\">\n            <label htmlFor=\"edit-name\" className=\"text-sm font-medium\">\n              Name\n            </label>\n            <input\n              id=\"edit-name\"\n              className=\"w-full rounded-md border border-zinc-700 bg-zinc-800 px-3 py-2 text-sm\"\n              defaultValue=\"Example Item\"\n              placeholder=\"Enter name\"\n            />\n          </div>\n          <div className=\"space-y-2\">\n            <label htmlFor=\"edit-description\" className=\"text-sm font-medium\">\n              Description\n            </label>\n            <textarea\n              id=\"edit-description\"\n              className=\"w-full rounded-md border border-zinc-700 bg-zinc-800 px-3 py-2 text-sm\"\n              defaultValue=\"This is an example item description.\"\n              placeholder=\"Enter description\"\n              rows={3}\n            />\n          </div>\n        </div>\n      </Modal.Edit>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/layout.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":8,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":8,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":13,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":13,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":43,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":25}],"suppressedMessages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":45,"column":15,"nodeType":"MemberExpression","messageId":"unexpected","endLine":45,"endColumn":27,"suggestions":[{"fix":{"range":[1447,1554],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport './globals.css';\nimport type { Metadata, Viewport } from 'next';\nimport { Manrope } from 'next/font/google';\nimport { getUser, getTeamForUser } from '@/lib/db/queries';\nimport { SWRConfig } from 'swr';\n\nexport const metadata: Metadata = {\n  title: 'Next.js SaaS Starter',\n  description: 'Get started quickly with Next.js, Postgres, and Stripe.',\n};\n\nexport const viewport: Viewport = {\n  maximumScale: 1,\n};\n\nconst manrope = Manrope({ subsets: ['latin'] });\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html\n      lang=\"en\"\n      className={`bg-white dark:bg-gray-950 text-black dark:text-white ${manrope.className}`}\n    >\n      <body className=\"min-h-[100dvh] bg-gray-50\">\n        {/*\n          Build SWR fallback data conditionally. In local development (or\n          environments without a configured database) `getUser` / `getTeamForUser`\n          will throw because `db` is undefined.  We shield the app from that\n          scenario so that pages not requiring the DB (e.g. marketing / auth)\n          continue to work.\n        */}\n        <SWRConfig\n          value={(() => {\n            const fallback: Record<string, unknown> = {};\n            try {\n              fallback['/api/user'] = getUser();\n              fallback['/api/team'] = getTeamForUser();\n            } catch (err) {\n              /* eslint-disable no-console */\n              console.warn(\n                '[layout] Database unavailable, skipping SWR fallback data.'\n              );\n            }\n            return { fallback };\n          })()}\n        >\n          {children}\n        </SWRConfig>\n      </body>\n    </html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/not-found.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/test-dashboard/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/app/test-dashboard/page.tsx","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":116,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":116,"endColumn":18,"suggestions":[{"fix":{"range":[3702,3758],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":192,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":192,"endColumn":18,"suggestions":[{"fix":{"range":[6430,6476],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":246,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":246,"endColumn":18,"suggestions":[{"fix":{"range":[8229,8276],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":328,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":328,"endColumn":18,"suggestions":[{"fix":{"range":[11284,11333],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":382,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":382,"endColumn":18,"suggestions":[{"fix":{"range":[13139,13193],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Suspense } from 'react';\nimport UniversalCard from '@/components/ui/UniversalCard';\nimport UniversalButton from '@/components/ui/UniversalButton';\nimport {\n  Users,\n  UserRound,\n  Calendar,\n  Building,\n  Database,\n  ArrowRight,\n  AlertCircle,\n} from 'lucide-react';\nimport {\n  getDatabaseCounts,\n  getUsers,\n  getGroups,\n  getSessions,\n  getOrganizations,\n} from '@/lib/db/test-queries';\n\n// Loading component\nfunction LoadingCard() {\n  return (\n    <UniversalCard.Default className=\"h-48 animate-pulse\">\n      <div className=\"flex flex-col items-center justify-center h-full\">\n        <div className=\"w-12 h-12 rounded-full bg-zinc-800 mb-4\"></div>\n        <div className=\"h-6 w-32 bg-zinc-800 rounded mb-2\"></div>\n        <div className=\"h-4 w-48 bg-zinc-800 rounded\"></div>\n      </div>\n    </UniversalCard.Default>\n  );\n}\n\n// Error component\nfunction ErrorCard({ message }: { message: string }) {\n  return (\n    <UniversalCard.Danger>\n      <div className=\"flex flex-col items-center p-4\">\n        <AlertCircle size={32} className=\"text-danger-500 mb-2\" />\n        <h3 className=\"text-lg font-semibold mb-1\">Error Loading Data</h3>\n        <p className=\"text-center text-zinc-400\">{message}</p>\n      </div>\n    </UniversalCard.Danger>\n  );\n}\n\n// Stats component\nasync function StatsSection() {\n  try {\n    const { userCount, groupCount, sessionCount, organizationCount } =\n      await getDatabaseCounts();\n\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <UniversalCard.StatCard>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-zinc-400\">Total Users</p>\n              <h3 className=\"text-3xl font-bold mt-2 text-white\">\n                {userCount}\n              </h3>\n            </div>\n            <div className=\"p-3 rounded-full bg-zinc-800\">\n              <UserRound size={24} className=\"text-gold-500\" />\n            </div>\n          </div>\n        </UniversalCard.StatCard>\n\n        <UniversalCard.StatCard>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-zinc-400\">Total Groups</p>\n              <h3 className=\"text-3xl font-bold mt-2 text-white\">\n                {groupCount}\n              </h3>\n            </div>\n            <div className=\"p-3 rounded-full bg-zinc-800\">\n              <Users size={24} className=\"text-gold-500\" />\n            </div>\n          </div>\n        </UniversalCard.StatCard>\n\n        <UniversalCard.StatCard>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-zinc-400\">\n                Total Sessions\n              </p>\n              <h3 className=\"text-3xl font-bold mt-2 text-white\">\n                {sessionCount}\n              </h3>\n            </div>\n            <div className=\"p-3 rounded-full bg-zinc-800\">\n              <Calendar size={24} className=\"text-gold-500\" />\n            </div>\n          </div>\n        </UniversalCard.StatCard>\n\n        <UniversalCard.StatCard>\n          <div className=\"flex items-start justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-zinc-400\">Organizations</p>\n              <h3 className=\"text-3xl font-bold mt-2 text-white\">\n                {organizationCount}\n              </h3>\n            </div>\n            <div className=\"p-3 rounded-full bg-zinc-800\">\n              <Building size={24} className=\"text-gold-500\" />\n            </div>\n          </div>\n        </UniversalCard.StatCard>\n      </div>\n    );\n  } catch (error) {\n    console.error('Error fetching database counts:', error);\n    return <ErrorCard message=\"Failed to load database statistics.\" />;\n  }\n}\n\n// Users component\nasync function UsersSection() {\n  try {\n    const users = await getUsers(5);\n\n    return (\n      <UniversalCard.Default\n        title=\"Recent Users\"\n        subtitle=\"Last 5 users added to the system\"\n        footer={\n          <div className=\"flex justify-end w-full\">\n            <UniversalButton.Secondary\n              size=\"sm\"\n              rightIcon={<ArrowRight size={16} />}\n            >\n              View All Users\n            </UniversalButton.Secondary>\n          </div>\n        }\n      >\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead>\n              <tr className=\"text-left text-xs text-zinc-500 border-b border-zinc-800\">\n                <th className=\"pb-2 font-medium\">Name</th>\n                <th className=\"pb-2 font-medium\">Email</th>\n                <th className=\"pb-2 font-medium\">Admin</th>\n                <th className=\"pb-2 font-medium\">Created</th>\n              </tr>\n            </thead>\n            <tbody>\n              {users.map(user => (\n                <tr\n                  key={user.id}\n                  className=\"border-b border-zinc-800/50 hover:bg-zinc-800/30\"\n                >\n                  <td className=\"py-3 pr-4\">\n                    <p className=\"font-medium text-white\">\n                      {user.displayName || 'No Name'}\n                    </p>\n                  </td>\n                  <td className=\"py-3 pr-4 text-zinc-300\">{user.email}</td>\n                  <td className=\"py-3 pr-4\">\n                    {user.isSuperadmin ? (\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-gold-500/20 text-gold-500\">\n                        Admin\n                      </span>\n                    ) : (\n                      <span className=\"inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-zinc-500/20 text-zinc-400\">\n                        User\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"py-3 text-zinc-400 text-sm\">\n                    {new Date(user.createdAt).toLocaleDateString()}\n                  </td>\n                </tr>\n              ))}\n              {users.length === 0 && (\n                <tr>\n                  <td colSpan={4} className=\"py-8 text-center text-zinc-500\">\n                    No users found in the database.\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </UniversalCard.Default>\n    );\n  } catch (error) {\n    console.error('Error fetching users:', error);\n    return <ErrorCard message=\"Failed to load user data.\" />;\n  }\n}\n\n// Groups component\nasync function GroupsSection() {\n  try {\n    const groups = await getGroups(5);\n\n    return (\n      <UniversalCard.Default\n        title=\"Recent Groups\"\n        subtitle=\"Last 5 groups created in the system\"\n        footer={\n          <div className=\"flex justify-end w-full\">\n            <UniversalButton.Secondary\n              size=\"sm\"\n              rightIcon={<ArrowRight size={16} />}\n            >\n              View All Groups\n            </UniversalButton.Secondary>\n          </div>\n        }\n      >\n        <div className=\"space-y-3\">\n          {groups.map(group => (\n            <div\n              key={group.id}\n              className=\"flex items-center p-3 rounded-lg bg-zinc-800/50 hover:bg-zinc-800 transition-colors\"\n            >\n              <div className=\"flex-shrink-0 w-10 h-10 bg-gold-500/20 rounded-lg flex items-center justify-center mr-4\">\n                <Users className=\"h-5 w-5 text-gold-500\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-white truncate\">\n                  {group.name}\n                </p>\n                <p className=\"text-xs text-zinc-400 mt-1\">\n                  Created on {new Date(group.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n              <UniversalButton.Ghost size=\"xs\">View</UniversalButton.Ghost>\n            </div>\n          ))}\n          {groups.length === 0 && (\n            <div className=\"py-8 text-center text-zinc-500\">\n              No groups found in the database.\n            </div>\n          )}\n        </div>\n      </UniversalCard.Default>\n    );\n  } catch (error) {\n    console.error('Error fetching groups:', error);\n    return <ErrorCard message=\"Failed to load group data.\" />;\n  }\n}\n\n// Sessions component\nasync function SessionsSection() {\n  try {\n    const sessions = await getSessions(5);\n\n    return (\n      <UniversalCard.Default\n        title=\"Recent Sessions\"\n        subtitle=\"Last 5 sessions in the system\"\n        footer={\n          <div className=\"flex justify-end w-full\">\n            <UniversalButton.Secondary\n              size=\"sm\"\n              rightIcon={<ArrowRight size={16} />}\n            >\n              View All Sessions\n            </UniversalButton.Secondary>\n          </div>\n        }\n      >\n        <div className=\"space-y-3\">\n          {sessions.map(session => (\n            <div\n              key={session.id}\n              className=\"flex items-center p-3 rounded-lg bg-zinc-800/50 hover:bg-zinc-800 transition-colors\"\n            >\n              <div className=\"flex-shrink-0 w-10 h-10 bg-gold-500/20 rounded-lg flex items-center justify-center mr-4\">\n                <Calendar className=\"h-5 w-5 text-gold-500\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex justify-between\">\n                  <p className=\"text-sm font-medium text-white truncate\">\n                    {session.sessionType || 'Session'} #\n                    {session.sessionNumber || 'N/A'}\n                  </p>\n                  <span\n                    className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${\n                      session.status === 'completed'\n                        ? 'bg-success-500/20 text-success-500'\n                        : session.status === 'scheduled'\n                          ? 'bg-gold-500/20 text-gold-500'\n                          : 'bg-zinc-500/20 text-zinc-400'\n                    }`}\n                  >\n                    {session.status || 'Unknown'}\n                  </span>\n                </div>\n                <div className=\"flex items-center text-xs text-zinc-400 mt-1\">\n                  <span className=\"mr-2\">\n                    {session.date\n                      ? new Date(session.date).toLocaleDateString()\n                      : 'No date'}\n                  </span>\n                  {session.startTime && session.endTime && (\n                    <span>\n                      {session.startTime} - {session.endTime}\n                    </span>\n                  )}\n                  {session.location && (\n                    <span className=\"ml-2 text-zinc-500\">\n                      @ {session.location}\n                    </span>\n                  )}\n                </div>\n              </div>\n              <UniversalButton.Ghost size=\"xs\">View</UniversalButton.Ghost>\n            </div>\n          ))}\n          {sessions.length === 0 && (\n            <div className=\"py-8 text-center text-zinc-500\">\n              No sessions found in the database.\n            </div>\n          )}\n        </div>\n      </UniversalCard.Default>\n    );\n  } catch (error) {\n    console.error('Error fetching sessions:', error);\n    return <ErrorCard message=\"Failed to load session data.\" />;\n  }\n}\n\n// Organizations component\nasync function OrganizationsSection() {\n  try {\n    const organizations = await getOrganizations(5);\n\n    return (\n      <UniversalCard.Default\n        title=\"Organizations\"\n        subtitle=\"Last 5 organizations in the system\"\n        footer={\n          <div className=\"flex justify-end w-full\">\n            <UniversalButton.Secondary\n              size=\"sm\"\n              rightIcon={<ArrowRight size={16} />}\n            >\n              View All Organizations\n            </UniversalButton.Secondary>\n          </div>\n        }\n      >\n        <div className=\"space-y-3\">\n          {organizations.map(org => (\n            <div\n              key={org.id}\n              className=\"flex items-center p-3 rounded-lg bg-zinc-800/50 hover:bg-zinc-800 transition-colors\"\n            >\n              <div className=\"flex-shrink-0 w-10 h-10 bg-gold-500/20 rounded-lg flex items-center justify-center mr-4\">\n                <Building className=\"h-5 w-5 text-gold-500\" />\n              </div>\n              <div className=\"flex-1 min-w-0\">\n                <p className=\"text-sm font-medium text-white truncate\">\n                  {org.name}\n                </p>\n                <p className=\"text-xs text-zinc-400 mt-1\">\n                  Created on {new Date(org.createdAt).toLocaleDateString()}\n                </p>\n              </div>\n              <UniversalButton.Ghost size=\"xs\">View</UniversalButton.Ghost>\n            </div>\n          ))}\n          {organizations.length === 0 && (\n            <div className=\"py-8 text-center text-zinc-500\">\n              No organizations found in the database.\n            </div>\n          )}\n        </div>\n      </UniversalCard.Default>\n    );\n  } catch (error) {\n    console.error('Error fetching organizations:', error);\n    return <ErrorCard message=\"Failed to load organization data.\" />;\n  }\n}\n\nexport default function DatabaseTestPage() {\n  return (\n    <>\n      {/* Stats Section */}\n      <Suspense\n        fallback={\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n            {[...Array(4)].map((_, i) => (\n              <LoadingCard key={i} />\n            ))}\n          </div>\n        }\n      >\n        <StatsSection />\n      </Suspense>\n\n      {/* Data Sections */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <Suspense fallback={<LoadingCard />}>\n          <UsersSection />\n        </Suspense>\n\n        <Suspense fallback={<LoadingCard />}>\n          <GroupsSection />\n        </Suspense>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Suspense fallback={<LoadingCard />}>\n          <SessionsSection />\n        </Suspense>\n\n        <Suspense fallback={<LoadingCard />}>\n          <OrganizationsSection />\n        </Suspense>\n      </div>\n\n      {/* Database Info */}\n      <UniversalCard.Default className=\"mt-8\">\n        <div className=\"flex items-center\">\n          <Database size={24} className=\"text-gold-500 mr-3\" />\n          <div>\n            <h3 className=\"text-lg font-medium\">Database Connection</h3>\n            <p className=\"text-zinc-400 text-sm\">\n              Connected to PostgreSQL database. This page demonstrates\n              retrieving and displaying real data.\n            </p>\n          </div>\n        </div>\n      </UniversalCard.Default>\n    </>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/commitlint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/basketball/AddPlayerModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/basketball/ArchivePlanModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UniversalButton' is defined but never used.","line":5,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":23}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport UniversalModal from '@/components/ui/UniversalModal';\nimport UniversalButton from '@/components/ui/UniversalButton';\n\ninterface ArchivePlanModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onConfirm: () => void;\n  title?: string;\n  message?: string;\n}\n\nconst ArchivePlanModal: React.FC<ArchivePlanModalProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  title = 'Archive Current Plan',\n  message = 'This will close the current development plan and archive all of its associated observations.',\n}) => {\n  return (\n    <UniversalModal.Confirm\n      open={isOpen}\n      onOpenChange={onClose}\n      onConfirm={onConfirm}\n      onCancel={onClose}\n      title={title}\n      description={message}\n      confirmText=\"Confirm & Continue\"\n      cancelText=\"Cancel\"\n      variant=\"warning\"\n    />\n  );\n};\n\nexport default ArchivePlanModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/basketball/PlayerListCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/basketball/PlayersList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/basketball/ThreeColumnLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/layouts/DashboardLayout.tsx","messages":[{"ruleId":"react/jsx-no-useless-fragment","message":"Definition for rule 'react/jsx-no-useless-fragment' was not found.","line":1,"column":1,"endLine":1,"endColumn":51,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/jsx-no-useless-fragment */\n'use client';\n\nimport React from 'react';\nimport { Sidebar } from '@/components/ui/Sidebar';\n\ninterface DashboardLayoutProps {\n  /**\n   * Content for the leftmost column (e.g., player list, navigation, etc.)\n   */\n  left?: React.ReactNode;\n  /**\n   * Content for the main/center column (primary content)\n   */\n  center: React.ReactNode;\n  /**\n   * Content for the right column (e.g., insights, activity, etc.)\n   */\n  right?: React.ReactNode;\n  /**\n   * Content for an optional far-right column (e.g., extra panel)\n   */\n  extraRight?: React.ReactNode;\n  /**\n   * Number of columns to display (2, 3, or 4)\n   */\n  columns?: 2 | 3 | 4;\n  /**\n   * Optional: override user info for sidebar/header\n   */\n  user?: {\n    name: string;\n    email: string;\n    role: string;\n  };\n}\n\nexport const DashboardLayout: React.FC<DashboardLayoutProps> = ({\n  left,\n  center,\n  right,\n  extraRight,\n  columns = 3,\n  user = { name: 'Coach', email: 'coach@example.com', role: 'Coach' },\n}) => {\n  return (\n    <div\n      className=\"flex min-h-screen h-full bg-black text-white\"\n      style={{ background: 'black' }}\n    >\n      {/* Header */}\n      <header\n        className=\"fixed top-0 left-0 w-full z-50 bg-black h-16 flex items-center px-8 border-b border-[#d8cc97] justify-between\"\n        style={{ boxShadow: 'none' }}\n      >\n        <span\n          className=\"text-2xl font-bold tracking-wide text-[#d8cc97]\"\n          style={{ letterSpacing: '0.04em' }}\n        >\n          MP Player Development\n        </span>\n        <div className=\"flex flex-col items-end\">\n          <span className=\"text-base font-semibold text-white leading-tight\">\n            {user.name}\n          </span>\n          <span className=\"text-xs text-[#d8cc97] leading-tight\">\n            {user.email}\n          </span>\n          <span className=\"text-xs text-white leading-tight\">{user.role}</span>\n        </div>\n      </header>\n      {/* Sidebar */}\n      <Sidebar user={user} />\n      {/* Main Content */}\n      <div\n        className=\"flex-1 flex ml-64 pt-16 bg-black min-h-screen\"\n        style={{ background: 'black', minHeight: '100vh' }}\n      >\n        {/* Columns */}\n        <div className=\"flex w-full min-h-screen\">\n          {/* Left column (always rendered for 2+ columns) */}\n          {columns >= 2 && (\n            <div className=\"w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen\">\n              {left || null}\n            </div>\n          )}\n          {/* Center column (always present) */}\n          <div\n            className={\n              columns === 2\n                ? 'w-1/2 p-8 bg-black flex flex-col justify-start min-h-screen'\n                : columns === 3\n                  ? 'w-1/2 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen'\n                  : 'w-1/4 border-r border-zinc-800 p-8 bg-black flex flex-col justify-start min-h-screen'\n            }\n          >\n            {center}\n          </div>\n          {/* Right column (always rendered for 3+ columns) */}\n          {columns >= 3 && (\n            <div\n              className={\n                columns === 3\n                  ? 'w-1/4 p-6 bg-black flex flex-col justify-start min-h-screen'\n                  : 'w-1/4 border-r border-zinc-800 p-6 bg-black flex flex-col justify-start min-h-screen'\n              }\n            >\n              {right || null}\n            </div>\n          )}\n          {/* Extra right column (always rendered for 4 columns) */}\n          {columns === 4 && (\n            <div className=\"w-1/4 p-6 bg-black flex flex-col justify-start min-h-screen\">\n              {extraRight || null}\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardLayout;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/Sidebar.tsx","messages":[{"ruleId":"react/jsx-no-useless-fragment","message":"Definition for rule 'react/jsx-no-useless-fragment' was not found.","line":1,"column":1,"endLine":1,"endColumn":51,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/* eslint-disable react/jsx-no-useless-fragment */\n'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/utils';\nimport {\n  ChevronDown,\n  ChevronRight,\n  LayoutDashboard,\n  Users,\n  UserRound,\n  ClipboardList,\n  Settings,\n  LogOut,\n  Menu,\n  X,\n  Award,\n  Calendar,\n  BarChart3,\n  BookOpen,\n} from 'lucide-react';\nimport UniversalButton from './UniversalButton';\n\ntype NavItemType = {\n  title: string;\n  href: string;\n  icon: React.ReactNode;\n  children?: NavItemType[];\n};\n\ntype SidebarProps = {\n  user?: {\n    name: string;\n    email: string;\n    role: string;\n    avatar?: string;\n  };\n  onSignOut?: () => void;\n};\n\nconst navItems: NavItemType[] = [\n  {\n    title: 'Dashboard',\n    href: '/dashboard',\n    icon: <LayoutDashboard size={20} />,\n  },\n  {\n    title: 'Players',\n    href: '/players',\n    icon: <Users size={20} />,\n    children: [\n      {\n        title: 'All Players',\n        href: '/players',\n        icon: <ChevronRight size={16} />,\n      },\n      {\n        title: 'Development Plans',\n        href: '/development-plans',\n        icon: <ChevronRight size={16} />,\n      },\n      {\n        title: 'Observations',\n        href: '/observations',\n        icon: <ChevronRight size={16} />,\n      },\n    ],\n  },\n  {\n    title: 'Teams',\n    href: '/teams',\n    icon: <Users size={20} />,\n  },\n  {\n    title: 'Coaches',\n    href: '/coaches',\n    icon: <UserRound size={20} />,\n  },\n  {\n    title: 'Sessions',\n    href: '/sessions',\n    icon: <Calendar size={20} />,\n  },\n  {\n    title: 'Drills',\n    href: '/drills',\n    icon: <ClipboardList size={20} />,\n  },\n  {\n    title: 'Analytics',\n    href: '/analytics',\n    icon: <BarChart3 size={20} />,\n  },\n  {\n    title: 'Resources',\n    href: '/resources',\n    icon: <BookOpen size={20} />,\n  },\n  {\n    title: 'Settings',\n    href: '/settings',\n    icon: <Settings size={20} />,\n  },\n];\n\nexport function Sidebar({ onSignOut }: SidebarProps) {\n  const pathname = usePathname();\n  const [isMobileOpen, setIsMobileOpen] = useState(false);\n  const [expandedItems, setExpandedItems] = useState<Record<string, boolean>>(\n    {}\n  );\n\n  // Close mobile sidebar when pathname changes\n  useEffect(() => {\n    setIsMobileOpen(false);\n  }, [pathname]);\n\n  // Pre-expand the item that contains the current path\n  useEffect(() => {\n    navItems.forEach(item => {\n      if (item.children) {\n        const shouldExpand = item.children.some(child =>\n          pathname.startsWith(child.href)\n        );\n        if (shouldExpand) {\n          setExpandedItems(prev => ({ ...prev, [item.title]: true }));\n        }\n      }\n    });\n  }, [pathname]);\n\n  const toggleExpand = (title: string) => {\n    setExpandedItems(prev => ({\n      ...prev,\n      [title]: !prev[title],\n    }));\n  };\n\n  const isActive = (href: string) => {\n    return pathname === href || pathname.startsWith(`${href}/`);\n  };\n\n  return (\n    <>\n      {/* Mobile Toggle Button */}\n      <div className=\"fixed top-4 left-4 z-50 md:hidden\">\n        <button\n          onClick={() => setIsMobileOpen(!isMobileOpen)}\n          className=\"p-2 rounded-md bg-zinc-800 text-white hover:bg-zinc-700 focus:outline-none focus:ring-2 focus:ring-gold-500\"\n          aria-label=\"Toggle sidebar\"\n        >\n          {isMobileOpen ? <X size={20} /> : <Menu size={20} />}\n        </button>\n      </div>\n\n      {/* Overlay for mobile */}\n      {isMobileOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\"\n          onClick={() => setIsMobileOpen(false)}\n        />\n      )}\n\n      {/* Sidebar */}\n      <aside\n        className={cn(\n          'fixed top-0 left-0 z-40 h-screen bg-zinc-900 border-r border-zinc-800 transition-all duration-300 ease-in-out',\n          'w-64 md:w-64 md:translate-x-0',\n          isMobileOpen ? 'translate-x-0' : '-translate-x-full'\n        )}\n      >\n        {/* Logo & Brand */}\n        <div className=\"flex items-center justify-center h-16 border-b border-zinc-800\">\n          <Link href=\"/dashboard\" className=\"flex items-center gap-2\">\n            <Award size={24} className=\"text-gold-500\" />\n            <span className=\"text-lg font-semibold text-white\">\n              MP Basketball\n            </span>\n          </Link>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"px-3 py-4 overflow-y-auto h-[calc(100vh-16rem)]\">\n          <ul className=\"space-y-1\">\n            {navItems.map(item => (\n              <li key={item.title}>\n                {item.children ? (\n                  <div>\n                    <button\n                      onClick={() => toggleExpand(item.title)}\n                      className={cn(\n                        'flex items-center justify-between w-full px-3 py-2 rounded-md text-sm font-medium',\n                        isActive(item.href)\n                          ? 'bg-gold-500/20 text-gold-500'\n                          : 'text-zinc-300 hover:bg-zinc-800 hover:text-white'\n                      )}\n                    >\n                      <div className=\"flex items-center\">\n                        <span className=\"mr-3\">{item.icon}</span>\n                        {item.title}\n                      </div>\n                      {expandedItems[item.title] ? (\n                        <ChevronDown size={16} />\n                      ) : (\n                        <ChevronRight size={16} />\n                      )}\n                    </button>\n                    {expandedItems[item.title] && (\n                      <ul className=\"pl-10 mt-1 space-y-1\">\n                        {item.children.map(child => (\n                          <li key={child.title}>\n                            <Link\n                              href={child.href}\n                              className={cn(\n                                'flex items-center px-3 py-2 rounded-md text-sm font-medium',\n                                isActive(child.href)\n                                  ? 'bg-gold-500/20 text-gold-500'\n                                  : 'text-zinc-400 hover:bg-zinc-800 hover:text-white'\n                              )}\n                            >\n                              <span className=\"mr-2\">{child.icon}</span>\n                              {child.title}\n                            </Link>\n                          </li>\n                        ))}\n                      </ul>\n                    )}\n                  </div>\n                ) : (\n                  <Link\n                    href={item.href}\n                    className={cn(\n                      'flex items-center px-3 py-2 rounded-md text-sm font-medium',\n                      isActive(item.href)\n                        ? 'bg-gold-500/20 text-gold-500'\n                        : 'text-zinc-300 hover:bg-zinc-800 hover:text-white'\n                    )}\n                  >\n                    <span className=\"mr-3\">{item.icon}</span>\n                    {item.title}\n                  </Link>\n                )}\n              </li>\n            ))}\n          </ul>\n        </nav>\n\n        {/* Footer */}\n        <div className=\"absolute bottom-0 left-0 right-0 p-4 border-t border-zinc-800\">\n          {onSignOut && (\n            <UniversalButton.Ghost\n              onClick={onSignOut}\n              className=\"w-full justify-start text-zinc-400 hover:text-white\"\n              leftIcon={<LogOut size={18} />}\n            >\n              Sign Out\n            </UniversalButton.Ghost>\n          )}\n        </div>\n      </aside>\n    </>\n  );\n}\n\nexport default Sidebar;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/UniversalButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":170,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":170,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6341,6344],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6341,6344],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":174,"column":27,"nodeType":"Identifier","messageId":"namedExport","endLine":174,"endColumn":41}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef, ButtonHTMLAttributes, ReactNode } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\n// Button variants using class-variance-authority\nconst buttonVariants = cva(\n  'inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',\n  {\n    variants: {\n      variant: {\n        // Solid variants\n        primary:\n          'bg-gold-500 text-black hover:bg-gold-600 focus-visible:ring-gold-500/50',\n        danger:\n          'bg-danger-500 text-white hover:bg-danger-600 focus-visible:ring-danger-500/50',\n        success:\n          'bg-success-500 text-white hover:bg-success-600 focus-visible:ring-success-500/50',\n        warning:\n          'bg-warning-500 text-black hover:bg-warning-600 focus-visible:ring-warning-500/50',\n        archive:\n          'bg-archive-500 text-white hover:bg-archive-600 focus-visible:ring-archive-500/50',\n        gray: 'bg-gray-500 text-white hover:bg-gray-600 focus-visible:ring-gray-500/50',\n\n        // Outline variants\n        primaryOutline:\n          'border border-gold-500 text-gold-500 bg-transparent hover:bg-gold-500/10 focus-visible:ring-gold-500/50',\n        dangerOutline:\n          'border border-danger-500 text-danger-500 bg-transparent hover:bg-danger-500/10 focus-visible:ring-danger-500/50',\n        successOutline:\n          'border border-success-500 text-success-500 bg-transparent hover:bg-success-500/10 focus-visible:ring-success-500/50',\n        warningOutline:\n          'border border-warning-500 text-warning-500 bg-transparent hover:bg-warning-500/10 focus-visible:ring-warning-500/50',\n        archiveOutline:\n          'border border-archive-500 text-archive-500 bg-transparent hover:bg-archive-500/10 focus-visible:ring-archive-500/50',\n        grayOutline:\n          'border border-gray-500 text-gray-500 bg-transparent hover:bg-gray-500/10 focus-visible:ring-gray-500/50',\n\n        // Ghost and text variants\n        ghost:\n          'bg-transparent text-gray-500 hover:bg-gray-500/10 hover:text-gray-700 focus-visible:ring-gray-500/50',\n        text: 'bg-transparent text-gold-500 hover:underline focus-visible:ring-gold-500/50 p-0',\n      },\n      size: {\n        xs: 'h-7 px-2 text-xs',\n        sm: 'h-8 px-3 text-sm',\n        md: 'h-10 px-4',\n        lg: 'h-11 px-6',\n        xl: 'h-12 px-8 text-lg',\n        icon: 'h-10 w-10 p-2',\n      },\n    },\n    defaultVariants: {\n      variant: 'primary',\n      size: 'md',\n    },\n  }\n);\n\n// Props interface extending button HTML attributes and variants\nexport interface ButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  children: ReactNode;\n  loading?: boolean;\n  leftIcon?: ReactNode;\n  rightIcon?: ReactNode;\n  fullWidth?: boolean;\n}\n\n// Base Button component with ref forwarding\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      children,\n      loading = false,\n      disabled,\n      leftIcon,\n      rightIcon,\n      fullWidth = false,\n      ...props\n    },\n    ref\n  ) => {\n    return (\n      <button\n        className={cn(\n          buttonVariants({ variant, size }),\n          fullWidth ? 'w-full' : '',\n          className\n        )}\n        ref={ref}\n        disabled={disabled || loading}\n        {...props}\n      >\n        {loading ? (\n          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n        ) : (\n          leftIcon && <span className=\"mr-1\">{leftIcon}</span>\n        )}\n        {children}\n        {rightIcon && !loading && <span className=\"ml-1\">{rightIcon}</span>}\n      </button>\n    );\n  }\n);\n\nButton.displayName = 'Button';\n\n// Create specialized button components\nconst UniversalButton = {\n  // Base component for custom styling\n  Base: Button,\n\n  // Solid variants\n  Primary: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"primary\" ref={ref} {...props} />\n  ),\n  Danger: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"danger\" ref={ref} {...props} />\n  ),\n  Success: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"success\" ref={ref} {...props} />\n  ),\n  Warning: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"warning\" ref={ref} {...props} />\n  ),\n  Archive: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"archive\" ref={ref} {...props} />\n  ),\n  Gray: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"gray\" ref={ref} {...props} />\n  ),\n\n  // Outline variants\n  Secondary: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"primaryOutline\" ref={ref} {...props} />\n  ),\n  DangerOutline: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"dangerOutline\" ref={ref} {...props} />\n  ),\n  SuccessOutline: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"successOutline\" ref={ref} {...props} />\n  ),\n  WarningOutline: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"warningOutline\" ref={ref} {...props} />\n  ),\n  ArchiveOutline: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"archiveOutline\" ref={ref} {...props} />\n  ),\n  GrayOutline: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"grayOutline\" ref={ref} {...props} />\n  ),\n\n  // Ghost and text variants\n  Ghost: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"ghost\" ref={ref} {...props} />\n  ),\n  Text: forwardRef<HTMLButtonElement, Omit<ButtonProps, 'variant'>>(\n    (props, ref) => <Button variant=\"text\" ref={ref} {...props} />\n  ),\n};\n\n// Add display names for all components\nObject.keys(UniversalButton).forEach(key => {\n  if (key !== 'Base') {\n    (UniversalButton as any)[key].displayName = `UniversalButton.${key}`;\n  }\n});\n\nexport { UniversalButton, buttonVariants };\nexport default UniversalButton;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/UniversalCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12776,12779],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12776,12779],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":560,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":560,"endColumn":15},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":561,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":561,"endColumn":21},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":562,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":562,"endColumn":21}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { forwardRef, HTMLAttributes, ReactNode } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { cn } from '@/lib/utils';\n\n// Card variants using class-variance-authority\nconst cardVariants = cva('rounded-lg transition-all overflow-hidden', {\n  variants: {\n    variant: {\n      // Style variants\n      default: 'bg-zinc-900 border border-zinc-800',\n      bordered: 'bg-transparent border',\n      elevated: 'bg-zinc-900 border border-zinc-800 shadow-md',\n      flat: 'bg-zinc-900',\n      empty:\n        'bg-zinc-900 border border-zinc-800 flex flex-col items-center justify-center text-center',\n    },\n    color: {\n      // Color variants\n      default: 'border-zinc-800',\n      gold: 'border-gold-500/50',\n      danger: 'border-danger-500/50',\n      success: 'border-success-500/50',\n      warning: 'border-warning-500/50',\n      archive: 'border-archive-500/50',\n      gray: 'border-gray-500/50',\n    },\n    size: {\n      sm: 'p-3',\n      md: 'p-4',\n      lg: 'p-6',\n      xl: 'p-8',\n    },\n    hover: {\n      none: '',\n      highlight: 'hover:border-gold-500/70 hover:shadow-gold-sm',\n      scale: 'hover:scale-[1.01] hover:shadow-md',\n      border: 'hover:border-gold-500',\n    },\n    width: {\n      auto: 'w-auto',\n      full: 'w-full',\n      half: 'w-1/2',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n    color: 'default',\n    size: 'md',\n    hover: 'none',\n    width: 'full',\n  },\n});\n\n// Header variants\nconst cardHeaderVariants = cva('flex flex-col space-y-1.5 p-4', {\n  variants: {\n    color: {\n      default: '',\n      gold: 'border-b border-gold-500/50 bg-gold-500/10',\n      danger: 'border-b border-danger-500/50 bg-danger-500/10',\n      success: 'border-b border-success-500/50 bg-success-500/10',\n      warning: 'border-b border-warning-500/50 bg-warning-500/10',\n      archive: 'border-b border-archive-500/50 bg-archive-500/10',\n      gray: 'border-b border-gray-500/50 bg-gray-500/10',\n    },\n  },\n  defaultVariants: {\n    color: 'default',\n  },\n});\n\n// Footer variants\nconst cardFooterVariants = cva('flex items-center p-4 pt-0', {\n  variants: {\n    color: {\n      default: '',\n      gold: 'border-t border-gold-500/50 bg-gold-500/5',\n      danger: 'border-t border-danger-500/50 bg-danger-500/5',\n      success: 'border-t border-success-500/50 bg-success-500/5',\n      warning: 'border-t border-warning-500/50 bg-warning-500/5',\n      archive: 'border-t border-archive-500/50 bg-archive-500/5',\n      gray: 'border-t border-gray-500/50 bg-gray-500/5',\n    },\n    align: {\n      left: 'justify-start',\n      center: 'justify-center',\n      right: 'justify-end',\n      between: 'justify-between',\n    },\n  },\n  defaultVariants: {\n    color: 'default',\n    align: 'between',\n  },\n});\n\n// Props interface for the Card component\nexport interface CardProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'color'>, // Remove color from HTMLAttributes\n    VariantProps<typeof cardVariants> {\n  children: ReactNode;\n  title?: string;\n  subtitle?: string;\n  header?: ReactNode;\n  footer?: ReactNode;\n  headerClassName?: string;\n  footerClassName?: string;\n  contentClassName?: string;\n  footerAlign?: 'left' | 'center' | 'right' | 'between';\n}\n\n// Base Card component with ref forwarding\nconst Card = forwardRef<HTMLDivElement, CardProps>(\n  (\n    {\n      className,\n      variant,\n      color,\n      size,\n      hover,\n      width,\n      children,\n      title,\n      subtitle,\n      header,\n      footer,\n      headerClassName,\n      footerClassName,\n      contentClassName,\n      footerAlign = 'between',\n      ...props\n    },\n    ref\n  ) => {\n    // Determine if we need to render a header\n    const hasHeader = header || title || subtitle;\n\n    // Determine if we need to render a footer\n    const hasFooter = footer !== undefined;\n\n    return (\n      <div\n        className={cn(\n          cardVariants({ variant, color, size, hover, width }),\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {/* Card Header */}\n        {hasHeader && (\n          <div className={cn(cardHeaderVariants({ color }), headerClassName)}>\n            {header || (\n              <>\n                {title && (\n                  <h3 className=\"text-lg font-semibold leading-none tracking-tight\">\n                    {title}\n                  </h3>\n                )}\n                {subtitle && (\n                  <p className=\"text-sm text-zinc-400\">{subtitle}</p>\n                )}\n              </>\n            )}\n          </div>\n        )}\n\n        {/* Card Content */}\n        <div\n          className={cn('p-4', size === 'sm' ? 'p-2' : '', contentClassName)}\n        >\n          {children}\n        </div>\n\n        {/* Card Footer */}\n        {hasFooter && (\n          <div\n            className={cn(\n              cardFooterVariants({ color, align: footerAlign }),\n              footerClassName\n            )}\n          >\n            {footer}\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nCard.displayName = 'Card';\n\n// Props interface for the EmptyStateCard component\nexport interface EmptyStateCardProps extends Omit<CardProps, 'children'> {\n  icon?: ReactNode;\n  title?: string;\n  message?: string;\n  action?: ReactNode;\n  iconSize?: 'sm' | 'md' | 'lg' | 'xl';\n  iconClassName?: string;\n}\n\n// EmptyStateCard component\nconst EmptyStateCard = forwardRef<HTMLDivElement, EmptyStateCardProps>(\n  (\n    {\n      className,\n      variant = 'default',\n      // size = 'lg',\n      icon,\n      title,\n      message,\n      action,\n      iconSize = 'lg',\n      iconClassName,\n      ...props\n    },\n    ref\n  ) => {\n    // Map icon sizes to classes\n    const iconSizeClasses = {\n      sm: 'w-12 h-12 mb-3',\n      md: 'w-16 h-16 mb-4',\n      lg: 'w-20 h-20 mb-5',\n      xl: 'w-24 h-24 mb-6',\n    };\n\n    return (\n      <Card\n        variant={variant}\n        className={cn(\n          'flex flex-col items-center justify-center py-8',\n          className\n        )}\n        ref={ref}\n        {...props}\n      >\n        {icon && (\n          <div\n            className={cn(\n              iconSizeClasses[iconSize],\n              'text-zinc-600',\n              iconClassName\n            )}\n          >\n            {icon}\n          </div>\n        )}\n        {title && (\n          <h3 className=\"text-lg font-medium text-white mb-2\">{title}</h3>\n        )}\n        {message && (\n          <p className=\"text-sm text-zinc-400 max-w-md mb-6\">{message}</p>\n        )}\n        {action && <div className=\"mt-2\">{action}</div>}\n      </Card>\n    );\n  }\n);\n\nEmptyStateCard.displayName = 'EmptyStateCard';\n\n// PlayerStatusCard component for player list items\nexport interface PlayerStatusCardProps extends Omit<CardProps, 'color'> {\n  status?: 'active' | 'archived' | 'inactive';\n  selected?: boolean;\n  rosterStyle?: boolean; // NEW: for roster-specific styling\n}\n\n// PlayerStatusCard component\nconst PlayerStatusCard = forwardRef<HTMLDivElement, PlayerStatusCardProps>(\n  (\n    {\n      className,\n      variant = 'default',\n      status = 'active',\n      selected = false,\n      hover = 'border',\n      rosterStyle = false, // NEW\n      ...props\n    },\n    ref\n  ) => {\n    // Map status to border/text colors\n    const statusClasses = {\n      active: rosterStyle\n        ? 'border-2 border-gold-500 text-gold-500'\n        : 'border-gold-500',\n      archived: rosterStyle\n        ? 'border-2 border-danger-500 text-danger-500'\n        : 'border-danger-500',\n      inactive: rosterStyle\n        ? 'border-2 border-zinc-700 text-zinc-400'\n        : 'border-zinc-700',\n    };\n    const baseRoster = rosterStyle\n      ? 'bg-transparent font-semibold text-lg px-4 py-2 flex items-center justify-center rounded-md whitespace-nowrap overflow-hidden text-ellipsis'\n      : '';\n    return (\n      <Card\n        variant={variant}\n        className={cn(\n          'border-l-4',\n          statusClasses[status],\n          selected && 'bg-zinc-800',\n          baseRoster,\n          className\n        )}\n        hover={hover}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\n\nPlayerStatusCard.displayName = 'PlayerStatusCard';\n\n// Create specialized card components\nconst UniversalCard = {\n  // Base component for custom styling\n  Base: Card,\n\n  // Style variants\n  Default: forwardRef<HTMLDivElement, Omit<CardProps, 'variant'>>(\n    (props, ref) => <Card variant=\"default\" ref={ref} {...props} />\n  ),\n  Bordered: forwardRef<HTMLDivElement, Omit<CardProps, 'variant'>>(\n    (props, ref) => <Card variant=\"bordered\" ref={ref} {...props} />\n  ),\n  Elevated: forwardRef<HTMLDivElement, Omit<CardProps, 'variant'>>(\n    (props, ref) => <Card variant=\"elevated\" ref={ref} {...props} />\n  ),\n  Flat: forwardRef<HTMLDivElement, Omit<CardProps, 'variant'>>((props, ref) => (\n    <Card variant=\"flat\" ref={ref} {...props} />\n  )),\n\n  // Color variants\n  Gold: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>((props, ref) => (\n    <Card color=\"gold\" ref={ref} {...props} />\n  )),\n  Danger: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>((props, ref) => (\n    <Card color=\"danger\" ref={ref} {...props} />\n  )),\n  Success: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>(\n    (props, ref) => <Card color=\"success\" ref={ref} {...props} />\n  ),\n  Warning: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>(\n    (props, ref) => <Card color=\"warning\" ref={ref} {...props} />\n  ),\n  Archive: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>(\n    (props, ref) => <Card color=\"archive\" ref={ref} {...props} />\n  ),\n  Gray: forwardRef<HTMLDivElement, Omit<CardProps, 'color'>>((props, ref) => (\n    <Card color=\"gray\" ref={ref} {...props} />\n  )),\n\n  // Interactive variants\n  Hoverable: forwardRef<HTMLDivElement, Omit<CardProps, 'hover'>>(\n    (props, ref) => <Card hover=\"highlight\" ref={ref} {...props} />\n  ),\n  Scalable: forwardRef<HTMLDivElement, Omit<CardProps, 'hover'>>(\n    (props, ref) => <Card hover=\"scale\" ref={ref} {...props} />\n  ),\n\n  // Size variants\n  Small: forwardRef<HTMLDivElement, Omit<CardProps, 'size'>>((props, ref) => (\n    <Card size=\"sm\" ref={ref} {...props} />\n  )),\n  Medium: forwardRef<HTMLDivElement, Omit<CardProps, 'size'>>((props, ref) => (\n    <Card size=\"md\" ref={ref} {...props} />\n  )),\n  Large: forwardRef<HTMLDivElement, Omit<CardProps, 'size'>>((props, ref) => (\n    <Card size=\"lg\" ref={ref} {...props} />\n  )),\n  ExtraLarge: forwardRef<HTMLDivElement, Omit<CardProps, 'size'>>(\n    (props, ref) => <Card size=\"xl\" ref={ref} {...props} />\n  ),\n\n  // Specialized cards\n  PlayerCard: forwardRef<HTMLDivElement, Omit<CardProps, 'variant' | 'color'>>(\n    (props, ref) => (\n      <Card\n        variant=\"elevated\"\n        color=\"gold\"\n        hover=\"highlight\"\n        ref={ref}\n        {...props}\n      />\n    )\n  ),\n  StatCard: forwardRef<HTMLDivElement, Omit<CardProps, 'variant' | 'size'>>(\n    (props, ref) => <Card variant=\"bordered\" size=\"sm\" ref={ref} {...props} />\n  ),\n\n  // Enhanced empty state components\n  Empty: EmptyStateCard,\n\n  // Player status card for list items\n  PlayerStatus: PlayerStatusCard,\n\n  // Basketball-specific empty states\n  EmptyState: forwardRef<HTMLDivElement, Omit<EmptyStateCardProps, 'variant'>>(\n    (props, ref) => <EmptyStateCard variant=\"default\" ref={ref} {...props} />\n  ),\n\n  // Specific basketball empty states\n  SelectPlayerState: forwardRef<\n    HTMLDivElement,\n    Omit<EmptyStateCardProps, 'title'>\n  >((props, ref) => (\n    <EmptyStateCard\n      title=\"Select a Player to View Their Profile\"\n      iconSize=\"lg\"\n      ref={ref}\n      {...props}\n    />\n  )),\n\n  SelectTeamState: forwardRef<\n    HTMLDivElement,\n    Omit<EmptyStateCardProps, 'title'>\n  >((props, ref) => (\n    <EmptyStateCard\n      title=\"Select a Team to View Their Profile\"\n      iconSize=\"lg\"\n      ref={ref}\n      {...props}\n    />\n  )),\n\n  NoDataState: forwardRef<\n    HTMLDivElement,\n    Omit<EmptyStateCardProps, 'title' | 'message'>\n  >((props, ref) => (\n    <EmptyStateCard\n      title=\"No Data Available\"\n      message=\"There are no items to display at this time.\"\n      iconSize=\"lg\"\n      ref={ref}\n      {...props}\n    />\n  )),\n\n  AddFirstItemState: forwardRef<\n    HTMLDivElement,\n    Omit<EmptyStateCardProps, 'variant'>\n  >((props, ref) => (\n    <EmptyStateCard\n      variant=\"bordered\"\n      color=\"gold\"\n      iconSize=\"lg\"\n      ref={ref}\n      {...props}\n    />\n  )),\n\n  NoObservationsState: forwardRef<\n    HTMLDivElement,\n    Omit<EmptyStateCardProps, 'title' | 'message'>\n  >((props, ref) => (\n    <EmptyStateCard\n      title=\"No Observations Yet\"\n      message=\"This player doesn't have any observations yet.\"\n      iconSize=\"md\"\n      ref={ref}\n      {...props}\n    />\n  )),\n};\n\n// Add display names for all components\nObject.keys(UniversalCard).forEach(key => {\n  if (key !== 'Base') {\n    (UniversalCard as any)[key].displayName = `UniversalCard.${key}`;\n  }\n});\n\n// Card subcomponents\nconst CardHeader = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement> & {\n    color?:\n      | 'default'\n      | 'gold'\n      | 'danger'\n      | 'success'\n      | 'warning'\n      | 'archive'\n      | 'gray';\n  }\n>(({ className, color = 'default', ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(cardHeaderVariants({ color }), className)}\n    {...props}\n  />\n));\nCardHeader.displayName = 'CardHeader';\n\nconst CardFooter = forwardRef<\n  HTMLDivElement,\n  HTMLAttributes<HTMLDivElement> & {\n    color?:\n      | 'default'\n      | 'gold'\n      | 'danger'\n      | 'success'\n      | 'warning'\n      | 'archive'\n      | 'gray';\n    align?: 'left' | 'center' | 'right' | 'between';\n  }\n>(({ className, color = 'default', align = 'between', ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(cardFooterVariants({ color, align }), className)}\n    {...props}\n  />\n));\nCardFooter.displayName = 'CardFooter';\n\nconst CardTitle = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      'text-lg font-semibold leading-none tracking-tight',\n      className\n    )}\n    {...props}\n  />\n));\nCardTitle.displayName = 'CardTitle';\n\nconst CardDescription = forwardRef<\n  HTMLParagraphElement,\n  HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p ref={ref} className={cn('text-sm text-zinc-400', className)} {...props} />\n));\nCardDescription.displayName = 'CardDescription';\n\nconst CardContent = forwardRef<HTMLDivElement, HTMLAttributes<HTMLDivElement>>(\n  ({ className, ...props }, ref) => (\n    <div ref={ref} className={cn('p-4', className)} {...props} />\n  )\n);\nCardContent.displayName = 'CardContent';\n\nexport {\n  UniversalCard,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  cardVariants,\n  cardHeaderVariants,\n  cardFooterVariants,\n};\nexport default UniversalCard;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/UniversalModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'VariantProps' is defined but never used.","line":2,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":2,"endColumn":32},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":315,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":315,"endColumn":28},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":351,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":351,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { ReactNode } from 'react';\nimport { cva, type VariantProps } from 'class-variance-authority';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from './dialog';\nimport { UniversalButton } from './UniversalButton';\n\n// Modal variants using class-variance-authority\nconst modalVariants = cva(\n  'fixed z-50 gap-4 bg-zinc-900 p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-top-[2%] data-[state=open]:slide-in-from-top-[2%] sm:rounded-lg',\n  {\n    variants: {\n      variant: {\n        default: 'border-2 border-gold-500/50',\n        danger: 'border-2 border-danger-500/50',\n        success: 'border-2 border-success-500/50',\n        warning: 'border-2 border-warning-500/50',\n        archive: 'border-2 border-archive-500/50',\n        gray: 'border-2 border-gray-500/50',\n      },\n      size: {\n        sm: 'sm:max-w-sm',\n        md: 'sm:max-w-md',\n        lg: 'sm:max-w-lg',\n        xl: 'sm:max-w-xl',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'md',\n    },\n  }\n);\n\n// Header variants\nconst modalHeaderVariants = cva('flex flex-col space-y-1.5 text-left', {\n  variants: {\n    variant: {\n      default: 'border-b border-gold-500/30 pb-4 mb-4',\n      danger: 'border-b border-danger-500/30 pb-4 mb-4',\n      success: 'border-b border-success-500/30 pb-4 mb-4',\n      warning: 'border-b border-warning-500/30 pb-4 mb-4',\n      archive: 'border-b border-archive-500/30 pb-4 mb-4',\n      gray: 'border-b border-gray-500/30 pb-4 mb-4',\n    },\n  },\n  defaultVariants: {\n    variant: 'default',\n  },\n});\n\n// Title variants\nconst modalTitleVariants = cva(\n  'text-lg font-semibold leading-none tracking-tight',\n  {\n    variants: {\n      variant: {\n        default: 'text-gold-500',\n        danger: 'text-danger-500',\n        success: 'text-success-500',\n        warning: 'text-warning-500',\n        archive: 'text-archive-500',\n        gray: 'text-gray-500',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\n// Footer variants\nconst modalFooterVariants = cva(\n  'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2 mt-4 pt-4',\n  {\n    variants: {\n      variant: {\n        default: 'border-t border-gold-500/30',\n        danger: 'border-t border-danger-500/30',\n        success: 'border-t border-success-500/30',\n        warning: 'border-t border-warning-500/30',\n        archive: 'border-t border-archive-500/30',\n        gray: 'border-t border-gray-500/30',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n    },\n  }\n);\n\n// Base modal props\ninterface BaseModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  description?: string;\n  children?: ReactNode;\n  variant?: 'default' | 'danger' | 'success' | 'warning' | 'archive' | 'gray';\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n  showCloseButton?: boolean;\n}\n\n// Confirmation modal props\ninterface ConfirmationModalProps extends BaseModalProps {\n  onConfirm: () => void;\n  onCancel?: () => void;\n  confirmText?: string;\n  cancelText?: string;\n  loading?: boolean;\n}\n\n// Form modal props\ninterface FormModalProps extends BaseModalProps {\n  onSubmit: () => void;\n  onCancel?: () => void;\n  submitText?: string;\n  cancelText?: string;\n  loading?: boolean;\n  disabled?: boolean;\n}\n\n// Basic modal component\nconst GoldModal = ({\n  open,\n  onOpenChange,\n  title,\n  description,\n  children,\n  variant = 'default',\n  size = 'md',\n  className,\n  showCloseButton = true,\n}: BaseModalProps) => {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent\n        className={cn(modalVariants({ variant, size }), className)}\n        onInteractOutside={e => e.preventDefault()}\n      >\n        <DialogHeader className={modalHeaderVariants({ variant })}>\n          <DialogTitle className={modalTitleVariants({ variant })}>\n            {title}\n          </DialogTitle>\n          {description && (\n            <DialogDescription className=\"text-zinc-400\">\n              {description}\n            </DialogDescription>\n          )}\n        </DialogHeader>\n        {children}\n        {showCloseButton && (\n          <button\n            className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-zinc-900 transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-zinc-700 focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-zinc-800\"\n            onClick={() => onOpenChange(false)}\n          >\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </button>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n};\n\n// Confirmation modal component\nconst ConfirmationModal = ({\n  open,\n  onOpenChange,\n  title,\n  description,\n  onConfirm,\n  onCancel,\n  confirmText = 'Confirm',\n  cancelText = 'Cancel',\n  variant = 'default',\n  loading = false,\n  children,\n  ...props\n}: ConfirmationModalProps & { children?: ReactNode }) => {\n  // Map variant to button variant\n  const buttonVariantMap = {\n    default: 'primary',\n    danger: 'danger',\n    success: 'success',\n    warning: 'warning',\n    archive: 'archive',\n    gray: 'gray',\n  } as const;\n\n  const buttonVariant = buttonVariantMap[variant] || 'primary';\n\n  return (\n    <GoldModal\n      open={open}\n      onOpenChange={onOpenChange}\n      title={title}\n      {...(description ? { description } : {})}\n      variant={variant}\n      showCloseButton={false}\n      {...props}\n    >\n      {children}\n      <DialogFooter className={modalFooterVariants({ variant })}>\n        {onCancel && (\n          <UniversalButton.Ghost\n            onClick={() => {\n              onCancel();\n              onOpenChange(false);\n            }}\n            size=\"sm\"\n          >\n            {cancelText}\n          </UniversalButton.Ghost>\n        )}\n        <UniversalButton.Base\n          variant={buttonVariant}\n          onClick={() => {\n            onConfirm();\n            onOpenChange(false);\n          }}\n          loading={loading}\n          size=\"sm\"\n        >\n          {confirmText}\n        </UniversalButton.Base>\n      </DialogFooter>\n    </GoldModal>\n  );\n};\n\n// Form modal component\nconst FormModal = ({\n  open,\n  onOpenChange,\n  title,\n  description,\n  children,\n  onSubmit,\n  onCancel,\n  submitText = 'Submit',\n  cancelText = 'Cancel',\n  variant = 'default',\n  loading = false,\n  disabled = false,\n  ...props\n}: FormModalProps) => {\n  // Map variant to button variant\n  const buttonVariantMap = {\n    default: 'primary',\n    danger: 'danger',\n    success: 'success',\n    warning: 'warning',\n    archive: 'archive',\n    gray: 'gray',\n  } as const;\n\n  const buttonVariant = buttonVariantMap[variant] || 'primary';\n\n  return (\n    <GoldModal\n      open={open}\n      onOpenChange={onOpenChange}\n      title={title}\n      {...(description ? { description } : {})}\n      variant={variant}\n      showCloseButton={false}\n      {...props}\n    >\n      <form\n        onSubmit={e => {\n          e.preventDefault();\n          onSubmit();\n          onOpenChange(false);\n        }}\n      >\n        {children}\n        <DialogFooter className={modalFooterVariants({ variant })}>\n          {onCancel && (\n            <UniversalButton.Ghost\n              type=\"button\"\n              onClick={() => {\n                onCancel();\n                onOpenChange(false);\n              }}\n              size=\"sm\"\n            >\n              {cancelText}\n            </UniversalButton.Ghost>\n          )}\n          <UniversalButton.Base\n            type=\"submit\"\n            variant={buttonVariant}\n            loading={loading}\n            disabled={disabled}\n            size=\"sm\"\n          >\n            {submitText}\n          </UniversalButton.Base>\n        </DialogFooter>\n      </form>\n    </GoldModal>\n  );\n};\n\n// Unified modal component\nexport const UniversalModal = {\n  // Basic modal for content display\n  Basic: GoldModal,\n\n  // Confirmation modal for user confirmations\n  Confirm: ConfirmationModal,\n\n  // Form modal for data entry\n  Form: FormModal,\n\n  // Unified API for all modal types\n  Dialog: ({\n    type = 'basic',\n    variant = 'default',\n    ...props\n  }: BaseModalProps & {\n    type?: 'basic' | 'confirmation' | 'form';\n  } & Partial<ConfirmationModalProps> &\n    Partial<FormModalProps>) => {\n    switch (type) {\n      case 'confirmation':\n        return (\n          <ConfirmationModal\n            variant={variant}\n            {...(props as ConfirmationModalProps)}\n          />\n        );\n      case 'form':\n        return <FormModal variant={variant} {...(props as FormModalProps)} />;\n      default:\n        return <GoldModal variant={variant} {...(props as BaseModalProps)} />;\n    }\n  },\n};\n\n// Convenience components for common use cases\nexport const Modal = {\n  // Delete confirmation modal\n  Delete: ({\n    open,\n    onOpenChange,\n    title = 'Confirm Deletion',\n    description,\n    onConfirm,\n    onCancel,\n    confirmText = 'Delete',\n    cancelText = 'Cancel',\n    loading = false,\n    children,\n    ...props\n  }: Omit<ConfirmationModalProps, 'variant'> & { children?: ReactNode }) => {\n    return (\n      <UniversalModal.Confirm\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={\n          description ||\n          'Are you sure you want to delete this item? This action cannot be undone.'\n        }\n        onConfirm={onConfirm}\n        {...(onCancel ? { onCancel } : {})}\n        confirmText={confirmText}\n        cancelText={cancelText}\n        variant=\"danger\"\n        loading={loading}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Confirm>\n    );\n  },\n\n  // Archive confirmation modal\n  Archive: ({\n    open,\n    onOpenChange,\n    title = 'Archive Item',\n    description,\n    onConfirm,\n    onCancel,\n    confirmText = 'Archive',\n    cancelText = 'Cancel',\n    loading = false,\n    children,\n    ...props\n  }: Omit<ConfirmationModalProps, 'variant'> & { children?: ReactNode }) => {\n    return (\n      <UniversalModal.Confirm\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={\n          description ||\n          'Are you sure you want to archive this item? You can restore it later.'\n        }\n        onConfirm={onConfirm}\n        {...(onCancel ? { onCancel } : {})}\n        confirmText={confirmText}\n        cancelText={cancelText}\n        variant=\"archive\"\n        loading={loading}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Confirm>\n    );\n  },\n\n  // Success confirmation modal\n  Success: ({\n    open,\n    onOpenChange,\n    title = 'Success',\n    description,\n    onConfirm,\n    onCancel,\n    confirmText = 'Continue',\n    cancelText = 'Close',\n    loading = false,\n    children,\n    ...props\n  }: Omit<ConfirmationModalProps, 'variant'> & { children?: ReactNode }) => {\n    return (\n      <UniversalModal.Confirm\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={description || 'The operation completed successfully.'}\n        onConfirm={onConfirm}\n        {...(onCancel ? { onCancel } : {})}\n        confirmText={confirmText}\n        cancelText={cancelText}\n        variant=\"success\"\n        loading={loading}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Confirm>\n    );\n  },\n\n  // Warning confirmation modal\n  Warning: ({\n    open,\n    onOpenChange,\n    title = 'Warning',\n    description,\n    onConfirm,\n    onCancel,\n    confirmText = 'Proceed',\n    cancelText = 'Cancel',\n    loading = false,\n    children,\n    ...props\n  }: Omit<ConfirmationModalProps, 'variant'> & { children?: ReactNode }) => {\n    return (\n      <UniversalModal.Confirm\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        description={\n          description ||\n          'This action may have unintended consequences. Are you sure you want to proceed?'\n        }\n        onConfirm={onConfirm}\n        {...(onCancel ? { onCancel } : {})}\n        confirmText={confirmText}\n        cancelText={cancelText}\n        variant=\"warning\"\n        loading={loading}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Confirm>\n    );\n  },\n\n  // Add form modal\n  Add: ({\n    open,\n    onOpenChange,\n    title,\n    description,\n    children,\n    onSubmit,\n    onCancel,\n    submitText = 'Add',\n    cancelText = 'Cancel',\n    loading = false,\n    disabled = false,\n    ...props\n  }: Omit<FormModalProps, 'variant'>) => {\n    return (\n      <UniversalModal.Form\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        {...(description ? { description } : {})}\n        onSubmit={onSubmit}\n        {...(onCancel ? { onCancel } : {})}\n        submitText={submitText}\n        cancelText={cancelText}\n        variant=\"default\"\n        loading={loading}\n        disabled={disabled}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Form>\n    );\n  },\n\n  // Edit form modal\n  Edit: ({\n    open,\n    onOpenChange,\n    title,\n    description,\n    children,\n    onSubmit,\n    onCancel,\n    submitText = 'Save Changes',\n    cancelText = 'Cancel',\n    loading = false,\n    disabled = false,\n    ...props\n  }: Omit<FormModalProps, 'variant'>) => {\n    return (\n      <UniversalModal.Form\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        {...(description ? { description } : {})}\n        onSubmit={onSubmit}\n        {...(onCancel ? { onCancel } : {})}\n        submitText={submitText}\n        cancelText={cancelText}\n        variant=\"default\"\n        loading={loading}\n        disabled={disabled}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Form>\n    );\n  },\n\n  // Info modal\n  Info: ({\n    open,\n    onOpenChange,\n    title,\n    description,\n    children,\n    variant = 'default',\n    size = 'md',\n    ...props\n  }: BaseModalProps) => {\n    return (\n      <UniversalModal.Basic\n        open={open}\n        onOpenChange={onOpenChange}\n        title={title}\n        {...(description ? { description } : {})}\n        variant={variant}\n        size={size}\n        {...props}\n      >\n        {children}\n      </UniversalModal.Basic>\n    );\n  },\n};\n\n// Export the main components\nexport default UniversalModal;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":59,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":59,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from 'react';\nimport { Slot } from '@radix-ui/react-slot';\nimport { cva, type VariantProps } from 'class-variance-authority';\n\nimport { cn } from '@/lib/utils';\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          'bg-primary text-primary-foreground shadow-xs hover:bg-primary/90',\n        destructive:\n          'bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\n        outline:\n          'border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\n        secondary:\n          'bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80',\n        ghost:\n          'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\n        link: 'text-primary underline-offset-4 hover:underline',\n      },\n      size: {\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\n        icon: 'size-9',\n      },\n    },\n    defaultVariants: {\n      variant: 'default',\n      size: 'default',\n    },\n  }\n);\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}: React.ComponentProps<'button'> &\n  VariantProps<typeof buttonVariants> & {\n    asChild?: boolean;\n  }) {\n  const Comp = asChild ? Slot : 'button';\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props}\n    />\n  );\n}\n\nexport { Button, buttonVariants };\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/drizzle.config.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":8,"column":10,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":8,"endColumn":35}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from 'drizzle-kit';\n\nexport default {\n  schema: './lib/db/schema.ts',\n  out: './lib/db/migrations',\n  dialect: 'postgresql',\n  dbCredentials: {\n    url: process.env.POSTGRES_URL!,\n  },\n  strict: true,\n  verbose: true,\n} satisfies Config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/fix-lint-patterns.js","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'path' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":12},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":69,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":69,"endColumn":16,"suggestions":[{"fix":{"range":[2190,2233],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":85,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":85,"endColumn":16,"suggestions":[{"fix":{"range":[2573,2607],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":87,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":87,"endColumn":16,"suggestions":[{"fix":{"range":[2623,2669],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":94,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":94,"endColumn":12,"suggestions":[{"fix":{"range":[2738,2780],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":95,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":95,"endColumn":12,"suggestions":[{"fix":{"range":[2781,2808],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":96,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":96,"endColumn":12,"suggestions":[{"fix":{"range":[2809,2854],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":12,"suggestions":[{"fix":{"range":[2855,2917],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":98,"column":1,"nodeType":"MemberExpression","messageId":"unexpected","endLine":98,"endColumn":12,"suggestions":[{"fix":{"range":[2918,2987],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\n\n// Common patterns to fix across dashboard pages\nconst patterns = [\n  // Remove unused pagination variables\n  {\n    pattern: /const \\[_?page, setPage\\] = useState\\(1\\);/g,\n    replacement:\n      'const [_page] = useState(1); // unused - kept for future implementation',\n  },\n  {\n    pattern: /const _?pageSize = \\d+;/g,\n    replacement:\n      'const [_pageSize] = useState(5); // unused - kept for future implementation',\n  },\n  // Remove unused filter variables\n  {\n    pattern: /const _?filtered\\w+ = .+;/g,\n    replacement:\n      '// const _filteredX = ...; // unused - kept for future implementation',\n  },\n  // Remove unused search/filter state\n  {\n    pattern: /const \\[searchTerm, setSearchTerm\\] = useState\\(''\\);/g,\n    replacement:\n      \"const [_searchTerm, _setSearchTerm] = useState(''); // unused - kept for future implementation\",\n  },\n  {\n    pattern: /const \\[teamFilter, setTeamFilter\\] = useState\\('all'\\);/g,\n    replacement:\n      \"const [_teamFilter, _setTeamFilter] = useState('all'); // unused - kept for future implementation\",\n  },\n  // Remove unused imports\n  {\n    pattern: /import \\{ [^}]*Edit[^}]* \\} from 'lucide-react';/g,\n    replacement: \"// import { Edit } from 'lucide-react'; // unused\",\n  },\n  {\n    pattern: /import \\{ [^}]*Trash2[^}]* \\} from 'lucide-react';/g,\n    replacement: \"// import { Trash2 } from 'lucide-react'; // unused\",\n  },\n  {\n    pattern: /import \\{ [^}]*Tag[^}]* \\} from 'lucide-react';/g,\n    replacement: \"// import { Tag } from 'lucide-react'; // unused\",\n  },\n  {\n    pattern: /import \\{ [^}]*BarChart3[^}]* \\} from 'lucide-react';/g,\n    replacement: \"// import { BarChart3 } from 'lucide-react'; // unused\",\n  },\n];\n\n// Dashboard pages to fix\nconst dashboardPages = [\n  'app/(dashboard)/analytics/page.tsx',\n  'app/(dashboard)/coaches/page.tsx',\n  'app/(dashboard)/development-plans/page.tsx',\n  'app/(dashboard)/drills/page.tsx',\n  'app/(dashboard)/observations/page.tsx',\n  'app/(dashboard)/players/page.tsx',\n  'app/(dashboard)/sessions/page.tsx',\n  'app/(dashboard)/teams/page.tsx',\n];\n\nfunction fixFile(filePath) {\n  if (!fs.existsSync(filePath)) {\n    console.log(`File not found: ${filePath}`);\n    return;\n  }\n\n  let content = fs.readFileSync(filePath, 'utf8');\n  let modified = false;\n\n  patterns.forEach(({ pattern, replacement }) => {\n    if (pattern.test(content)) {\n      content = content.replace(pattern, replacement);\n      modified = true;\n    }\n  });\n\n  if (modified) {\n    fs.writeFileSync(filePath, content, 'utf8');\n    console.log(`Fixed: ${filePath}`);\n  } else {\n    console.log(`No changes needed: ${filePath}`);\n  }\n}\n\n// Fix all dashboard pages\ndashboardPages.forEach(fixFile);\n\nconsole.log('\\nPattern fixes completed!');\nconsole.log('Next steps:');\nconsole.log('1. Run: npm run lint -- --fix');\nconsole.log('2. Manually fix remaining TypeScript any types');\nconsole.log('3. Break down large functions into smaller components');\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/auth/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[276,279],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[276,279],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[334,337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[334,337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[339,342],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[339,342],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[463,466],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[463,466],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[468,471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[468,471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[864,867],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[864,867],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[869,872],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[869,872],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1022,1025],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1022,1025],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1550,1553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1550,1553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { z } from 'zod';\nimport { Person } from '@/lib/db/schema';\nimport { getTeamForUser, getUser } from '@/lib/db/queries';\nimport { redirect } from 'next/navigation';\n\nexport type ActionState = {\n  error?: string;\n  success?: boolean;\n  message?: string;\n  [key: string]: any;\n};\n\ntype ValidatedActionFunction<S extends z.ZodType<any, any>, T> = (\n  data: z.infer<S>,\n  formData: FormData\n) => Promise<T>;\n\nexport function validatedAction<S extends z.ZodType<any, any>, T>(\n  schema: S,\n  action: ValidatedActionFunction<S, T>\n) {\n  return async (prevState: ActionState, formData: FormData) => {\n    const result = schema.safeParse(Object.fromEntries(formData));\n    if (!result.success) {\n      return { error: result.error.errors[0].message };\n    }\n\n    return action(result.data, formData);\n  };\n}\n\ntype ValidatedActionWithUserFunction<S extends z.ZodType<any, any>, T> = (\n  data: z.infer<S>,\n  formData: FormData,\n  user: Person\n) => Promise<T>;\n\nexport function validatedActionWithUser<S extends z.ZodType<any, any>, T>(\n  schema: S,\n  action: ValidatedActionWithUserFunction<S, T>\n) {\n  return async (prevState: ActionState, formData: FormData) => {\n    const user = await getUser();\n    if (!user) {\n      throw new Error('User is not authenticated');\n    }\n\n    const result = schema.safeParse(Object.fromEntries(formData));\n    if (!result.success) {\n      return { error: result.error.errors[0].message };\n    }\n\n    return action(result.data, formData, user);\n  };\n}\n\ntype ActionWithTeamFunction<T> = (\n  formData: FormData,\n  team: any // TODO: Define proper team type when schema is updated\n) => Promise<T>;\n\nexport function withTeam<T>(action: ActionWithTeamFunction<T>) {\n  return async (formData: FormData): Promise<T> => {\n    const user = await getUser();\n    if (!user) {\n      redirect('/sign-in');\n    }\n\n    const team = await getTeamForUser();\n    if (!team) {\n      throw new Error('Team not found');\n    }\n\n    return action(formData, team);\n  };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/auth/session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/drizzle.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/migrations/relations.ts","messages":[{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonRoles_personId'.","line":118,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":118,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreIntentions_personId'.","line":124,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":124,"endColumn":30},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonGroups_payerId'.","line":136,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":136,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonGroups_payerId'.","line":139,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":139,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonGroups_personId'.","line":142,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":142,"endColumn":32},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreActions_personId'.","line":148,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":148,"endColumn":27},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreReflections_personId'.","line":154,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":154,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpbcPersonRoles_personId'.","line":163,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":163,"endColumn":29},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonRoles_organizationId'.","line":222,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":222,"endColumn":37},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonGroups_organizationId'.","line":230,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":230,"endColumn":38},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpbcPersonRoles_organizationId'.","line":237,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":237,"endColumn":35},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":288,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":288,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreOrganization_organizationId'.","line":293,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":293,"endColumn":38},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":314,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":314,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreGroup_groupId'.","line":319,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":319,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreActions_intentionId'.","line":327,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":327,"endColumn":30},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreReflections_intentionId'.","line":333,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":333,"endColumn":34},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreIntentions_groupId'.","line":343,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":343,"endColumn":27},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePersonGroups_groupId'.","line":350,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":350,"endColumn":29},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreActions_groupId'.","line":356,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":356,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreReflections_groupId'.","line":362,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":362,"endColumn":28},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreGroup_groupId'.","line":461,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":461,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_payerId'.","line":466,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":466,"endColumn":25},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_payerId'.","line":471,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":471,"endColumn":25},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":476,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":476,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreOrganization_organizationId'.","line":485,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":485,"endColumn":38},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreIntention_intentionId'.","line":511,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":511,"endColumn":32},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":516,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":516,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreGroup_groupId'.","line":521,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":521,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreReflections_actionId'.","line":529,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":529,"endColumn":31},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreAction_actionId'.","line":558,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":558,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreIntention_intentionId'.","line":563,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":563,"endColumn":32},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":568,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":568,"endColumn":26},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreGroup_groupId'.","line":573,"column":5,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":573,"endColumn":24},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCoreOrganization_organizationId'.","line":592,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":592,"endColumn":36},{"ruleId":"no-dupe-keys","severity":2,"message":"Duplicate key 'mpCorePerson_personId'.","line":602,"column":3,"nodeType":"ObjectExpression","messageId":"unexpected","endLine":602,"endColumn":24}],"suppressedMessages":[],"errorCount":36,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { relations } from 'drizzle-orm/relations';\nimport {\n  mpbcGroup,\n  mpbcPersonGroup,\n  mpbcPerson,\n  mpCorePerson,\n  mpCoreOrganizations,\n  infrastructureInvites,\n  infrastructureMemberships,\n  usersInAuth,\n  mpCorePersonRole,\n  mpCoreGroup,\n  mpCoreIntentions,\n  infrastructureParticipationLog,\n  infrastructureSessions,\n  infrastructureProgramCycle,\n  mpCorePersonGroup,\n  mpCoreActions,\n  mpCoreReflections,\n  mpbcPersonRole,\n  mpbcDevelopmentPlan,\n  mpbcSeason,\n  infrastructureSystemSettings,\n  infrastructureDashboardConfig,\n  infrastructureFileStorage,\n  infrastructureNotificationQueue,\n  mpbcObservations,\n  mpbcPlayerSkillChallenge,\n  mpbcSkillTag,\n  mpbcPracticeSession,\n  mpbcSessionParticipation,\n  infrastructureActivityLogs,\n  mpbcPracticeTemplatesEnhanced,\n  mpbcTemplateUsageLog,\n  mpbcCorePersonProfile,\n} from './schema';\n\nexport const mpbcPersonGroupRelations = relations(\n  mpbcPersonGroup,\n  ({ one }) => ({\n    mpbcGroup: one(mpbcGroup, {\n      fields: [mpbcPersonGroup.groupId],\n      references: [mpbcGroup.id],\n    }),\n    mpbcPerson: one(mpbcPerson, {\n      fields: [mpbcPersonGroup.personId],\n      references: [mpbcPerson.id],\n    }),\n  })\n);\n\nexport const mpbcGroupRelations = relations(mpbcGroup, ({ one, many }) => ({\n  mpbcPersonGroups: many(mpbcPersonGroup),\n  mpCoreGroup: one(mpCoreGroup, {\n    fields: [mpbcGroup.mpCoreGroupId],\n    references: [mpCoreGroup.id],\n  }),\n  mpbcPerson: one(mpbcPerson, {\n    fields: [mpbcGroup.leadPersonId],\n    references: [mpbcPerson.id],\n  }),\n}));\n\nexport const mpbcPersonRelations = relations(mpbcPerson, ({ one, many }) => ({\n  mpbcPersonGroups: many(mpbcPersonGroup),\n  mpCorePerson_mpCorePersonId: one(mpCorePerson, {\n    fields: [mpbcPerson.mpCorePersonId],\n    references: [mpCorePerson.id],\n    relationName: 'mpbcPerson_mpCorePersonId_mpCorePerson_id',\n  }),\n  mpCorePerson_id: one(mpCorePerson, {\n    fields: [mpbcPerson.id],\n    references: [mpCorePerson.id],\n    relationName: 'mpbcPerson_id_mpCorePerson_id',\n  }),\n  mpbcDevelopmentPlans_personId: many(mpbcDevelopmentPlan, {\n    relationName: 'mpbcDevelopmentPlan_personId_mpbcPerson_id',\n  }),\n  mpbcDevelopmentPlans_playerId: many(mpbcDevelopmentPlan, {\n    relationName: 'mpbcDevelopmentPlan_playerId_mpbcPerson_id',\n  }),\n  mpbcObservations_personId: many(mpbcObservations, {\n    relationName: 'mpbcObservations_personId_mpbcPerson_id',\n  }),\n  mpbcObservations_observerId: many(mpbcObservations, {\n    relationName: 'mpbcObservations_observerId_mpbcPerson_id',\n  }),\n  mpbcObservations_playerId: many(mpbcObservations, {\n    relationName: 'mpbcObservations_playerId_mpbcPerson_id',\n  }),\n  mpbcGroups: many(mpbcGroup),\n  mpbcPlayerSkillChallenges_createdBy: many(mpbcPlayerSkillChallenge, {\n    relationName: 'mpbcPlayerSkillChallenge_createdBy_mpbcPerson_id',\n  }),\n  mpbcPlayerSkillChallenges_playerId: many(mpbcPlayerSkillChallenge, {\n    relationName: 'mpbcPlayerSkillChallenge_playerId_mpbcPerson_id',\n  }),\n  mpbcPlayerSkillChallenges_updatedBy: many(mpbcPlayerSkillChallenge, {\n    relationName: 'mpbcPlayerSkillChallenge_updatedBy_mpbcPerson_id',\n  }),\n}));\n\nexport const mpCorePersonRelations = relations(\n  mpCorePerson,\n  ({ one, many }) => ({\n    mpbcPeople_mpCorePersonId: many(mpbcPerson, {\n      relationName: 'mpbcPerson_mpCorePersonId_mpCorePerson_id',\n    }),\n    mpbcPeople_id: many(mpbcPerson, {\n      relationName: 'mpbcPerson_id_mpCorePerson_id',\n    }),\n    mpCorePersonRoles_createdBy: many(mpCorePersonRole, {\n      relationName: 'mpCorePersonRole_createdBy_mpCorePerson_id',\n    }),\n    mpCorePersonRoles_personId: many(mpCorePersonRole, {\n      relationName: 'mpCorePersonRole_personId_mpCorePerson_id',\n    }),\n    mpCorePersonRoles_personId: many(mpCorePersonRole, {\n      relationName: 'mpCorePersonRole_personId_mpCorePerson_id',\n    }),\n    mpCoreIntentions_personId: many(mpCoreIntentions, {\n      relationName: 'mpCoreIntentions_personId_mpCorePerson_id',\n    }),\n    mpCoreIntentions_personId: many(mpCoreIntentions, {\n      relationName: 'mpCoreIntentions_personId_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_createdBy: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_createdBy_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_payerId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_personId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_personId_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_payerId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_payerId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePersonGroups_personId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_personId_mpCorePerson_id',\n    }),\n    mpCoreActions_personId: many(mpCoreActions, {\n      relationName: 'mpCoreActions_personId_mpCorePerson_id',\n    }),\n    mpCoreActions_personId: many(mpCoreActions, {\n      relationName: 'mpCoreActions_personId_mpCorePerson_id',\n    }),\n    mpCoreReflections_personId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_personId_mpCorePerson_id',\n    }),\n    mpCoreReflections_personId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_personId_mpCorePerson_id',\n    }),\n    mpbcPersonRoles_createdBy: many(mpbcPersonRole, {\n      relationName: 'mpbcPersonRole_createdBy_mpCorePerson_id',\n    }),\n    mpbcPersonRoles_personId: many(mpbcPersonRole, {\n      relationName: 'mpbcPersonRole_personId_mpCorePerson_id',\n    }),\n    mpbcPersonRoles_personId: many(mpbcPersonRole, {\n      relationName: 'mpbcPersonRole_personId_mpCorePerson_id',\n    }),\n    mpCoreGroups_createdBy: many(mpCoreGroup, {\n      relationName: 'mpCoreGroup_createdBy_mpCorePerson_id',\n    }),\n    mpCoreGroups_leadPersonId: many(mpCoreGroup, {\n      relationName: 'mpCoreGroup_leadPersonId_mpCorePerson_id',\n    }),\n    mpCoreGroups_updatedBy: many(mpCoreGroup, {\n      relationName: 'mpCoreGroup_updatedBy_mpCorePerson_id',\n    }),\n    infrastructureActivityLogs: many(infrastructureActivityLogs),\n    mpCorePerson_createdBy: one(mpCorePerson, {\n      fields: [mpCorePerson.createdBy],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePerson_createdBy_mpCorePerson_id',\n    }),\n    mpCorePeople_createdBy: many(mpCorePerson, {\n      relationName: 'mpCorePerson_createdBy_mpCorePerson_id',\n    }),\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [mpCorePerson.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n    mpCorePerson_updatedBy: one(mpCorePerson, {\n      fields: [mpCorePerson.updatedBy],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePerson_updatedBy_mpCorePerson_id',\n    }),\n    mpCorePeople_updatedBy: many(mpCorePerson, {\n      relationName: 'mpCorePerson_updatedBy_mpCorePerson_id',\n    }),\n    usersInAuth: one(usersInAuth, {\n      fields: [mpCorePerson.authUid],\n      references: [usersInAuth.id],\n    }),\n    mpbcCorePersonProfiles: many(mpbcCorePersonProfile),\n  })\n);\n\nexport const infrastructureInvitesRelations = relations(\n  infrastructureInvites,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureInvites.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const mpCoreOrganizationsRelations = relations(\n  mpCoreOrganizations,\n  ({ many }) => ({\n    infrastructureInvites: many(infrastructureInvites),\n    infrastructureMemberships: many(infrastructureMemberships),\n    mpCorePersonRoles_organizationId: many(mpCorePersonRole, {\n      relationName: 'mpCorePersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n    mpCorePersonRoles_organizationId: many(mpCorePersonRole, {\n      relationName: 'mpCorePersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n    infrastructureParticipationLogs: many(infrastructureParticipationLog),\n    infrastructureSessions: many(infrastructureSessions),\n    mpCorePersonGroups_organizationId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_organizationId_mpCoreOrganizations_id',\n    }),\n    mpCorePersonGroups_organizationId: many(mpCorePersonGroup, {\n      relationName: 'mpCorePersonGroup_organizationId_mpCoreOrganizations_id',\n    }),\n    infrastructureProgramCycles: many(infrastructureProgramCycle),\n    mpbcPersonRoles_organizationId: many(mpbcPersonRole, {\n      relationName: 'mpbcPersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n    mpbcPersonRoles_organizationId: many(mpbcPersonRole, {\n      relationName: 'mpbcPersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n    infrastructureSystemSettings: many(infrastructureSystemSettings),\n    infrastructureDashboardConfigs: many(infrastructureDashboardConfig),\n    infrastructureFileStorages: many(infrastructureFileStorage),\n    infrastructureNotificationQueues: many(infrastructureNotificationQueue),\n    mpCoreGroups: many(mpCoreGroup),\n    infrastructureActivityLogs: many(infrastructureActivityLogs),\n    mpCorePeople: many(mpCorePerson),\n    mpbcCorePersonProfiles: many(mpbcCorePersonProfile),\n  })\n);\n\nexport const infrastructureMembershipsRelations = relations(\n  infrastructureMemberships,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureMemberships.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n    usersInAuth: one(usersInAuth, {\n      fields: [infrastructureMemberships.userId],\n      references: [usersInAuth.id],\n    }),\n  })\n);\n\nexport const usersInAuthRelations = relations(usersInAuth, ({ many }) => ({\n  infrastructureMemberships: many(infrastructureMemberships),\n  mpCorePeople: many(mpCorePerson),\n}));\n\nexport const mpCorePersonRoleRelations = relations(\n  mpCorePersonRole,\n  ({ one }) => ({\n    mpCorePerson_createdBy: one(mpCorePerson, {\n      fields: [mpCorePersonRole.createdBy],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonRole_createdBy_mpCorePerson_id',\n    }),\n    mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n      fields: [mpCorePersonRole.organizationId],\n      references: [mpCoreOrganizations.id],\n      relationName: 'mpCorePersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCorePersonRole.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonRole_personId_mpCorePerson_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCorePersonRole.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonRole_personId_mpCorePerson_id',\n    }),\n    mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n      fields: [mpCorePersonRole.organizationId],\n      references: [mpCoreOrganizations.id],\n      relationName: 'mpCorePersonRole_organizationId_mpCoreOrganizations_id',\n    }),\n  })\n);\n\nexport const mpCoreIntentionsRelations = relations(\n  mpCoreIntentions,\n  ({ one, many }) => ({\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreIntentions.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreIntentions_groupId_mpCoreGroup_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreIntentions.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreIntentions_personId_mpCorePerson_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreIntentions.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreIntentions_personId_mpCorePerson_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreIntentions.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreIntentions_groupId_mpCoreGroup_id',\n    }),\n    mpCoreActions_intentionId: many(mpCoreActions, {\n      relationName: 'mpCoreActions_intentionId_mpCoreIntentions_id',\n    }),\n    mpCoreActions_intentionId: many(mpCoreActions, {\n      relationName: 'mpCoreActions_intentionId_mpCoreIntentions_id',\n    }),\n    mpCoreReflections_intentionId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_intentionId_mpCoreIntentions_id',\n    }),\n    mpCoreReflections_intentionId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_intentionId_mpCoreIntentions_id',\n    }),\n  })\n);\n\nexport const mpCoreGroupRelations = relations(mpCoreGroup, ({ one, many }) => ({\n  mpCoreIntentions_groupId: many(mpCoreIntentions, {\n    relationName: 'mpCoreIntentions_groupId_mpCoreGroup_id',\n  }),\n  mpCoreIntentions_groupId: many(mpCoreIntentions, {\n    relationName: 'mpCoreIntentions_groupId_mpCoreGroup_id',\n  }),\n  infrastructureSessions: many(infrastructureSessions),\n  mpCorePersonGroups_groupId: many(mpCorePersonGroup, {\n    relationName: 'mpCorePersonGroup_groupId_mpCoreGroup_id',\n  }),\n  mpCorePersonGroups_groupId: many(mpCorePersonGroup, {\n    relationName: 'mpCorePersonGroup_groupId_mpCoreGroup_id',\n  }),\n  mpCoreActions_groupId: many(mpCoreActions, {\n    relationName: 'mpCoreActions_groupId_mpCoreGroup_id',\n  }),\n  mpCoreActions_groupId: many(mpCoreActions, {\n    relationName: 'mpCoreActions_groupId_mpCoreGroup_id',\n  }),\n  mpCoreReflections_groupId: many(mpCoreReflections, {\n    relationName: 'mpCoreReflections_groupId_mpCoreGroup_id',\n  }),\n  mpCoreReflections_groupId: many(mpCoreReflections, {\n    relationName: 'mpCoreReflections_groupId_mpCoreGroup_id',\n  }),\n  mpbcDevelopmentPlans: many(mpbcDevelopmentPlan),\n  mpCorePerson_createdBy: one(mpCorePerson, {\n    fields: [mpCoreGroup.createdBy],\n    references: [mpCorePerson.id],\n    relationName: 'mpCoreGroup_createdBy_mpCorePerson_id',\n  }),\n  mpCorePerson_leadPersonId: one(mpCorePerson, {\n    fields: [mpCoreGroup.leadPersonId],\n    references: [mpCorePerson.id],\n    relationName: 'mpCoreGroup_leadPersonId_mpCorePerson_id',\n  }),\n  mpCoreOrganization: one(mpCoreOrganizations, {\n    fields: [mpCoreGroup.organizationId],\n    references: [mpCoreOrganizations.id],\n  }),\n  mpCorePerson_updatedBy: one(mpCorePerson, {\n    fields: [mpCoreGroup.updatedBy],\n    references: [mpCorePerson.id],\n    relationName: 'mpCoreGroup_updatedBy_mpCorePerson_id',\n  }),\n  mpbcGroups: many(mpbcGroup),\n}));\n\nexport const infrastructureParticipationLogRelations = relations(\n  infrastructureParticipationLog,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureParticipationLog.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n    infrastructureSession: one(infrastructureSessions, {\n      fields: [infrastructureParticipationLog.sessionId],\n      references: [infrastructureSessions.id],\n    }),\n  })\n);\n\nexport const infrastructureSessionsRelations = relations(\n  infrastructureSessions,\n  ({ one, many }) => ({\n    infrastructureParticipationLogs: many(infrastructureParticipationLog),\n    mpCoreGroup: one(mpCoreGroup, {\n      fields: [infrastructureSessions.groupId],\n      references: [mpCoreGroup.id],\n    }),\n    infrastructureProgramCycle: one(infrastructureProgramCycle, {\n      fields: [infrastructureSessions.cycleId],\n      references: [infrastructureProgramCycle.id],\n    }),\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureSessions.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const infrastructureProgramCycleRelations = relations(\n  infrastructureProgramCycle,\n  ({ one, many }) => ({\n    infrastructureSessions: many(infrastructureSessions),\n    mpCorePersonGroups: many(mpCorePersonGroup),\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureProgramCycle.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const mpCorePersonGroupRelations = relations(\n  mpCorePersonGroup,\n  ({ one }) => ({\n    mpCorePerson_createdBy: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.createdBy],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_createdBy_mpCorePerson_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCorePersonGroup.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCorePersonGroup_groupId_mpCoreGroup_id',\n    }),\n    mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n      fields: [mpCorePersonGroup.organizationId],\n      references: [mpCoreOrganizations.id],\n      relationName: 'mpCorePersonGroup_organizationId_mpCoreOrganizations_id',\n    }),\n    mpCorePerson_payerId: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.payerId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_personId_mpCorePerson_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCorePersonGroup.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCorePersonGroup_groupId_mpCoreGroup_id',\n    }),\n    mpCorePerson_payerId: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.payerId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePerson_payerId: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.payerId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_payerId_mpCorePerson_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCorePersonGroup.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCorePersonGroup_personId_mpCorePerson_id',\n    }),\n    infrastructureProgramCycle: one(infrastructureProgramCycle, {\n      fields: [mpCorePersonGroup.cycleId],\n      references: [infrastructureProgramCycle.id],\n    }),\n    mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n      fields: [mpCorePersonGroup.organizationId],\n      references: [mpCoreOrganizations.id],\n      relationName: 'mpCorePersonGroup_organizationId_mpCoreOrganizations_id',\n    }),\n  })\n);\n\nexport const mpCoreActionsRelations = relations(\n  mpCoreActions,\n  ({ one, many }) => ({\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreActions.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreActions_groupId_mpCoreGroup_id',\n    }),\n    mpCoreIntention_intentionId: one(mpCoreIntentions, {\n      fields: [mpCoreActions.intentionId],\n      references: [mpCoreIntentions.id],\n      relationName: 'mpCoreActions_intentionId_mpCoreIntentions_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreActions.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreActions_personId_mpCorePerson_id',\n    }),\n    mpCoreIntention_intentionId: one(mpCoreIntentions, {\n      fields: [mpCoreActions.intentionId],\n      references: [mpCoreIntentions.id],\n      relationName: 'mpCoreActions_intentionId_mpCoreIntentions_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreActions.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreActions_personId_mpCorePerson_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreActions.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreActions_groupId_mpCoreGroup_id',\n    }),\n    mpCoreReflections_actionId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_actionId_mpCoreActions_id',\n    }),\n    mpCoreReflections_actionId: many(mpCoreReflections, {\n      relationName: 'mpCoreReflections_actionId_mpCoreActions_id',\n    }),\n  })\n);\n\nexport const mpCoreReflectionsRelations = relations(\n  mpCoreReflections,\n  ({ one }) => ({\n    mpCoreAction_actionId: one(mpCoreActions, {\n      fields: [mpCoreReflections.actionId],\n      references: [mpCoreActions.id],\n      relationName: 'mpCoreReflections_actionId_mpCoreActions_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreReflections.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreReflections_groupId_mpCoreGroup_id',\n    }),\n    mpCoreIntention_intentionId: one(mpCoreIntentions, {\n      fields: [mpCoreReflections.intentionId],\n      references: [mpCoreIntentions.id],\n      relationName: 'mpCoreReflections_intentionId_mpCoreIntentions_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreReflections.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreReflections_personId_mpCorePerson_id',\n    }),\n    mpCoreAction_actionId: one(mpCoreActions, {\n      fields: [mpCoreReflections.actionId],\n      references: [mpCoreActions.id],\n      relationName: 'mpCoreReflections_actionId_mpCoreActions_id',\n    }),\n    mpCoreIntention_intentionId: one(mpCoreIntentions, {\n      fields: [mpCoreReflections.intentionId],\n      references: [mpCoreIntentions.id],\n      relationName: 'mpCoreReflections_intentionId_mpCoreIntentions_id',\n    }),\n    mpCorePerson_personId: one(mpCorePerson, {\n      fields: [mpCoreReflections.personId],\n      references: [mpCorePerson.id],\n      relationName: 'mpCoreReflections_personId_mpCorePerson_id',\n    }),\n    mpCoreGroup_groupId: one(mpCoreGroup, {\n      fields: [mpCoreReflections.groupId],\n      references: [mpCoreGroup.id],\n      relationName: 'mpCoreReflections_groupId_mpCoreGroup_id',\n    }),\n  })\n);\n\nexport const mpbcPersonRoleRelations = relations(mpbcPersonRole, ({ one }) => ({\n  mpCorePerson_createdBy: one(mpCorePerson, {\n    fields: [mpbcPersonRole.createdBy],\n    references: [mpCorePerson.id],\n    relationName: 'mpbcPersonRole_createdBy_mpCorePerson_id',\n  }),\n  mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n    fields: [mpbcPersonRole.organizationId],\n    references: [mpCoreOrganizations.id],\n    relationName: 'mpbcPersonRole_organizationId_mpCoreOrganizations_id',\n  }),\n  mpCoreOrganization_organizationId: one(mpCoreOrganizations, {\n    fields: [mpbcPersonRole.organizationId],\n    references: [mpCoreOrganizations.id],\n    relationName: 'mpbcPersonRole_organizationId_mpCoreOrganizations_id',\n  }),\n  mpCorePerson_personId: one(mpCorePerson, {\n    fields: [mpbcPersonRole.personId],\n    references: [mpCorePerson.id],\n    relationName: 'mpbcPersonRole_personId_mpCorePerson_id',\n  }),\n  mpCorePerson_personId: one(mpCorePerson, {\n    fields: [mpbcPersonRole.personId],\n    references: [mpCorePerson.id],\n    relationName: 'mpbcPersonRole_personId_mpCorePerson_id',\n  }),\n}));\n\nexport const mpbcDevelopmentPlanRelations = relations(\n  mpbcDevelopmentPlan,\n  ({ one, many }) => ({\n    mpbcPerson_personId: one(mpbcPerson, {\n      fields: [mpbcDevelopmentPlan.personId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcDevelopmentPlan_personId_mpbcPerson_id',\n    }),\n    mpCoreGroup: one(mpCoreGroup, {\n      fields: [mpbcDevelopmentPlan.groupId],\n      references: [mpCoreGroup.id],\n    }),\n    mpbcPerson_playerId: one(mpbcPerson, {\n      fields: [mpbcDevelopmentPlan.playerId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcDevelopmentPlan_playerId_mpbcPerson_id',\n    }),\n    mpbcSeason: one(mpbcSeason, {\n      fields: [mpbcDevelopmentPlan.seasonId],\n      references: [mpbcSeason.id],\n    }),\n    mpbcObservations: many(mpbcObservations),\n    mpbcPlayerSkillChallenges: many(mpbcPlayerSkillChallenge),\n  })\n);\n\nexport const mpbcSeasonRelations = relations(mpbcSeason, ({ many }) => ({\n  mpbcDevelopmentPlans: many(mpbcDevelopmentPlan),\n}));\n\nexport const infrastructureSystemSettingsRelations = relations(\n  infrastructureSystemSettings,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureSystemSettings.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const infrastructureDashboardConfigRelations = relations(\n  infrastructureDashboardConfig,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureDashboardConfig.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const infrastructureFileStorageRelations = relations(\n  infrastructureFileStorage,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureFileStorage.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const infrastructureNotificationQueueRelations = relations(\n  infrastructureNotificationQueue,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureNotificationQueue.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n  })\n);\n\nexport const mpbcObservationsRelations = relations(\n  mpbcObservations,\n  ({ one }) => ({\n    mpbcDevelopmentPlan: one(mpbcDevelopmentPlan, {\n      fields: [mpbcObservations.developmentPlanId],\n      references: [mpbcDevelopmentPlan.id],\n    }),\n    mpbcPerson_personId: one(mpbcPerson, {\n      fields: [mpbcObservations.personId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcObservations_personId_mpbcPerson_id',\n    }),\n    mpbcPerson_observerId: one(mpbcPerson, {\n      fields: [mpbcObservations.observerId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcObservations_observerId_mpbcPerson_id',\n    }),\n    mpbcPerson_playerId: one(mpbcPerson, {\n      fields: [mpbcObservations.playerId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcObservations_playerId_mpbcPerson_id',\n    }),\n  })\n);\n\nexport const mpbcPlayerSkillChallengeRelations = relations(\n  mpbcPlayerSkillChallenge,\n  ({ one }) => ({\n    mpbcPerson_createdBy: one(mpbcPerson, {\n      fields: [mpbcPlayerSkillChallenge.createdBy],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcPlayerSkillChallenge_createdBy_mpbcPerson_id',\n    }),\n    mpbcDevelopmentPlan: one(mpbcDevelopmentPlan, {\n      fields: [mpbcPlayerSkillChallenge.developmentPlanId],\n      references: [mpbcDevelopmentPlan.id],\n    }),\n    mpbcPerson_playerId: one(mpbcPerson, {\n      fields: [mpbcPlayerSkillChallenge.playerId],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcPlayerSkillChallenge_playerId_mpbcPerson_id',\n    }),\n    mpbcSkillTag: one(mpbcSkillTag, {\n      fields: [mpbcPlayerSkillChallenge.skillTagId],\n      references: [mpbcSkillTag.id],\n    }),\n    mpbcPerson_updatedBy: one(mpbcPerson, {\n      fields: [mpbcPlayerSkillChallenge.updatedBy],\n      references: [mpbcPerson.id],\n      relationName: 'mpbcPlayerSkillChallenge_updatedBy_mpbcPerson_id',\n    }),\n  })\n);\n\nexport const mpbcSkillTagRelations = relations(mpbcSkillTag, ({ many }) => ({\n  mpbcPlayerSkillChallenges: many(mpbcPlayerSkillChallenge),\n}));\n\nexport const mpbcSessionParticipationRelations = relations(\n  mpbcSessionParticipation,\n  ({ one }) => ({\n    mpbcPracticeSession: one(mpbcPracticeSession, {\n      fields: [mpbcSessionParticipation.sessionId],\n      references: [mpbcPracticeSession.id],\n    }),\n  })\n);\n\nexport const mpbcPracticeSessionRelations = relations(\n  mpbcPracticeSession,\n  ({ many }) => ({\n    mpbcSessionParticipations: many(mpbcSessionParticipation),\n  })\n);\n\nexport const infrastructureActivityLogsRelations = relations(\n  infrastructureActivityLogs,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [infrastructureActivityLogs.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n    mpCorePerson: one(mpCorePerson, {\n      fields: [infrastructureActivityLogs.personId],\n      references: [mpCorePerson.id],\n    }),\n  })\n);\n\nexport const mpbcTemplateUsageLogRelations = relations(\n  mpbcTemplateUsageLog,\n  ({ one }) => ({\n    mpbcPracticeTemplatesEnhanced: one(mpbcPracticeTemplatesEnhanced, {\n      fields: [mpbcTemplateUsageLog.templateId],\n      references: [mpbcPracticeTemplatesEnhanced.id],\n    }),\n  })\n);\n\nexport const mpbcPracticeTemplatesEnhancedRelations = relations(\n  mpbcPracticeTemplatesEnhanced,\n  ({ many }) => ({\n    mpbcTemplateUsageLogs: many(mpbcTemplateUsageLog),\n  })\n);\n\nexport const mpbcCorePersonProfileRelations = relations(\n  mpbcCorePersonProfile,\n  ({ one }) => ({\n    mpCoreOrganization: one(mpCoreOrganizations, {\n      fields: [mpbcCorePersonProfile.organizationId],\n      references: [mpCoreOrganizations.id],\n    }),\n    mpCorePerson: one(mpCorePerson, {\n      fields: [mpbcCorePersonProfile.personId],\n      references: [mpCorePerson.id],\n    }),\n  })\n);\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/migrations/schema.ts","messages":[{"ruleId":"no-undef","severity":2,"message":"'users' is not defined.","line":467,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":467,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'users' is not defined.","line":2682,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":2682,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'table' is defined but never used.","line":2859,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":2859,"endColumn":8}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  pgTable,\n  bigint,\n  text,\n  timestamp,\n  uuid,\n  boolean,\n  index,\n  foreignKey,\n  jsonb,\n  doublePrecision,\n  integer,\n  pgPolicy,\n  unique,\n  check,\n  date,\n  time,\n  numeric,\n  varchar,\n  pgView,\n  pgEnum,\n} from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\n\nexport const groupType = pgEnum('group_type', ['team', 'pod', 'session']);\n\nexport const mpPhilosophyArcCollective = pgTable(\n  'mp_philosophy_arc_collective',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    phase: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const mpbcOutcome = pgTable('mpbc_outcome', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  themeId: uuid('theme_id'),\n  phaseId: uuid('phase_id'),\n  measurementType: text('measurement_type'),\n  successCriteria: text('success_criteria'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPersonGroup = pgTable(\n  'mpbc_person_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    role: text(),\n    organizationId: uuid('organization_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    cycleId: uuid('cycle_id'),\n    position: text(),\n    identifier: text(),\n    status: text(),\n    metadata: jsonb(),\n    joinedAt: timestamp('joined_at', { withTimezone: true, mode: 'string' }),\n    leftAt: timestamp('left_at', { withTimezone: true, mode: 'string' }),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('idx_mpbc_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpbcGroup.id],\n      name: 'mpbc_person_group_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_person_group_person_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcPerformanceMetrics = pgTable('mpbc_performance_metrics', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  entityType: text('entity_type'),\n  entityId: uuid('entity_id'),\n  metricType: text('metric_type'),\n  metricValue: doublePrecision('metric_value'),\n  metricDate: timestamp('metric_date', { withTimezone: true, mode: 'string' }),\n  seasonId: uuid('season_id'),\n  calculationMethod: text('calculation_method'),\n  dataPoints: integer('data_points'),\n  confidenceScore: doublePrecision('confidence_score'),\n  notes: text(),\n  calculatedAt: timestamp('calculated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n});\n\nexport const mpbcPerformanceIndicators = pgTable(\n  'mpbc_performance_indicators',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    claBenchmarkId: uuid('cla_benchmark_id'),\n    level: text(),\n    description: text(),\n    mpCoreBenchmarkStandardId: uuid('mp_core_benchmark_standard_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPersonProfile = pgTable('mpbc_person_profile', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCorePersonId: uuid('mp_core_person_id'),\n  ageBandId: uuid('age_band_id'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  advancementLevel: text('advancement_level'),\n  responsibilityTier: text('responsibility_tier'),\n  basketballProfile: jsonb('basketball_profile'),\n});\n\nexport const mpbcPersonMetadata = pgTable('mpbc_person_metadata', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCorePersonId: uuid('mp_core_person_id'),\n  advancementLevel: text('advancement_level'),\n  responsibilityTier: text('responsibility_tier'),\n  basketballProfile: jsonb('basketball_profile'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPerson = pgTable(\n  'mpbc_person',\n  {\n    id: uuid().primaryKey().notNull(),\n    mpCorePersonId: uuid('mp_core_person_id').notNull(),\n    basketballAdvancementLevel: text('basketball_advancement_level'),\n    basketballResponsibilityTier: text('basketball_responsibility_tier'),\n    basketballCollectivePhase: text('basketball_collective_phase'),\n    position: text(),\n    jerseyNumber: text('jersey_number'),\n    height: text(),\n    skillRatings: jsonb('skill_ratings'),\n    strengths: text().array(),\n    areasForImprovement: text('areas_for_improvement').array(),\n    previousAdvancementLevel: text('previous_advancement_level'),\n    lastAdvancementDate: timestamp('last_advancement_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    advancementEvidence: text('advancement_evidence'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    userId: uuid('user_id'),\n    displayName: text('display_name'),\n    metadata: jsonb(),\n    firstName: text('first_name'),\n    lastName: text('last_name'),\n    email: text(),\n    phone: text(),\n    notes: text(),\n    personType: text('person_type'),\n    organizationId: uuid('organization_id'),\n    isAdmin: boolean('is_admin'),\n    isSuperadmin: boolean('is_superadmin'),\n    active: boolean(),\n    dateOfBirth: timestamp('date_of_birth', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    emergencyContact: jsonb('emergency_contact'),\n    profileImageUrl: text('profile_image_url'),\n    medicalInfo: jsonb('medical_info'),\n    parentGuardianInfo: jsonb('parent_guardian_info'),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    basketballProfile: jsonb('basketball_profile'),\n    businessProfile: jsonb('business_profile'),\n    educationProfile: jsonb('education_profile'),\n  },\n  table => [\n    index('idx_mpbc_person_mp_core_person_id').using(\n      'btree',\n      table.mpCorePersonId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_person_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.mpCorePersonId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_mpbc_person_mp_core_person',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.id],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_id_fkey',\n    }),\n    pgPolicy('temp_allow_all_authenticated_read_mpbc_person', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcPhase = pgTable('mpbc_phase', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  pillarId: uuid('pillar_id'),\n  keyConcepts: text('key_concepts'),\n  orderIndex: integer('order_index'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpCoreOrganizations = pgTable(\n  'mp_core_organizations',\n  {\n    name: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    type: text().default('sports').notNull(),\n    description: text(),\n    logoUrl: text('logo_url'),\n    contactInfo: jsonb('contact_info').default({}),\n    settings: jsonb().default({}),\n    subscriptionTier: text('subscription_tier').default('basic'),\n    overlayVersion: text('overlay_version').default('mpbc-v1.0'),\n    active: boolean().default(true),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    index('idx_orgs_id').using(\n      'btree',\n      table.id.asc().nullsLast().op('uuid_ops')\n    ),\n  ]\n);\n\nexport const infrastructureInvites = pgTable(\n  'infrastructure_invites',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    email: text().notNull(),\n    organizationId: uuid('organization_id'),\n    role: text().default('member'),\n    status: text().default('pending'),\n    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'invites_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyBenchmarkFramework = pgTable(\n  'mp_philosophy_benchmark_framework',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    description: text().notNull(),\n    measurementTypes: jsonb('measurement_types').notNull(),\n    progressionRules: jsonb('progression_rules').notNull(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [unique('mp_philosophy_benchmark_framework_name_key').on(table.name)]\n);\n\nexport const mpbcPillar = pgTable('mpbc_pillar', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  focusArea: text('focus_area'),\n  keyPrinciples: text('key_principles'),\n  desiredOutcomes: text('desired_outcomes'),\n  orderIndex: integer('order_index'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpPhilosophyArcResponsibility = pgTable(\n  'mp_philosophy_arc_responsibility',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    tier: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const mpbcAuditLog = pgTable('mpbc_audit_log', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  tableName: text('table_name'),\n  recordId: uuid('record_id'),\n  action: text(),\n  newValues: jsonb('new_values'),\n  changedBy: uuid('changed_by'),\n  changedAt: timestamp('changed_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcBenchmarkConstraints = pgTable('mpbc_benchmark_constraints', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  claBenchmarkId: uuid('cla_benchmark_id'),\n  constraintId: uuid('constraint_id'),\n  priority: integer(),\n  notes: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcAgeBands = pgTable('mpbc_age_bands', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  minAge: integer('min_age'),\n  maxAge: integer('max_age'),\n  description: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureMemberships = pgTable(\n  'infrastructure_memberships',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    userId: uuid('user_id'),\n    organizationId: uuid('organization_id'),\n    role: text().default('member'),\n    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'memberships_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.userId],\n      foreignColumns: [users.id],\n      name: 'memberships_user_id_fkey',\n    }),\n    check(\n      'memberships_role_check',\n      sql`role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text])`\n    ),\n  ]\n);\n\nexport const mpbcBlockPlayerAssignment = pgTable(\n  'mpbc_block_player_assignment',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    blockId: uuid('block_id'),\n    playerId: uuid('player_id'),\n    specialRole: text('special_role'),\n    constraints: jsonb(),\n    objectives: text(),\n    modifications: text(),\n    performanceNotes: text('performance_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  }\n);\n\nexport const mpCorePersonRole = pgTable(\n  'mp_core_person_role',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n    role: text().notNull(),\n    permissions: text().array().default(['']),\n    scopeType: text('scope_type'),\n    scopeIds: uuid('scope_ids').array(),\n    active: boolean().default(true),\n    startedAt: timestamp('started_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    endedAt: timestamp('ended_at', { withTimezone: true, mode: 'string' }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('idx_person_role_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_role_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_role_created_by',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_role_organization',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_role_person',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_person_role_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'person_role_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpCoreIntentions = pgTable(\n  'mp_core_intentions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    title: text().notNull(),\n    description: text(),\n    targetDate: date('target_date'),\n    status: text().default('active'),\n    challengeLevel: integer('challenge_level').default(3),\n    benchmarkTargets: jsonb('benchmark_targets'),\n    developmentStage: text('development_stage'),\n    advancementLevel: integer('advancement_level'),\n    responsibilityTier: integer('responsibility_tier'),\n    progressPercentage: integer('progress_percentage').default(0),\n    domainCode: text('domain_code'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    claCategoryFocus: text('cla_category_focus'),\n    optimalChallengeLevel: integer('optimal_challenge_level'),\n    contextComplexityRating: integer('context_complexity_rating'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_intentions_group',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_intentions_person',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_intentions_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_intentions_team_id_fkey',\n    }),\n    pgPolicy('mp_core_intentions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.person_id = mp_core_intentions.person_id))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person_group mpg ON ((mpg.person_id = mp_core_intentions.person_id)))\n  WHERE ((ur.role = 'coach'::text) AND (mpg.group_id = ANY (ur.team_ids)) AND (mpg.status = 'active'::text)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person p ON ((p.id = mp_core_intentions.person_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = p.organization_id)))))`,\n    }),\n    pgPolicy('mp_core_intentions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpPhilosophyArcAdvancement = pgTable(\n  'mp_philosophy_arc_advancement',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    level: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const infrastructureParticipationLog = pgTable(\n  'infrastructure_participation_log',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    sessionId: uuid('session_id'),\n    personId: uuid('person_id'),\n    status: text().notNull(),\n    arrivalTime: time('arrival_time'),\n    departureTime: time('departure_time'),\n    participationLevel: integer('participation_level'),\n    energyLevel: integer('energy_level'),\n    focusLevel: integer('focus_level'),\n    notes: text(),\n    absenceReason: text('absence_reason'),\n    advanceNotice: boolean('advance_notice').default(false),\n    makeupRequired: boolean('makeup_required').default(false),\n    metadata: jsonb(),\n    recordedAt: timestamp('recorded_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    recordedBy: uuid('recorded_by'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_participation_log_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_participation_log_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_participation_log_session_id').using(\n      'btree',\n      table.sessionId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'participation_log_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.sessionId],\n      foreignColumns: [infrastructureSessions.id],\n      name: 'participation_log_session_id_fkey',\n    }),\n  ]\n);\n\nexport const infrastructureSessions = pgTable(\n  'infrastructure_sessions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    groupId: uuid('group_id'),\n    cycleId: uuid('cycle_id'),\n    sessionNumber: integer('session_number'),\n    sessionType: text('session_type').default('regular'),\n    date: date().notNull(),\n    startTime: time('start_time'),\n    endTime: time('end_time'),\n    location: text(),\n    sessionObjective: text('session_objective'),\n    preSessionNotes: text('pre_session_notes'),\n    postSessionNotes: text('post_session_notes'),\n    facilitatorReflection: text('facilitator_reflection'),\n    intensityLevel: integer('intensity_level'),\n    status: text().default('planned'),\n    expectedAttendance: integer('expected_attendance'),\n    actualAttendance: integer('actual_attendance'),\n    conditions: text(),\n    equipmentIssues: text('equipment_issues'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_sessions_cycle_id').using(\n      'btree',\n      table.cycleId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_sessions_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_sessions_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'infrastructure_sessions_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.cycleId],\n      foreignColumns: [infrastructureProgramCycle.id],\n      name: 'sessions_cycle_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'sessions_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_sessions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_group g ON ((g.id = infrastructure_sessions.group_id)))\n  WHERE ((ur.organization_id = g.organization_id) AND ((ur.is_admin = true) OR (infrastructure_sessions.group_id = ANY (ur.team_ids)))))))`,\n    }),\n    pgPolicy('infrastructure_sessions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpCorePersonGroup = pgTable(\n  'mp_core_person_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    role: text().notNull(),\n    organizationId: uuid('organization_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    cycleId: uuid('cycle_id'),\n    position: text(),\n    identifier: text(),\n    status: text().default('active'),\n    metadata: jsonb(),\n    joinedAt: timestamp('joined_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    leftAt: timestamp('left_at', { withTimezone: true, mode: 'string' }),\n    createdBy: uuid('created_by'),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    payerId: uuid('payer_id'),\n  },\n  table => [\n    index('idx_mp_core_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mp_core_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_cycle_id').using(\n      'btree',\n      table.cycleId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_created_by',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_person_group_group',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_group_organization',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_payer',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_person',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_person_group_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_payer_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_payer_id_mp_core_person_id_fk',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.cycleId],\n      foreignColumns: [infrastructureProgramCycle.id],\n      name: 'person_group_cycle_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'person_group_org_id_fkey',\n    }),\n    pgPolicy('mp_core_person_group_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.person_id = mp_core_person_group.person_id))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_group g ON ((g.id = mp_core_person_group.group_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = g.organization_id)))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.role = 'coach'::text) AND (mp_core_person_group.group_id = ANY (ur.team_ids))))))`,\n    }),\n    pgPolicy('mp_core_person_group_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpbcClaBenchmarks = pgTable('mpbc_cla_benchmarks', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  claCategoryId: uuid('cla_category_id'),\n  ageBandId: uuid('age_band_id'),\n  context: text(),\n  assessmentCriteria: text('assessment_criteria'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  benchmarkCategoryId: uuid('benchmark_category_id'),\n  advancementLevel: text('advancement_level'),\n});\n\nexport const mpbcClaCategories = pgTable('mpbc_cla_categories', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  learningFocus: text('learning_focus'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcCoachTemplatePreferences = pgTable(\n  'mpbc_coach_template_preferences',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    coachId: uuid('coach_id'),\n    templateId: uuid('template_id'),\n    preferenceScore: integer('preference_score'),\n    usageFrequency: integer('usage_frequency'),\n    lastUsed: timestamp('last_used', { withTimezone: true, mode: 'string' }),\n    preferredModifications: jsonb('preferred_modifications'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcConstraintType = pgTable('mpbc_constraint_type', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  applicationMethod: text('application_method'),\n  exampleImplementations: jsonb('example_implementations'),\n  intensityScalable: boolean('intensity_scalable'),\n  attendanceAdaptable: boolean('attendance_adaptable'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureProgramCycle = pgTable(\n  'infrastructure_program_cycle',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id'),\n    name: text().notNull(),\n    year: integer().notNull(),\n    term: text(),\n    startDate: date('start_date').notNull(),\n    endDate: date('end_date').notNull(),\n    description: text(),\n    objectives: text().array(),\n    active: boolean().default(true),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'program_cycle_organization_id_fkey',\n    }),\n    pgPolicy('program_cycle_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`((organization_id)::text = (((auth.jwt() ->> 'app_metadata'::text))::jsonb ->> 'organization_id'::text))`,\n    }),\n    pgPolicy('program_cycle_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('program_cycle_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('program_cycle_delete_policy', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n  ]\n);\n\nexport const mpCoreActions = pgTable(\n  'mp_core_actions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    intentionId: uuid('intention_id'),\n    title: text().notNull(),\n    description: text(),\n    status: text().default('planned'),\n    executedAt: timestamp('executed_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    durationMinutes: integer('duration_minutes'),\n    challengeLevel: integer('challenge_level'),\n    successRate: numeric('success_rate', { precision: 5, scale: 2 }),\n    benchmarkAssessments: jsonb('benchmark_assessments'),\n    advancementProgress: jsonb('advancement_progress'),\n    responsibilityProgress: jsonb('responsibility_progress'),\n    challengeRating: integer('challenge_rating'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_actions_group',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'fk_actions_intention',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_actions_person',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'mp_core_actions_intention_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_actions_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_actions_team_id_fkey',\n    }),\n    pgPolicy('mp_core_actions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.person_id = mp_core_actions.person_id)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person_group mpg ON ((mpg.person_id = mp_core_actions.person_id)))\n  WHERE ((ur.role = 'coach'::text) AND (mpg.group_id = ANY (ur.team_ids)) AND (mpg.status = 'active'::text)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person p ON ((p.id = mp_core_actions.person_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = p.organization_id)))))`,\n    }),\n    pgPolicy('mp_core_actions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpCoreReflections = pgTable(\n  'mp_core_reflections',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    actionId: uuid('action_id'),\n    intentionId: uuid('intention_id'),\n    content: text().notNull(),\n    insights: text(),\n    nextSteps: text('next_steps'),\n    challengeFeedback: text('challenge_feedback'),\n    perceivedDifficulty: integer('perceived_difficulty'),\n    developmentInsights: jsonb('development_insights'),\n    benchmarkProgress: jsonb('benchmark_progress'),\n    advancementInsights: text('advancement_insights'),\n    responsibilityInsights: text('responsibility_insights'),\n    collectiveInsights: text('collective_insights'),\n    advancementProgress: jsonb('advancement_progress'),\n    responsibilityProgress: jsonb('responsibility_progress'),\n    collectiveProgress: jsonb('collective_progress'),\n    confidenceScore: integer('confidence_score'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.actionId],\n      foreignColumns: [mpCoreActions.id],\n      name: 'fk_reflections_action',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_reflections_group',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'fk_reflections_intention',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_reflections_person',\n    }),\n    foreignKey({\n      columns: [table.actionId],\n      foreignColumns: [mpCoreActions.id],\n      name: 'mp_core_reflections_action_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'mp_core_reflections_intention_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_reflections_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_reflections_team_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyArcTypes = pgTable(\n  'mp_philosophy_arc_types',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    description: text().notNull(),\n    domainCode: text('domain_code').notNull(),\n    stages: jsonb().notNull(),\n    typicalDurationDays: integer('typical_duration_days'),\n    defaultGraduationThreshold: numeric('default_graduation_threshold', {\n      precision: 5,\n      scale: 2,\n    }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [unique('mp_philosophy_arc_types_name_key').on(table.name)]\n);\n\nexport const mpbcCoreSkillMapping = pgTable('mpbc_core_skill_mapping', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpbcSkillId: uuid('mpbc_skill_id'),\n  coreSkillName: text('core_skill_name'),\n  mappingStrength: integer('mapping_strength'),\n  mappingContext: text('mapping_context'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  coreSkillId: uuid('core_skill_id'),\n  relationshipType: text('relationship_type'),\n  aiConfidenceScore: integer('ai_confidence_score'),\n  developmentPriority: integer('development_priority'),\n  contextualFactors: jsonb('contextual_factors'),\n  skillTransferCoefficient: doublePrecision('skill_transfer_coefficient'),\n  optimalAgeRange: text('optimal_age_range'),\n  prerequisiteSkills: text('prerequisite_skills').array(),\n  complementarySkills: text('complementary_skills').array(),\n});\n\nexport const mpbcConstraintsBank = pgTable('mpbc_constraints_bank', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  constraintName: text('constraint_name'),\n  constraintText: text('constraint_text'),\n  skillTag: text('skill_tag'),\n  offensiveOrDefensive: text('offensive_or_defensive'),\n  constraintType: text('constraint_type'),\n  exampleContexts: text('example_contexts'),\n  confidenceScore: numeric('confidence_score'),\n  notes: text(),\n  promptKeywords: text('prompt_keywords'),\n  aiParsingRules: jsonb('ai_parsing_rules'),\n});\n\nexport const mpbcConstraintManipulations = pgTable(\n  'mpbc_constraint_manipulations',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text(),\n    description: text(),\n    constraintType: text('constraint_type'),\n    claCategoryId: uuid('cla_category_id'),\n    challengeLevel: integer('challenge_level'),\n    implementationNotes: text('implementation_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcCoreSkills = pgTable('mpbc_core_skills', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  displayName: text('display_name'),\n  category: text(),\n  subcategory: text(),\n  description: text(),\n  synonyms: text().array(),\n  isActive: boolean('is_active').default(true),\n  parentSkillId: uuid('parent_skill_id'),\n  useCase: text('use_case'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  comboCode: text('combo_code'),\n});\n\nexport const mpbcPersonRole = pgTable(\n  'mpbc_person_role',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n    role: text().notNull(),\n    permissions: text().default(['']),\n    scopeType: text('scope_type'),\n    scopeIds: uuid('scope_ids'),\n    active: boolean().default(true),\n    startedAt: timestamp('started_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    endedAt: timestamp('ended_at', { withTimezone: true, mode: 'string' }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('mpbc_person_role_organization_id_idx').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('mpbc_person_role_person_id_idx').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_created_by_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_person_role_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_person_role_organization_id_fkey1',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_person_id_fkey1',\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlan = pgTable(\n  'mpbc_development_plan',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    playerId: uuid('player_id'),\n    groupId: uuid('group_id'),\n    seasonId: uuid('season_id'),\n    title: text(),\n    objective: text(),\n    primaryPillarId: uuid('primary_pillar_id'),\n    secondaryPillarId: uuid('secondary_pillar_id'),\n    focusSkillsId: uuid('focus_skills_id'),\n    targetOutcomes: text('target_outcomes'),\n    baselineAssessment: text('baseline_assessment'),\n    targetMetrics: jsonb('target_metrics'),\n    timelineWeeks: integer('timeline_weeks'),\n    priorityLevel: text('priority_level'),\n    status: text(),\n    progressPercentage: integer('progress_percentage'),\n    lastReviewDate: timestamp('last_review_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    nextReviewDate: timestamp('next_review_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    progressNotes: text('progress_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    claPrimaryBenchmarkId: uuid('cla_primary_benchmark_id'),\n    claSecondaryBenchmarkId: uuid('cla_secondary_benchmark_id'),\n    claTertiaryBenchmarkId: uuid('cla_tertiary_benchmark_id'),\n    intelligenceDevelopmentGoals: jsonb('intelligence_development_goals'),\n    contextAssessmentEnabled: boolean('context_assessment_enabled'),\n    startDate: timestamp('start_date', { withTimezone: true, mode: 'string' }),\n    endDate: timestamp('end_date', { withTimezone: true, mode: 'string' }),\n    archivedAt: timestamp('archived_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    archivedBy: uuid('archived_by'),\n    targetEndDate: timestamp('target_end_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    actualEndDate: timestamp('actual_end_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    orgId: uuid('org_id'),\n    organizationId: uuid('organization_id'),\n    version: text(),\n    overlaySchema: text('overlay_schema'),\n    cycleId: uuid('cycle_id'),\n    personId: uuid('person_id'),\n    metadata: jsonb(),\n    oldId: uuid('old_id'),\n    migrationPhase: text('migration_phase'),\n    needsEnhancement: boolean('needs_enhancement'),\n    originalContent: text('original_content'),\n    priority: integer(),\n  },\n  table => [\n    index('idx_mpbc_development_plan_archived_at').using(\n      'btree',\n      table.archivedAt.asc().nullsLast().op('timestamptz_ops')\n    ),\n    index('idx_mpbc_development_plan_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_development_plan_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'fk_mpbc_development_plan_person',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mpbc_development_plan_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_development_plan_player_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.seasonId],\n      foreignColumns: [mpbcSeason.id],\n      name: 'mpbc_development_plan_season_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlanProgress = pgTable(\n  'mpbc_development_plan_progress',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    pdpId: uuid('pdp_id'),\n    skillTagId: uuid('skill_tag_id'),\n    assessmentDate: timestamp('assessment_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    previousLevel: text('previous_level'),\n    currentLevel: text('current_level'),\n    improvementNotes: text('improvement_notes'),\n    evidence: text(),\n    nextSteps: text('next_steps'),\n    assessedBy: uuid('assessed_by'),\n    assessmentMethod: text('assessment_method'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const infrastructureSystemSettings = pgTable(\n  'infrastructure_system_settings',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id'),\n    category: text().notNull(),\n    settingKey: text('setting_key').notNull(),\n    settingValue: jsonb('setting_value').notNull(),\n    description: text(),\n    dataType: text('data_type').notNull(),\n    isPublic: boolean('is_public').default(false),\n    requiresRestart: boolean('requires_restart').default(false),\n    lastChangedBy: uuid('last_changed_by'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    index('idx_system_settings_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'system_settings_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const infrastructureDashboardConfig = pgTable(\n  'infrastructure_dashboard_config',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    dashboardType: text('dashboard_type').notNull(),\n    widgetConfig: jsonb('widget_config').notNull(),\n    isDefault: boolean('is_default').default(false),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_dashboard_config_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_dashboard_config_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'dashboard_config_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyChallengePoint = pgTable(\n  'mp_philosophy_challenge_point',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    type: text(),\n    description: text(),\n    calculationRules: jsonb('calculation_rules'),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n  }\n);\n\nexport const mpbcCuePack = pgTable('mpbc_cue_pack', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  skillTagId: uuid('skill_tag_id'),\n  phaseId: uuid('phase_id'),\n  cueType: text('cue_type'),\n  cues: text().array(),\n  whenToUse: text('when_to_use'),\n  exampleScenarios: text('example_scenarios'),\n  effectivenessRating: integer('effectiveness_rating'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureFileStorage = pgTable(\n  'infrastructure_file_storage',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    fileName: text('file_name').notNull(),\n    originalName: text('original_name').notNull(),\n    filePath: text('file_path').notNull(),\n    fileType: text('file_type').notNull(),\n    fileSize: integer('file_size'),\n    bucketName: text('bucket_name').notNull(),\n    entityType: text('entity_type'),\n    entityId: uuid('entity_id'),\n    uploadedBy: uuid('uploaded_by'),\n    description: text(),\n    tags: text().array(),\n    publicAccess: boolean('public_access').default(false),\n    thumbnailPath: text('thumbnail_path'),\n    processingStatus: text('processing_status').default('uploaded'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_file_storage_entity_id').using(\n      'btree',\n      table.entityId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_file_storage_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'file_storage_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_file_storage_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((public_access = true) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (infrastructure_file_storage.uploaded_by = ur.person_id)))) OR ((entity_type = 'person'::text) AND (EXISTS ( SELECT 1\n   FROM mp_core_person p\n  WHERE (p.id = infrastructure_file_storage.entity_id)))))`,\n    }),\n    pgPolicy('infrastructure_file_storage_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('infrastructure_file_storage_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('infrastructure_file_storage_delete_policy', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const infrastructureNotificationQueue = pgTable(\n  'infrastructure_notification_queue',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    recipientId: uuid('recipient_id').notNull(),\n    notificationType: text('notification_type').notNull(),\n    subject: text(),\n    message: text().notNull(),\n    data: jsonb(),\n    priority: integer().default(3),\n    status: text().default('queued'),\n    scheduledFor: timestamp('scheduled_for', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    sentAt: timestamp('sent_at', { withTimezone: true, mode: 'string' }),\n    errorMessage: text('error_message'),\n    retryCount: integer('retry_count').default(0),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_notification_queue_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_notification_queue_recipient_id').using(\n      'btree',\n      table.recipientId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'notification_queue_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_notification_queue_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.person_id = infrastructure_notification_queue.recipient_id))))`,\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlanAssessments = pgTable(\n  'mpbc_development_plan_assessments',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    pdpId: uuid('pdp_id'),\n    mpCoreBenchmarkAssessmentId: uuid('mp_core_benchmark_assessment_id'),\n    assessmentDate: timestamp('assessment_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    videoEvidenceUrl: text('video_evidence_url'),\n    contextNotes: text('context_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcDrillMaster = pgTable('mpbc_drill_master', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  subcategory: text(),\n  setupInstructions: text('setup_instructions'),\n  coachingPoints: text('coaching_points'),\n  equipmentNeeded: text('equipment_needed'),\n  spaceRequirements: text('space_requirements'),\n  minPlayers: integer('min_players'),\n  maxPlayers: integer('max_players'),\n  optimalPlayers: integer('optimal_players'),\n  durationMinutes: integer('duration_minutes'),\n  difficultyLevel: text('difficulty_level'),\n  ageAppropriate: text('age_appropriate'),\n  skillTags: text('skill_tags').array(),\n  phaseTags: text('phase_tags').array(),\n  videoUrl: text('video_url'),\n  diagramUrl: text('diagram_url'),\n  pdfUrl: text('pdf_url'),\n  tags: text().array(),\n  verified: boolean(),\n  usageCount: integer('usage_count'),\n  ratingAvg: doublePrecision('rating_avg'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpCoreGroup = pgTable(\n  'mp_core_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    groupType: text('group_type'),\n    leadPersonId: uuid('lead_person_id'),\n    organizationId: uuid('organization_id'),\n    program: text(),\n    levelCategory: text('level_category'),\n    description: text(),\n    maxCapacity: integer('max_capacity'),\n    schedule: jsonb(),\n    active: boolean().default(true),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_created_by',\n    }),\n    foreignKey({\n      columns: [table.leadPersonId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_lead_person',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_group_organization',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_updated_by',\n    }),\n    pgPolicy('mp_core_group_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.organization_id = mp_core_group.organization_id))))`,\n    }),\n    pgPolicy('mp_core_group_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('mp_core_group_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpbcDrillPhaseTags = pgTable('mpbc_drill_phase_tags', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  drillId: uuid('drill_id'),\n  phaseId: uuid('phase_id'),\n  relevanceLevel: integer('relevance_level'),\n});\n\nexport const mpbcDrillSkillTags = pgTable('mpbc_drill_skill_tags', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  drillId: uuid('drill_id'),\n  skillTagId: uuid('skill_tag_id'),\n  emphasisLevel: integer('emphasis_level'),\n});\n\nexport const mpbcObservations = pgTable(\n  'mpbc_observations',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    playerId: uuid('player_id'),\n    observerId: uuid('observer_id'),\n    skillTags: text('skill_tags').array(),\n    claCategory: text('cla_category'),\n    context: text(),\n    observationText: text('observation_text'),\n    performanceRating: integer('performance_rating'),\n    basketballSpecificMetrics: jsonb('basketball_specific_metrics'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    developmentPlanId: uuid('development_plan_id'),\n    archivedAt: timestamp('archived_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    archivedBy: uuid('archived_by'),\n    orgId: uuid('org_id'),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    cycleId: uuid('cycle_id'),\n    organizationId: uuid('organization_id'),\n    tags: text().array(),\n    observationDate: timestamp('observation_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_mpbc_observations_archived_at').using(\n      'btree',\n      table.archivedAt.asc().nullsLast().op('timestamptz_ops')\n    ),\n    index('idx_mpbc_observations_development_plan_id').using(\n      'btree',\n      table.developmentPlanId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_observations_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_observations_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.developmentPlanId],\n      foreignColumns: [mpbcDevelopmentPlan.id],\n      name: 'fk_mpbc_observations_development_plan',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'fk_mpbc_observations_person',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.observerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_observations_observer_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_observations_player_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcGroup = pgTable(\n  'mpbc_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    mpCoreGroupId: uuid('mp_core_group_id'),\n    division: text(),\n    conference: text(),\n    playingStyle: text('playing_style'),\n    teamPhilosophy: text('team_philosophy'),\n    seasonRecord: text('season_record'),\n    teamStatistics: jsonb('team_statistics'),\n    homeCourt: text('home_court'),\n    practiceFacility: text('practice_facility'),\n    equipmentInventory: jsonb('equipment_inventory'),\n    travelRequirements: text('travel_requirements'),\n    collectiveSkillLevel: text('collective_skill_level'),\n    teamChemistryRating: integer('team_chemistry_rating'),\n    leadershipStructure: jsonb('leadership_structure'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    name: text(),\n    groupType: text('group_type'),\n    leadPersonId: uuid('lead_person_id'),\n    program: text(),\n    levelCategory: text('level_category'),\n    description: text(),\n    maxCapacity: integer('max_capacity'),\n    schedule: jsonb(),\n    metadata: jsonb(),\n    active: boolean(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_mpbc_group_mp_core_group_id').using(\n      'btree',\n      table.mpCoreGroupId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.mpCoreGroupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_mpbc_group_mp_core_group',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.leadPersonId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_group_lead_person_id_fkey',\n    }),\n    pgPolicy('temp_allow_all_authenticated_read_mpbc_group', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcDrillOrg = pgTable('mpbc_drill_org', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  organizationId: uuid('organization_id'),\n  masterDrillId: uuid('master_drill_id'),\n  name: text(),\n  description: text(),\n  customizations: jsonb(),\n  private: boolean(),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcGoalTracking = pgTable('mpbc_goal_tracking', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  personId: uuid('person_id'),\n  pdpId: uuid('pdp_id'),\n  teamId: uuid('team_id'),\n  seasonId: uuid('season_id'),\n  goalType: text('goal_type'),\n  title: text(),\n  description: text(),\n  targetMetric: text('target_metric'),\n  targetValue: text('target_value'),\n  currentValue: text('current_value'),\n  deadline: timestamp({ withTimezone: true, mode: 'string' }),\n  priority: text(),\n  status: text(),\n  progressNotes: text('progress_notes'),\n  lastUpdated: timestamp('last_updated', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcGroupMetadata = pgTable('mpbc_group_metadata', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCoreGroupId: uuid('mp_core_group_id'),\n  collectiveGrowthPhase: text('collective_growth_phase'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcGroupProfile = pgTable('mpbc_group_profile', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpbcGroupId: uuid('mpbc_group_id'),\n  collectiveAdvancementLevel: text('collective_advancement_level'),\n  collectiveResponsibilityTier: text('collective_responsibility_tier'),\n  collectiveGrowthPhase: text('collective_growth_phase'),\n  offensiveRating: integer('offensive_rating'),\n  defensiveRating: integer('defensive_rating'),\n  paceOfPlay: integer('pace_of_play'),\n  teamEfficiency: integer('team_efficiency'),\n  strengths: text().array(),\n  areasForImprovement: text('areas_for_improvement').array(),\n  teamGoals: text('team_goals'),\n  problemSolvingEffectiveness: integer('problem_solving_effectiveness'),\n  adaptabilityRating: integer('adaptability_rating'),\n  communicationEffectiveness: integer('communication_effectiveness'),\n  performanceTrends: jsonb('performance_trends'),\n  milestoneAchievements: text('milestone_achievements').array(),\n  lastTeamAssessmentDate: timestamp('last_team_assessment_date', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n  assessmentNotes: text('assessment_notes'),\n  nextDevelopmentTargets: text('next_development_targets').array(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcIndividualChallengePoints = pgTable(\n  'mpbc_individual_challenge_points',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    mpCorePersonId: uuid('mp_core_person_id'),\n    claCategoryId: uuid('cla_category_id'),\n    currentChallengeLevel: integer('current_challenge_level'),\n    optimalChallengeLevel: integer('optimal_challenge_level'),\n    successRate: doublePrecision('success_rate'),\n    lastCalculatedAt: timestamp('last_calculated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcOrganizations = pgTable('mpbc_organizations', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  type: text(),\n  description: text(),\n  logoUrl: text('logo_url'),\n  contactInfo: jsonb('contact_info'),\n  settings: jsonb(),\n  subscriptionTier: text('subscription_tier'),\n  overlayVersion: text('overlay_version'),\n  active: boolean(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPracticeBlockClaConstraints = pgTable(\n  'mpbc_practice_block_cla_constraints',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    practiceBlockId: uuid('practice_block_id'),\n    constraintManipulationId: uuid('constraint_manipulation_id'),\n    applicationNotes: text('application_notes'),\n    effectivenessRating: integer('effectiveness_rating'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPracticeTemplatesEnhanced = pgTable(\n  'mpbc_practice_templates_enhanced',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    templateId: text('template_id'),\n    basePracticeNumber: integer('base_practice_number'),\n    attendanceMin: integer('attendance_min'),\n    attendanceMax: integer('attendance_max'),\n    intensityLevel: integer('intensity_level'),\n    focusArea: text('focus_area'),\n    templateBlocks: jsonb('template_blocks'),\n    estimatedDuration: integer('estimated_duration'),\n    mpbcAlignment: jsonb('mpbc_alignment'),\n    constraintDensity: doublePrecision('constraint_density'),\n    attendanceAdaptations: jsonb('attendance_adaptations'),\n    variabilityFactors: jsonb('variability_factors'),\n    claEnhanced: boolean('cla_enhanced'),\n    effectivenessScore: doublePrecision('effectiveness_score'),\n    usageCount: integer('usage_count'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPracticeBlock = pgTable('mpbc_practice_block', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  sessionId: uuid('session_id'),\n  masterDrillId: uuid('master_drill_id'),\n  orgDrillId: uuid('org_drill_id'),\n  blockName: text('block_name'),\n  description: text(),\n  phaseId: uuid('phase_id'),\n  themeId: uuid('theme_id'),\n  objective: text(),\n  durationMinutes: integer('duration_minutes'),\n  orderIndex: integer('order_index'),\n  format: text(),\n  constraints: jsonb(),\n  coachingEmphasis: text('coaching_emphasis'),\n  successCriteria: text('success_criteria'),\n  modifications: text(),\n  equipmentNeeded: text('equipment_needed'),\n  spaceSetup: text('space_setup'),\n  playerGroupings: jsonb('player_groupings'),\n  notes: text(),\n  completed: boolean(),\n  effectivenessRating: integer('effectiveness_rating'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n  claIntelligenceTargets: jsonb('cla_intelligence_targets'),\n  contextComplexityLevel: integer('context_complexity_level'),\n  assessmentOpportunities: text('assessment_opportunities'),\n});\n\nexport const mpbcPracticeSession = pgTable('mpbc_practice_session', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  teamId: uuid('team_id'),\n  seasonId: uuid('season_id'),\n  sessionNumber: integer('session_number'),\n  date: timestamp({ withTimezone: true, mode: 'string' }),\n  startTime: timestamp('start_time', { withTimezone: true, mode: 'string' }),\n  endTime: timestamp('end_time', { withTimezone: true, mode: 'string' }),\n  location: text(),\n  facilityInfo: text('facility_info'),\n  primaryThemeId: uuid('primary_theme_id'),\n  secondaryThemeId: uuid('secondary_theme_id'),\n  sessionObjective: text('session_objective'),\n  prePracticeNotes: text('pre_practice_notes'),\n  postPracticeNotes: text('post_practice_notes'),\n  coachReflection: text('coach_reflection'),\n  intensityLevel: integer('intensity_level'),\n  status: text(),\n  expectedAttendance: integer('expected_attendance'),\n  actualAttendance: integer('actual_attendance'),\n  weatherConditions: text('weather_conditions'),\n  equipmentIssues: text('equipment_issues'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcPlayerSkillChallenge = pgTable(\n  'mpbc_player_skill_challenge',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    developmentPlanId: uuid('development_plan_id'),\n    skillTagId: uuid('skill_tag_id'),\n    challengeTitle: text('challenge_title'),\n    description: text(),\n    successCriteria: text('success_criteria'),\n    practiceFrequency: text('practice_frequency'),\n    deadline: timestamp({ withTimezone: true, mode: 'string' }),\n    priority: text(),\n    difficulty: text(),\n    status: text(),\n    progressPercentage: integer('progress_percentage'),\n    coachNotes: text('coach_notes'),\n    playerNotes: text('player_notes'),\n    resources: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    playerId: uuid('player_id'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_created_by_fkey',\n    }),\n    foreignKey({\n      columns: [table.developmentPlanId],\n      foreignColumns: [mpbcDevelopmentPlan.id],\n      name: 'mpbc_player_skill_challenge_development_plan_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_player_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.skillTagId],\n      foreignColumns: [mpbcSkillTag.id],\n      name: 'mpbc_player_skill_challenge_skill_tag_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_updated_by_fkey',\n    }),\n    pgPolicy('Allow read for all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const infrastructureInvitations = pgTable('infrastructure_invitations', {\n  id: uuid().defaultRandom().primaryKey().notNull(),\n  teamId: numeric('team_id').notNull(),\n  email: text().notNull(),\n  role: text().notNull(),\n  invitedBy: integer('invited_by').notNull(),\n  invitedAt: timestamp('invited_at', { mode: 'string' }).defaultNow().notNull(),\n  status: varchar({ length: 20 }).default('pending').notNull(),\n});\n\nexport const mpbcPracticeTheme = pgTable('mpbc_practice_theme', {\n  id: uuid().defaultRandom().primaryKey().notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  subcategory: text(),\n  phaseId: text('phase_id'),\n  pillarId: text('pillar_id'),\n  // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n  comboCode: bigint('combo_code', { mode: 'number' }),\n  synonyms: jsonb(),\n  useCase: text('use_case'),\n  verified: boolean(),\n  active: boolean(),\n  createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n  updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n  suggestedBy: text('suggested_by'),\n  sourceUid: text('source_uid'),\n});\n\nexport const mpbcPromptTemplates = pgTable('mpbc_prompt_templates', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  promptName: text('prompt_name').notNull(),\n  useCase: text('use_case').notNull(),\n  promptTemplate: text('prompt_template').notNull(),\n  systemInstructions: text('system_instructions'),\n  exampleInputs: jsonb('example_inputs'),\n  exampleOutputs: jsonb('example_outputs'),\n  modelParameters: jsonb('model_parameters'),\n  version: text().default('v1.0'),\n  active: boolean().default(true),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcSeason = pgTable(\n  'mpbc_season',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id').notNull(),\n    name: text().notNull(),\n    year: integer().notNull(),\n    term: text(),\n    startDate: date('start_date').notNull(),\n    endDate: date('end_date').notNull(),\n    description: text(),\n    goals: text().array(),\n    active: boolean().default(true),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_season_dates').using(\n      'btree',\n      table.startDate.asc().nullsLast().op('date_ops'),\n      table.endDate.asc().nullsLast().op('date_ops')\n    ),\n    index('idx_season_organization_active').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('bool_ops'),\n      table.active.asc().nullsLast().op('bool_ops')\n    ),\n    unique('unique_active_season').on(table.organizationId, table.active),\n    check('season_check', sql`end_date > start_date`),\n    check(\n      'season_term_check',\n      sql`term = ANY (ARRAY['fall'::text, 'winter'::text, 'spring'::text, 'summer'::text, 'annual'::text])`\n    ),\n  ]\n);\n\nexport const mpbcSessionParticipation = pgTable(\n  'mpbc_session_participation',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    sessionId: uuid('session_id').notNull(),\n    playerId: uuid('player_id').notNull(),\n    blocksParticipated: uuid('blocks_participated').array(),\n    leadershipDisplayed: text('leadership_displayed').array(),\n    effortLevel: integer('effort_level'),\n    attitudeRating: integer('attitude_rating'),\n    skillDemonstration: text('skill_demonstration').array(),\n    areasStruggled: text('areas_struggled').array(),\n    coachFeedback: text('coach_feedback'),\n    playerSelfAssessment: text('player_self_assessment'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    recordedBy: uuid('recorded_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.sessionId],\n      foreignColumns: [mpbcPracticeSession.id],\n      name: 'session_participation_session_id_fkey',\n    }),\n    unique('session_participation_session_id_player_id_key').on(\n      table.sessionId,\n      table.playerId\n    ),\n    check(\n      'session_participation_attitude_rating_check',\n      sql`(attitude_rating >= 1) AND (attitude_rating <= 5)`\n    ),\n    check(\n      'session_participation_effort_level_check',\n      sql`(effort_level >= 1) AND (effort_level <= 5)`\n    ),\n  ]\n);\n\nexport const mpbcSignalType = pgTable('mpbc_signal_type', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  signalName: text('signal_name').notNull(),\n  description: text(),\n  category: text(),\n  triggerConditions: jsonb('trigger_conditions'),\n  recommendedActions: text('recommended_actions').array(),\n  priorityLevel: integer('priority_level').default(3),\n  autoGenerate: boolean('auto_generate').default(false),\n  promptTemplate: text('prompt_template'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureActivityLogs = pgTable(\n  'infrastructure_activity_logs',\n  {\n    action: text().notNull(),\n    timestamp: timestamp({ mode: 'string' }).defaultNow().notNull(),\n    ipAddress: varchar('ip_address', { length: 45 }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'infrastructure_activity_logs_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'infrastructure_activity_logs_person_id_fkey',\n    }),\n  ]\n);\n\nexport const mpCorePerson = pgTable(\n  'mp_core_person',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    displayName: text('display_name').notNull(),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    firstName: text('first_name'),\n    lastName: text('last_name'),\n    email: text(),\n    phone: text(),\n    notes: text(),\n    personType: text('person_type'),\n    organizationId: uuid('organization_id'),\n    isAdmin: boolean('is_admin').default(false),\n    isSuperadmin: boolean('is_superadmin').default(false),\n    active: boolean().default(true),\n    dateOfBirth: date('date_of_birth'),\n    emergencyContact: jsonb('emergency_contact'),\n    profileImageUrl: text('profile_image_url'),\n    medicalInfo: jsonb('medical_info'),\n    parentGuardianInfo: jsonb('parent_guardian_info'),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    authUid: uuid('auth_uid'),\n    stripeCustomerId: text('stripe_customer_id'),\n    stripeSubscriptionId: text('stripe_subscription_id'),\n    stripeProductId: text('stripe_product_id'),\n    planName: text('plan_name'),\n    subscriptionStatus: text('subscription_status'),\n    seatsPurchased: integer('seats_purchased').default(1),\n    seatsUsed: integer('seats_used').default(1),\n  },\n  table => [\n    index('idx_mp_core_person_auth_uid').using(\n      'btree',\n      table.authUid.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mp_core_person_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [table.id],\n      name: 'fk_person_created_by',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_organization',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [table.id],\n      name: 'fk_person_updated_by',\n    }),\n    foreignKey({\n      columns: [table.authUid],\n      foreignColumns: [users.id],\n      name: 'mp_core_person_auth_uid_fkey',\n    }),\n    unique('mp_core_person_stripe_customer_id_key').on(table.stripeCustomerId),\n    unique('mp_core_person_stripe_customer_id_unique').on(\n      table.stripeCustomerId\n    ),\n    unique('mp_core_person_stripe_subscription_id_key').on(\n      table.stripeSubscriptionId\n    ),\n    unique('mp_core_person_stripe_subscription_id_unique').on(\n      table.stripeSubscriptionId\n    ),\n    pgPolicy('Allow authenticated users to read their own record', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(auth_uid = auth.uid())`,\n    }),\n    pgPolicy('Allow authenticated users to insert their own record', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('Allow authenticated users to update their own record', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to read person records', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n    }),\n    pgPolicy('Superadmin can select all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Superadmin can insert all', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Allow organization admins to create person records', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to update person records', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to delete person records', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['public'],\n    }),\n    pgPolicy('Superadmin can update all', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Superadmin can delete all', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can select all in org', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can insert in org', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can update all in org', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can delete all in org', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Coach can select own record in org', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Coach can insert own record in org', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n  ]\n);\n\nexport const mpbcTemplateUsageLog = pgTable(\n  'mpbc_template_usage_log',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    templateId: uuid('template_id'),\n    sessionId: uuid('session_id'),\n    organizationId: uuid('organization_id'),\n    coachId: uuid('coach_id'),\n    attendanceActual: integer('attendance_actual'),\n    effectivenessRating: integer('effectiveness_rating'),\n    modificationsMade: jsonb('modifications_made'),\n    coachFeedback: text('coach_feedback'),\n    wouldUseAgain: boolean('would_use_again'),\n    usedAt: timestamp('used_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.templateId],\n      foreignColumns: [mpbcPracticeTemplatesEnhanced.id],\n      name: 'template_usage_log_template_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcSkillPrerequisites = pgTable('mpbc_skill_prerequisites', {\n  skillId: text('skill_id'),\n  prerequisiteSkillId: text('prerequisite_skill_id'),\n  required: boolean(),\n  id: uuid().defaultRandom().primaryKey().notNull(),\n});\n\nexport const mpbcVersionConfig = pgTable('mpbc_version_config', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  version: text().notNull(),\n  schemaVersion: text('schema_version').notNull(),\n  promptLibrary: jsonb('prompt_library'),\n  constraintDefinitions: jsonb('constraint_definitions'),\n  aiModelConfig: jsonb('ai_model_config'),\n  active: boolean().default(true),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcSkillTag = pgTable(\n  'mpbc_skill_tag',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    name: text(),\n    description: text(),\n    category: text(),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    difficultyLevel: bigint('difficulty_level', { mode: 'number' }),\n    prerequisites: text(),\n    pillarId: text('pillar_id'),\n    parentSkillId: text('parent_skill_id'),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    progressionOrder: bigint('progression_order', { mode: 'number' }),\n    active: boolean(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    claCategoryMapping: text('cla_category_mapping'),\n    intelligenceFocus: text('intelligence_focus'),\n    contextRequirements: text('context_requirements'),\n  },\n  table => [\n    pgPolicy('Allow read for all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcCorePersonProfile = pgTable(\n  'mpbc_core_person_profile',\n  {\n    personId: uuid('person_id').primaryKey().notNull(),\n    organizationId: uuid('organization_id'),\n    heightCm: integer('height_cm'),\n    dominantHand: text('dominant_hand'),\n    playingPosition: text('playing_position'),\n    preferredShotZone: text('preferred_shot_zone'),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    advancementLevel: text('advancement_level'),\n    responsibilityTier: text('responsibility_tier'),\n    basketballProfile: jsonb('basketball_profile'),\n  },\n  table => [\n    index('idx_mpbc_core_person_profile_org_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_core_person_profile_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_core_person_profile_person_id_fkey',\n    }).onDelete('cascade'),\n  ]\n);\nexport const vMpCoreGroupMembership = pgView('v_mp_core_group_membership', {\n  id: uuid(),\n  groupId: uuid('group_id'),\n  personId: uuid('person_id'),\n  role: text(),\n  createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n  updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n}).as(\n  sql`SELECT mp_core_person_group.id, mp_core_person_group.group_id, mp_core_person_group.person_id, mp_core_person_group.role, mp_core_person_group.created_at, mp_core_person_group.updated_at FROM mp_core_person_group`\n);\n\nexport const currentParticipants = pgView('current_participants', {\n  id: uuid(),\n  firstName: text('first_name'),\n  lastName: text('last_name'),\n  email: text(),\n  personType: text('person_type'),\n  authUid: uuid('auth_uid'),\n  groupId: uuid('group_id'),\n  groupName: text('group_name'),\n  role: text(),\n  position: text(),\n  identifier: text(),\n  cycleName: text('cycle_name'),\n  organizationId: uuid('organization_id'),\n})\n  .with({ securityInvoker: 'on' })\n  .as(\n    sql`SELECT p.id, p.first_name, p.last_name, p.email, p.person_type, p.auth_uid, pg.group_id, g.name AS group_name, pg.role, pg.\"position\", pg.identifier, pc.name AS cycle_name, p.organization_id FROM mp_core_person p JOIN mp_core_person_group pg ON p.id = pg.person_id JOIN mp_core_group g ON pg.group_id = g.id LEFT JOIN infrastructure_program_cycle pc ON pg.cycle_id = pc.id WHERE g.active = true`\n  );\n\nexport const sessionParticipationSummary = pgView(\n  'session_participation_summary',\n  {\n    sessionId: uuid('session_id'),\n    date: date(),\n    sessionType: text('session_type'),\n    groupName: text('group_name'),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    totalTracked: bigint('total_tracked', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    presentCount: bigint('present_count', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    absentCount: bigint('absent_count', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    lateCount: bigint('late_count', { mode: 'number' }),\n    attendancePercentage: numeric('attendance_percentage'),\n  }\n)\n  .with({ securityInvoker: 'on' })\n  .as(\n    sql`SELECT s.id AS session_id, s.date, s.session_type, g.name AS group_name, count(pl.id) AS total_tracked, count( CASE WHEN pl.status = 'present'::text THEN 1 ELSE NULL::integer END) AS present_count, count( CASE WHEN pl.status = 'absent'::text THEN 1 ELSE NULL::integer END) AS absent_count, count( CASE WHEN pl.status = 'late'::text THEN 1 ELSE NULL::integer END) AS late_count, round(count( CASE WHEN pl.status = 'present'::text THEN 1 ELSE NULL::integer END)::numeric / NULLIF(count(pl.id), 0)::numeric * 100::numeric, 2) AS attendance_percentage FROM infrastructure_sessions s JOIN mp_core_group g ON g.id = s.group_id LEFT JOIN infrastructure_participation_log pl ON pl.session_id = s.id GROUP BY s.id, s.date, s.session_type, g.name`\n  );\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/packs.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[215,218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[215,218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[246,249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[246,249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[270,273],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[270,273],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":65,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":65,"endColumn":20,"suggestions":[{"fix":{"range":[1526,1585],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":71,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":71,"endColumn":18,"suggestions":[{"fix":{"range":[1667,1770],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":97,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":97,"endColumn":20,"suggestions":[{"fix":{"range":[2248,2304],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":18,"suggestions":[{"fix":{"range":[2646,2716],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":153,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":153,"endColumn":18,"suggestions":[{"fix":{"range":[3801,3869],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":193,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":193,"endColumn":18,"suggestions":[{"fix":{"range":[4935,5003],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":244,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":244,"endColumn":18,"suggestions":[{"fix":{"range":[6247,6303],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":267,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":267,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6890,6893],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6890,6893],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":271,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":271,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6963,6966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6963,6966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":340,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":340,"endColumn":18,"suggestions":[{"fix":{"range":[8804,8862],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@/lib/supabase/server';\n\n/**\n * Types for pack configuration and features\n */\nexport interface PackConfig {\n  id: string;\n  version: string;\n  schema_version: string;\n  prompt_library: any;\n  constraint_definitions: any;\n  ai_model_config: any;\n  active: boolean;\n  created_at?: string;\n}\n\nexport interface PackBehavior {\n  type: 'base' | 'enhanced';\n  aiEnabled: boolean;\n  philosophyOverlay: boolean;\n  useCoreLogicOnly: boolean;\n  packConfig?: PackConfig | null;\n  uiOverrides?: Record<string, string> | null;\n  version?: string;\n}\n\nexport interface PackFeatures {\n  // Base features (always available)\n  playerManagement: boolean;\n  basicObservations: boolean;\n  simplePdp: boolean;\n\n  // Enhanced features (only with philosophy packs)\n  aiEnabled: boolean;\n  philosophyOverlay: boolean;\n  advancedConstraints: boolean;\n  drillRecommendations: boolean;\n\n  // UI customization\n  uiOverrides?: Record<string, string> | null;\n}\n\n/**\n * Get the pack configuration for a specific overlay_version\n */\nexport const getPackConfig = async (\n  overlayVersion?: string | null\n): Promise<PackConfig | null> => {\n  try {\n    if (!overlayVersion || overlayVersion === 'mp-basic') {\n      return null;\n    }\n\n    const supabase = createClient();\n\n    // Use the existing mpbc_version_config table\n    const { data, error } = await supabase\n      .from('mpbc_version_config')\n      .select('*')\n      .eq('version', overlayVersion)\n      .eq('active', true)\n      .single();\n\n    if (error || !data) {\n      console.error('Error fetching pack configuration:', error);\n      return null;\n    }\n\n    return data as PackConfig;\n  } catch (error) {\n    console.error(\n      'Error getting pack config for version:',\n      overlayVersion,\n      error\n    );\n    return null;\n  }\n};\n\n/**\n * Get the pack configuration for a specific organization\n */\nexport const getOrgPackConfig = async (\n  orgId: string\n): Promise<PackConfig | null> => {\n  try {\n    const supabase = createClient();\n\n    // Get the organization's overlay_version\n    const { data: org, error: orgError } = await supabase\n      .from('mp_core_organizations')\n      .select('overlay_version')\n      .eq('id', orgId)\n      .single();\n\n    if (orgError || !org) {\n      console.error('Error fetching organization:', orgError);\n      return null;\n    }\n\n    const overlayVersion = org.overlay_version;\n\n    // If no overlay_version or it's mp-basic, return null (base functionality)\n    if (!overlayVersion || overlayVersion === 'mp-basic') {\n      return null;\n    }\n\n    // Get the pack configuration\n    return getPackConfig(overlayVersion);\n  } catch (error) {\n    console.error('Error getting org pack config for org:', orgId, error);\n    return null;\n  }\n};\n\n/**\n * Determine the pack behavior based on the organization's overlay_version\n */\nexport const getPackBehavior = async (orgId: string): Promise<PackBehavior> => {\n  try {\n    const packConfig = await getOrgPackConfig(orgId);\n\n    if (!packConfig) {\n      // Base functionality - no philosophy overlay, no AI\n      return {\n        type: 'base',\n        aiEnabled: false,\n        philosophyOverlay: false,\n        useCoreLogicOnly: true,\n        uiOverrides: null,\n      };\n    }\n\n    // Enhanced functionality with philosophy pack\n    const aiEnabled =\n      packConfig.ai_model_config &&\n      (packConfig.ai_model_config.enabled === true ||\n        packConfig.ai_model_config.enabled === 'true');\n\n    // Extract UI overrides from the config if available\n    const uiOverrides = packConfig.constraint_definitions?.ui_overrides || null;\n\n    return {\n      type: 'enhanced',\n      aiEnabled,\n      philosophyOverlay: true,\n      useCoreLogicOnly: false,\n      packConfig,\n      uiOverrides,\n      version: packConfig.version,\n    };\n  } catch (error) {\n    console.error('Error getting pack behavior for org:', orgId, error);\n\n    // Return base behavior as fallback\n    return {\n      type: 'base',\n      aiEnabled: false,\n      philosophyOverlay: false,\n      useCoreLogicOnly: true,\n      uiOverrides: null,\n    };\n  }\n};\n\n/**\n * Get available features based on the organization's pack configuration\n */\nexport const getPackFeatures = async (orgId: string): Promise<PackFeatures> => {\n  try {\n    const packBehavior = await getPackBehavior(orgId);\n\n    // Base features are always available\n    const features: PackFeatures = {\n      playerManagement: true,\n      basicObservations: true,\n      simplePdp: true,\n\n      // Enhanced features depend on pack configuration\n      aiEnabled: packBehavior.aiEnabled,\n      philosophyOverlay: packBehavior.type === 'enhanced',\n      advancedConstraints: packBehavior.type === 'enhanced',\n      drillRecommendations: packBehavior.type === 'enhanced',\n\n      // UI customization\n      ...(packBehavior.uiOverrides !== undefined\n        ? { uiOverrides: packBehavior.uiOverrides }\n        : {}),\n    };\n\n    return features;\n  } catch (error) {\n    console.error('Error getting pack features for org:', orgId, error);\n\n    // Return base features as fallback\n    return {\n      playerManagement: true,\n      basicObservations: true,\n      simplePdp: true,\n      aiEnabled: false,\n      philosophyOverlay: false,\n      advancedConstraints: false,\n      drillRecommendations: false,\n    };\n  }\n};\n\n/**\n * Check if a specific feature is available for an organization\n */\nexport const isFeatureAvailable = async (\n  orgId: string,\n  feature: keyof PackFeatures\n): Promise<boolean> => {\n  const features = await getPackFeatures(orgId);\n  return !!features[feature];\n};\n\n/**\n * Get the GPT prompt modification for a specific organization's pack\n * Returns null for base functionality (no AI)\n */\nexport const getGptPromptMod = async (\n  orgId: string\n): Promise<string | null> => {\n  const packBehavior = await getPackBehavior(orgId);\n\n  if (packBehavior.type === 'base' || !packBehavior.aiEnabled) {\n    return null;\n  }\n\n  const supabase = createClient();\n\n  // Get the prompt template for this version\n  const { data, error } = await supabase\n    .from('mpbc_prompt_templates')\n    .select('system_instructions')\n    .eq('use_case', 'philosophy_overlay')\n    .eq('version', packBehavior.version)\n    .eq('active', true)\n    .single();\n\n  if (error || !data) {\n    console.error('Error fetching prompt template:', error);\n    return null;\n  }\n\n  return data.system_instructions;\n};\n\n/**\n * Get UI overrides for a specific organization's pack\n * Returns null for base functionality (no UI overrides)\n */\nexport const getUiOverrides = async (\n  orgId: string\n): Promise<Record<string, string> | null> => {\n  const packBehavior = await getPackBehavior(orgId);\n  return packBehavior.uiOverrides ?? null;\n};\n\n/**\n * Apply pack-specific enhancements to data\n * This is used to add AI analysis, philosophy-specific constraints, etc.\n */\nexport const applyPackEnhancements = async <\n  T extends { packEnhancements?: any },\n>(\n  data: T,\n  orgId: string\n): Promise<T & { packEnhancements?: any }> => {\n  const packBehavior = await getPackBehavior(orgId);\n\n  if (packBehavior.type === 'base') {\n    // No enhancements for base functionality\n    return data;\n  }\n\n  // Add pack-specific enhancements\n  return {\n    ...data,\n    packEnhancements: {\n      aiEnabled: packBehavior.aiEnabled,\n      version: packBehavior.version,\n      // Add other pack-specific enhancements here\n    },\n  };\n};\n\n/**\n * Get constraint filters for a specific pack\n */\nexport const getPackConstraintFilters = async (\n  orgId: string\n): Promise<string[]> => {\n  const packBehavior = await getPackBehavior(orgId);\n\n  if (packBehavior.type === 'base') {\n    // No constraint filters for base functionality\n    return [];\n  }\n\n  // Extract constraint filters from pack config\n  return packBehavior.packConfig?.constraint_definitions?.filters || [];\n};\n\n/**\n * Create SQL condition for pack-specific filtering\n * This is useful for database queries that need to filter based on pack configuration\n */\nexport const createPackFilterCondition = async (\n  orgId: string,\n  tableAlias: string = 't'\n): Promise<string> => {\n  const constraintFilters = await getPackConstraintFilters(orgId);\n\n  if (constraintFilters.length === 0) {\n    // Base functionality - no additional filtering\n    return '1=1'; // Always true condition\n  }\n\n  // Create conditions based on pack configuration\n  const constraintList = constraintFilters.map(c => `'${c}'`).join(', ');\n  return `${tableAlias}.skill_tag IN (${constraintList})`;\n};\n\n/**\n * Get the subscription tier for an organization\n */\nexport const getSubscriptionTier = async (orgId: string): Promise<string> => {\n  const supabase = createClient();\n\n  const { data, error } = await supabase\n    .from('mp_core_organizations')\n    .select('subscription_tier')\n    .eq('id', orgId)\n    .single();\n\n  if (error || !data) {\n    console.error('Error fetching subscription tier:', error);\n    return 'free';\n  }\n\n  return data.subscription_tier || 'free';\n};\n\n/**\n * Check if a feature is available based on subscription tier\n */\nexport const isFeatureInTier = async (\n  orgId: string,\n  feature: string\n): Promise<boolean> => {\n  const tier = await getSubscriptionTier(orgId);\n\n  // Define which features are available in which tiers\n  const tierFeatures: Record<string, string[]> = {\n    free: ['playerManagement', 'basicObservations', 'simplePdp'],\n    pro: ['playerManagement', 'basicObservations', 'simplePdp', 'aiEnabled'],\n    elite: [\n      'playerManagement',\n      'basicObservations',\n      'simplePdp',\n      'aiEnabled',\n      'philosophyOverlay',\n      'advancedConstraints',\n      'drillRecommendations',\n    ],\n  };\n\n  return tierFeatures[tier]?.includes(feature) || false;\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/relations.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/role-logic.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'entityType' is defined but never used.","line":419,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":419,"endColumn":13},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":518,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":522,"endColumn":30,"suggestions":[{"messageId":"addBrackets","fix":{"range":[13473,14456],"text":"{ const { data: coachTeams } = await supabase\n        .from('mp_core_person_group')\n        .select('group_id')\n        .eq('person_id', personId)\n        .eq('role', 'coach');\n\n      if (!coachTeams || coachTeams.length === 0) {\n        return '1=0'; // No teams, no access\n      }\n\n      const teamIds = coachTeams.map(t => `'${t.group_id}'`).join(',');\n\n      if (tableName === 'mp_core_person') {\n        return `${tableAlias}.id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (\n        tableName === 'mpbc_development_plan' ||\n        tableName === 'mpbc_observations'\n      ) {\n        return `${tableAlias}.person_id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (tableName === 'mp_core_group') {\n        return `${tableAlias}.id IN (${teamIds})`;\n      }\n\n      return `${tableAlias}.group_id IN (${teamIds})`; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"no-case-declarations","severity":2,"message":"Unexpected lexical declaration in case block.","line":528,"column":7,"nodeType":"VariableDeclaration","messageId":"unexpected","endLine":528,"endColumn":72,"suggestions":[{"messageId":"addBrackets","fix":{"range":[13473,14456],"text":"{ const { data: coachTeams } = await supabase\n        .from('mp_core_person_group')\n        .select('group_id')\n        .eq('person_id', personId)\n        .eq('role', 'coach');\n\n      if (!coachTeams || coachTeams.length === 0) {\n        return '1=0'; // No teams, no access\n      }\n\n      const teamIds = coachTeams.map(t => `'${t.group_id}'`).join(',');\n\n      if (tableName === 'mp_core_person') {\n        return `${tableAlias}.id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (\n        tableName === 'mpbc_development_plan' ||\n        tableName === 'mpbc_observations'\n      ) {\n        return `${tableAlias}.person_id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (tableName === 'mp_core_group') {\n        return `${tableAlias}.id IN (${teamIds})`;\n      }\n\n      return `${tableAlias}.group_id IN (${teamIds})`; }"},"desc":"Add {} brackets around the case block."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":608,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":608,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15798,15801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15798,15801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":627,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":627,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16337,16340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16337,16340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'supabase' is assigned a value but never used.","line":843,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":843,"endColumn":17}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Role Logic System\n *\n * This file implements the canonical role logic system based on the following rules:\n *\n * 1. Person Type = Source of Truth\n *    All role-based identity (coach, player, admin, etc.) should be determined by:\n *    mpbc_person.person_type\n *\n * 2. All App Logic Derives from mpbc_person\n *    The app should treat mpbc_person as the source for:\n *    - Role (person_type: player, coach, etc)\n *    - Display name\n *    - Team/group association\n *    - Development plans, observations, metrics\n *\n * 3. Auth Layer Is Separate\n *    Authentication (email, auth_uid, etc.) still lives in mp_core_person or auth.users and links via:\n *    mpbc_person.person_id → mp_core_person.id → auth.users.id\n *\n * 4. Consistency Layer\n *    Multiple roles are explicitly stored via person_type or a scoped mp_core_person_role\n */\n\nimport { createClient } from '@/lib/supabase/server';\nimport { getPackFeatures, isFeatureAvailable } from '@/lib/db/packs';\n\n/**\n * Role types in the system\n */\nexport enum PersonType {\n  PLAYER = 'player',\n  COACH = 'coach',\n  ADMIN = 'admin',\n  SUPERADMIN = 'superadmin',\n  PARENT = 'parent',\n  OBSERVER = 'observer',\n}\n\n/**\n * Role capabilities in the system\n */\nexport enum Capability {\n  // Player capabilities\n  VIEW_OWN_DEVELOPMENT_PLANS = 'view_own_development_plans',\n  VIEW_OWN_OBSERVATIONS = 'view_own_observations',\n  SUBMIT_SELF_REFLECTION = 'submit_self_reflection',\n\n  // Coach capabilities\n  VIEW_TEAM_PLAYERS = 'view_team_players',\n  ADD_PLAYER = 'add_player',\n  EDIT_PLAYER = 'edit_player',\n  CREATE_DEVELOPMENT_PLAN = 'create_development_plan',\n  ADD_OBSERVATION = 'add_observation',\n  MANAGE_PRACTICE = 'manage_practice',\n\n  // Admin capabilities\n  MANAGE_COACHES = 'manage_coaches',\n  MANAGE_TEAMS = 'manage_teams',\n  VIEW_ORGANIZATION_DATA = 'view_organization_data',\n\n  // Superadmin capabilities\n  MANAGE_ORGANIZATIONS = 'manage_organizations',\n  MANAGE_SUBSCRIPTION = 'manage_subscription',\n  MANAGE_PHILOSOPHY_PACK = 'manage_philosophy_pack',\n\n  // Parent capabilities\n  VIEW_CHILD_DEVELOPMENT = 'view_child_development',\n\n  // Observer capabilities\n  VIEW_ASSIGNED_TEAMS = 'view_assigned_teams',\n}\n\n/**\n * Data access levels\n */\nexport enum AccessLevel {\n  NONE = 'none',\n  OWN = 'own',\n  TEAM = 'team',\n  ORGANIZATION = 'organization',\n  ALL = 'all',\n}\n\n/**\n * Role context for multi-role scenarios\n */\nexport interface RoleContext {\n  personId: string;\n  organizationId: string;\n  groupId?: string;\n  contextType?: 'team' | 'organization' | 'system';\n}\n\n/**\n * Person with role information\n */\nexport interface PersonWithRole {\n  id: string;\n  person_type: PersonType;\n  organization_id: string;\n  is_admin?: boolean;\n  is_superadmin?: boolean;\n  display_name?: string;\n  roles?: string[];\n  [key: string]: unknown;\n}\n\n/**\n * Get a person's primary role\n */\nexport async function getPersonRole(\n  personId: string\n): Promise<PersonType | null> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase\n    .from('mpbc_person')\n    .select('person_type')\n    .eq('id', personId)\n    .single();\n\n  if (error || !data) {\n    // console.error('Error fetching person role:', error);\n    return null;\n  }\n\n  return data.person_type as PersonType;\n}\n\n/**\n * Get all roles for a person\n */\nexport async function getAllPersonRoles(personId: string): Promise<string[]> {\n  const supabase = createClient();\n\n  // Get primary role from mpbc_person\n  const { data: personData, error: personError } = await supabase\n    .from('mpbc_person')\n    .select('person_type')\n    .eq('id', personId)\n    .single();\n\n  if (personError || !personData) {\n    // console.error('Error fetching person data:', personError);\n    return [];\n  }\n\n  // Get additional roles from mp_core_person_role\n  const { data: roleData, error: roleError } = await supabase\n    .from('mp_core_person_role')\n    .select('role')\n    .eq('person_id', personId)\n    .eq('active', true);\n\n  // Get basketball-specific roles from mpbc_person_role\n  const { data: bbRoleData, error: bbRoleError } = await supabase\n    .from('mpbc_person_role')\n    .select('role')\n    .eq('person_id', personId)\n    .eq('active', true);\n\n  if (roleError) {\n    // console.error('Error fetching person roles:', roleError);\n    return [personData.person_type];\n  }\n\n  // Combine primary role with additional roles\n  const roles = [personData.person_type];\n  if (roleData) {\n    roleData.forEach(r => roles.push(r.role));\n  }\n\n  if (bbRoleError) {\n    // console.error('Error fetching mpbc person roles:', bbRoleError);\n  } else if (bbRoleData) {\n    bbRoleData.forEach(r => roles.push(r.role));\n  }\n\n  return [...new Set(roles)]; // Remove duplicates\n}\n\n/**\n * Check if a person has a specific role\n */\nexport async function hasRole(\n  personId: string,\n  role: PersonType\n): Promise<boolean> {\n  const roles = await getAllPersonRoles(personId);\n  return roles.includes(role);\n}\n\n/**\n * Check if a person has a specific capability\n */\nexport async function hasCapability(\n  personId: string,\n  capability: Capability,\n  context?: RoleContext\n): Promise<boolean> {\n  const supabase = createClient();\n\n  // Get person with role information\n  const { data: person, error } = await supabase\n    .from('mpbc_person')\n    .select('id, person_type, organization_id, is_admin, is_superadmin')\n    .eq('id', personId)\n    .single();\n\n  if (error || !person) {\n    // console.error('Error fetching person data:', error);\n    return false;\n  }\n\n  // SuperAdmin has all capabilities\n  if (person.is_superadmin) {\n    return true;\n  }\n\n  // Organization admin has all org-level capabilities\n  if (person.is_admin && isOrgLevelCapability(capability)) {\n    return true;\n  }\n\n  // Check capability based on person_type (source of truth)\n  const personType = person.person_type as PersonType;\n\n  // Get pack features if needed for advanced capabilities\n  const packFeatures = await getPackFeatures(person.organization_id);\n\n  // Check capability based on role and context\n  switch (capability) {\n    // Player capabilities\n    case Capability.VIEW_OWN_DEVELOPMENT_PLANS:\n    case Capability.VIEW_OWN_OBSERVATIONS:\n    case Capability.SUBMIT_SELF_REFLECTION:\n      return (\n        personType === PersonType.PLAYER ||\n        personType === PersonType.COACH ||\n        person.is_admin ||\n        person.is_superadmin\n      );\n\n    // Coach capabilities\n    case Capability.VIEW_TEAM_PLAYERS:\n    case Capability.ADD_PLAYER:\n    case Capability.EDIT_PLAYER:\n    case Capability.CREATE_DEVELOPMENT_PLAN:\n    case Capability.ADD_OBSERVATION:\n    case Capability.MANAGE_PRACTICE:\n      // Basic coaching capabilities\n      if (\n        personType !== PersonType.COACH &&\n        !person.is_admin &&\n        !person.is_superadmin\n      ) {\n        return false;\n      }\n\n      // If context is provided, check if coach is assigned to the team\n      if (context?.groupId && personType === PersonType.COACH) {\n        return await isCoachAssignedToTeam(personId, context.groupId);\n      }\n\n      return true;\n\n    // Admin capabilities\n    case Capability.MANAGE_COACHES:\n    case Capability.MANAGE_TEAMS:\n    case Capability.VIEW_ORGANIZATION_DATA:\n      return person.is_admin || person.is_superadmin;\n\n    // Superadmin capabilities\n    case Capability.MANAGE_ORGANIZATIONS:\n    case Capability.MANAGE_SUBSCRIPTION:\n      return person.is_superadmin;\n\n    // Philosophy pack management - requires superadmin or admin with feature\n    case Capability.MANAGE_PHILOSOPHY_PACK:\n      if (person.is_superadmin) return true;\n      if (person.is_admin && packFeatures?.philosophyOverlay) return true;\n      return false;\n\n    // Parent capabilities\n    case Capability.VIEW_CHILD_DEVELOPMENT:\n      if (\n        personType !== PersonType.PARENT &&\n        !person.is_admin &&\n        !person.is_superadmin\n      ) {\n        return false;\n      }\n\n      // If context is provided, check if parent is linked to the player\n      if (context?.personId && personType === PersonType.PARENT) {\n        return await isParentOfPlayer(personId, context.personId);\n      }\n\n      return person.is_admin || person.is_superadmin;\n\n    // Observer capabilities\n    case Capability.VIEW_ASSIGNED_TEAMS:\n      if (\n        personType !== PersonType.OBSERVER &&\n        !person.is_admin &&\n        !person.is_superadmin\n      ) {\n        return false;\n      }\n\n      // If context is provided, check if observer is assigned to the team\n      if (context?.groupId && personType === PersonType.OBSERVER) {\n        return await isObserverAssignedToTeam(personId, context.groupId);\n      }\n\n      return person.is_admin || person.is_superadmin;\n\n    default:\n      return false;\n  }\n}\n\n/**\n * Check if a capability is organization-level\n */\nfunction isOrgLevelCapability(capability: Capability): boolean {\n  const orgLevelCapabilities = [\n    Capability.MANAGE_COACHES,\n    Capability.MANAGE_TEAMS,\n    Capability.VIEW_ORGANIZATION_DATA,\n    Capability.MANAGE_PHILOSOPHY_PACK,\n  ];\n\n  return orgLevelCapabilities.includes(capability);\n}\n\n/**\n * Check if a coach is assigned to a team\n */\nasync function isCoachAssignedToTeam(\n  coachId: string,\n  teamId: string\n): Promise<boolean> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase\n    .from('mp_core_person_group')\n    .select('id')\n    .eq('person_id', coachId)\n    .eq('group_id', teamId)\n    .eq('role', 'coach')\n    .single();\n\n  if (error) {\n    // console.error('Error checking coach assignment:', error);\n    return false;\n  }\n\n  return !!data;\n}\n\n/**\n * Check if a parent is linked to a player\n */\nasync function isParentOfPlayer(\n  parentId: string,\n  playerId: string\n): Promise<boolean> {\n  const supabase = createClient();\n\n  // This would depend on your specific schema for parent-player relationships\n  // Here's an example assuming there's a parent_player_relation table\n  const { data, error } = await supabase\n    .from('parent_player_relation')\n    .select('id')\n    .eq('parent_id', parentId)\n    .eq('player_id', playerId)\n    .single();\n\n  if (error) {\n    // console.error('Error checking parent-player relationship:', error);\n    return false;\n  }\n\n  return !!data;\n}\n\n/**\n * Check if an observer is assigned to a team\n */\nasync function isObserverAssignedToTeam(\n  observerId: string,\n  teamId: string\n): Promise<boolean> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase\n    .from('mp_core_person_group')\n    .select('id')\n    .eq('person_id', observerId)\n    .eq('group_id', teamId)\n    .eq('role', 'observer')\n    .single();\n\n  if (error) {\n    // console.error('Error checking observer assignment:', error);\n    return false;\n  }\n\n  return !!data;\n}\n\n/**\n * Get a person's data access level for a specific entity type\n */\nexport async function getDataAccessLevel(\n  personId: string,\n  entityType: 'player' | 'team' | 'observation' | 'development_plan'\n): Promise<AccessLevel> {\n  const supabase = createClient();\n\n  // Get person with role information\n  const { data: person, error } = await supabase\n    .from('mpbc_person')\n    .select('id, person_type, organization_id, is_admin, is_superadmin')\n    .eq('id', personId)\n    .single();\n\n  if (error || !person) {\n    // console.error('Error fetching person data:', error);\n    return AccessLevel.NONE;\n  }\n\n  // SuperAdmin has access to all data\n  if (person.is_superadmin) {\n    return AccessLevel.ALL;\n  }\n\n  // Organization admin has access to all org data\n  if (person.is_admin) {\n    return AccessLevel.ORGANIZATION;\n  }\n\n  // Access level based on person_type (source of truth)\n  const personType = person.person_type as PersonType;\n\n  switch (personType) {\n    case PersonType.PLAYER:\n      // Players can only see their own data\n      return AccessLevel.OWN;\n\n    case PersonType.COACH:\n      // Coaches can see team data\n      return AccessLevel.TEAM;\n\n    case PersonType.PARENT:\n      // Parents can see their children's data (treated as \"own\")\n      return AccessLevel.OWN;\n\n    case PersonType.OBSERVER:\n      // Observers can see assigned team data\n      return AccessLevel.TEAM;\n\n    default:\n      return AccessLevel.NONE;\n  }\n}\n\n/**\n * Get SQL conditions for data access based on role\n */\nexport async function getDataAccessConditions(\n  personId: string,\n  tableName: string,\n  tableAlias: string = 't'\n): Promise<string> {\n  const supabase = createClient();\n\n  // Get person with role information\n  const { data: person, error } = await supabase\n    .from('mpbc_person')\n    .select('id, person_type, organization_id, is_admin, is_superadmin')\n    .eq('id', personId)\n    .single();\n\n  if (error || !person) {\n    // console.error('Error fetching person data:', error);\n    return '1=0'; // No access\n  }\n\n  // SuperAdmin has access to all data\n  if (person.is_superadmin) {\n    return '1=1'; // Full access\n  }\n\n  // Organization admin has access to all org data\n  if (person.is_admin) {\n    return `${tableAlias}.organization_id = '${person.organization_id}'`;\n  }\n\n  // Access conditions based on person_type (source of truth)\n  const personType = person.person_type as PersonType;\n\n  switch (personType) {\n    case PersonType.PLAYER:\n      // Players can only see their own data\n      if (\n        tableName === 'mpbc_development_plan' ||\n        tableName === 'mpbc_observations'\n      ) {\n        return `${tableAlias}.person_id = '${personId}'`;\n      }\n      return `${tableAlias}.id = '${personId}'`;\n\n    case PersonType.COACH:\n      // Coaches can see data for their teams\n      const { data: coachTeams } = await supabase\n        .from('mp_core_person_group')\n        .select('group_id')\n        .eq('person_id', personId)\n        .eq('role', 'coach');\n\n      if (!coachTeams || coachTeams.length === 0) {\n        return '1=0'; // No teams, no access\n      }\n\n      const teamIds = coachTeams.map(t => `'${t.group_id}'`).join(',');\n\n      if (tableName === 'mp_core_person') {\n        return `${tableAlias}.id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (\n        tableName === 'mpbc_development_plan' ||\n        tableName === 'mpbc_observations'\n      ) {\n        return `${tableAlias}.person_id IN (\n          SELECT person_id FROM mp_core_person_group \n          WHERE group_id IN (${teamIds})\n        )`;\n      }\n\n      if (tableName === 'mp_core_group') {\n        return `${tableAlias}.id IN (${teamIds})`;\n      }\n\n      return `${tableAlias}.group_id IN (${teamIds})`;\n\n    default:\n      return '1=0'; // No access by default\n  }\n}\n\n/**\n * Get all persons with a specific role in an organization\n */\nexport async function getPersonsByRole(\n  organizationId: string,\n  role: PersonType\n): Promise<PersonWithRole[]> {\n  const supabase = createClient();\n\n  const { data, error } = await supabase\n    .from('mpbc_person')\n    .select(\n      'id, person_type, organization_id, is_admin, is_superadmin, display_name'\n    )\n    .eq('organization_id', organizationId)\n    .eq('person_type', role);\n\n  if (error) {\n    // console.error('Error fetching persons by role:', error);\n    return [];\n  }\n\n  return data as PersonWithRole[];\n}\n\n/**\n * Get all roles available in the system\n * This can be filtered by pack features\n */\nexport async function getAvailableRoles(\n  organizationId: string\n): Promise<PersonType[]> {\n  // Base roles always available\n  const baseRoles = [PersonType.PLAYER, PersonType.COACH, PersonType.ADMIN];\n\n  // Check pack features for additional roles\n  const packFeatures = await getPackFeatures(organizationId);\n\n  if (packFeatures?.aiEnabled && packFeatures?.advancedConstraints) {\n    baseRoles.push(PersonType.OBSERVER);\n  }\n\n  return baseRoles;\n}\n\n/**\n * Get UI configuration based on person's role\n */\nexport async function getRoleUiConfig(\n  personId: string\n): Promise<Record<string, any>> {\n  const supabase = createClient();\n\n  // Get person with role information\n  const { data: person, error } = await supabase\n    .from('mpbc_person')\n    .select('id, person_type, organization_id, is_admin, is_superadmin')\n    .eq('id', personId)\n    .single();\n\n  if (error || !person) {\n    // console.error('Error fetching person data:', error);\n    return {};\n  }\n\n  // Get pack features and UI overrides\n  const packFeatures = await getPackFeatures(person.organization_id);\n\n  // Base UI config\n  const uiConfig: Record<string, any> = {\n    showDashboard: true,\n    showPlayers: false,\n    showTeams: false,\n    showCoaches: false,\n    showObservations: false,\n    showSettings: false,\n    showAdmin: false,\n    navigationItems: ['dashboard'],\n  };\n\n  // SuperAdmin sees everything\n  if (person.is_superadmin) {\n    return {\n      showDashboard: true,\n      showPlayers: true,\n      showTeams: true,\n      showCoaches: true,\n      showObservations: true,\n      showSettings: true,\n      showAdmin: true,\n      navigationItems: [\n        'dashboard',\n        'players',\n        'teams',\n        'coaches',\n        'observations',\n        'settings',\n        'admin',\n      ],\n    };\n  }\n\n  // Organization admin sees org-level items\n  if (person.is_admin) {\n    uiConfig.showPlayers = true;\n    uiConfig.showTeams = true;\n    uiConfig.showCoaches = true;\n    uiConfig.showObservations = true;\n    uiConfig.showSettings = true;\n    uiConfig.showAdmin = true;\n    uiConfig.navigationItems = [\n      'dashboard',\n      'players',\n      'teams',\n      'coaches',\n      'observations',\n      'settings',\n      'admin',\n    ];\n\n    // Adjust based on pack features\n    if (!packFeatures?.philosophyOverlay) {\n      uiConfig.showAdmin = false;\n      uiConfig.navigationItems = uiConfig.navigationItems.filter(\n        (item: string) => item !== 'admin'\n      );\n    }\n\n    return uiConfig;\n  }\n\n  // Role-specific UI configuration based on person_type (source of truth)\n  const personType = person.person_type as PersonType;\n\n  switch (personType) {\n    case PersonType.PLAYER:\n      return {\n        ...uiConfig,\n        showObservations: true,\n        navigationItems: ['dashboard', 'observations'],\n      };\n\n    case PersonType.COACH:\n      return {\n        ...uiConfig,\n        showPlayers: true,\n        showTeams: true,\n        showObservations: true,\n        navigationItems: ['dashboard', 'players', 'teams', 'observations'],\n      };\n\n    case PersonType.PARENT:\n      return {\n        ...uiConfig,\n        showObservations: true,\n        navigationItems: ['dashboard', 'observations'],\n      };\n\n    case PersonType.OBSERVER:\n      return {\n        ...uiConfig,\n        showTeams: true,\n        showObservations: true,\n        navigationItems: ['dashboard', 'teams', 'observations'],\n      };\n\n    default:\n      return uiConfig;\n  }\n}\n\n/**\n * Check if a person has multiple roles\n */\nexport async function hasMultipleRoles(personId: string): Promise<boolean> {\n  const roles = await getAllPersonRoles(personId);\n  return roles.length > 1;\n}\n\n/**\n * Get all roles for a person with contexts\n * This is used for handling multiple roles across different contexts\n */\nexport async function getPersonRolesWithContext(\n  personId: string\n): Promise<Array<{ role: string; context: RoleContext }>> {\n  const supabase = createClient();\n\n  // Get primary role from mpbc_person\n  const { data: personData, error: personError } = await supabase\n    .from('mpbc_person')\n    .select('person_type, organization_id')\n    .eq('id', personId)\n    .single();\n\n  if (personError || !personData) {\n    // console.error('Error fetching person data:', personError);\n    return [];\n  }\n\n  const result: Array<{ role: string; context: RoleContext }> = [\n    {\n      role: personData.person_type,\n      context: {\n        personId,\n        organizationId: personData.organization_id,\n        contextType: 'organization',\n      },\n    },\n  ];\n\n  // Get additional roles from mp_core_person_role with context\n  const { data: roleData, error: roleError } = await supabase\n    .from('mp_core_person_role')\n    .select('role, organization_id, scope_type, scope_ids')\n    .eq('person_id', personId)\n    .eq('active', true);\n\n  if (roleError) {\n    // console.error('Error fetching person roles:', roleError);\n    return result;\n  }\n\n  // Add additional roles with context\n  if (roleData) {\n    roleData.forEach(r => {\n      // For each role, create a context\n      const context: RoleContext = {\n        personId,\n        organizationId: r.organization_id,\n        contextType: r.scope_type as 'team' | 'organization' | 'system',\n      };\n\n      // If scope is team, add the team ID\n      if (r.scope_type === 'team' && r.scope_ids && r.scope_ids.length > 0) {\n        context.groupId = r.scope_ids[0];\n      }\n\n      result.push({\n        role: r.role,\n        context,\n      });\n    });\n  }\n\n  // ----- Basketball-specific roles -----\n  const { data: bbRoleData, error: bbRoleError } = await supabase\n    .from('mpbc_person_role')\n    .select('role, organization_id, scope_type, scope_ids')\n    .eq('person_id', personId)\n    .eq('active', true);\n\n  if (bbRoleError) {\n    // console.error('Error fetching mpbc person roles:', bbRoleError);\n  } else if (bbRoleData) {\n    bbRoleData.forEach(r => {\n      const context: RoleContext = {\n        personId,\n        organizationId: r.organization_id,\n        contextType: r.scope_type as 'team' | 'organization' | 'system',\n      };\n\n      if (r.scope_type === 'team' && r.scope_ids && r.scope_ids.length > 0) {\n        context.groupId = r.scope_ids[0];\n      }\n\n      result.push({\n        role: r.role,\n        context,\n      });\n    });\n  }\n\n  return result;\n}\n\n/**\n * Switch active role for a user with multiple roles\n * This updates the session to use a different role context\n */\nexport async function switchActiveRole(\n  personId: string,\n  newRole: string,\n  context: RoleContext\n): Promise<boolean> {\n  const supabase = createClient();\n\n  // Verify the person has this role in this context\n  const roles = await getPersonRolesWithContext(personId);\n  const hasRole = roles.some(\n    r =>\n      r.role === newRole &&\n      r.context.organizationId === context.organizationId &&\n      (!context.groupId || r.context.groupId === context.groupId)\n  );\n\n  if (!hasRole) {\n    return false;\n  }\n\n  // Store the active role context in the session\n  // This would typically update a session or cookie\n  // For this example, we'll just return true\n  return true;\n}\n\n/**\n * Integrate with pack system to check if a feature is available for a role\n */\nexport async function isFeatureAvailableForRole(\n  personId: string,\n  feature: string\n): Promise<boolean> {\n  const supabase = createClient();\n\n  // Get person with role information\n  const { data: person, error } = await supabase\n    .from('mpbc_person')\n    .select('id, person_type, organization_id, is_admin, is_superadmin')\n    .eq('id', personId)\n    .single();\n\n  if (error || !person) {\n    // console.error('Error fetching person data:', error);\n    return false;\n  }\n\n  // SuperAdmin has access to all features\n  if (person.is_superadmin) {\n    return true;\n  }\n\n  // Check if the feature is available in the organization's pack\n  const featureAvailable = await isFeatureAvailable(\n    person.organization_id,\n    feature as string\n  );\n\n  // If feature is not available in the pack, no one gets it\n  if (!featureAvailable) {\n    return false;\n  }\n\n  // Organization admin has access to all available features\n  if (person.is_admin) {\n    return true;\n  }\n\n  // Role-specific feature access based on person_type (source of truth)\n  const personType = person.person_type as PersonType;\n\n  // Define which features are available to which roles\n  const roleFeatures: Record<PersonType, string[]> = {\n    [PersonType.PLAYER]: ['playerManagement', 'basicObservations', 'simplePdp'],\n    [PersonType.COACH]: [\n      'playerManagement',\n      'basicObservations',\n      'simplePdp',\n      'aiEnabled',\n      'drillRecommendations',\n    ],\n    [PersonType.ADMIN]: [\n      'playerManagement',\n      'basicObservations',\n      'simplePdp',\n      'aiEnabled',\n      'philosophyOverlay',\n      'advancedConstraints',\n      'drillRecommendations',\n    ],\n    [PersonType.SUPERADMIN]: [\n      'playerManagement',\n      'basicObservations',\n      'simplePdp',\n      'aiEnabled',\n      'philosophyOverlay',\n      'advancedConstraints',\n      'drillRecommendations',\n    ],\n    [PersonType.PARENT]: ['playerManagement', 'basicObservations'],\n    [PersonType.OBSERVER]: [\n      'playerManagement',\n      'basicObservations',\n      'aiEnabled',\n    ],\n  };\n\n  return roleFeatures[personType]?.includes(feature) || false;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/schema.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'table' is defined but never used.","line":2861,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":2861,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import {\n  pgTable,\n  bigint,\n  text,\n  timestamp,\n  uuid,\n  boolean,\n  index,\n  foreignKey,\n  jsonb,\n  doublePrecision,\n  integer,\n  pgPolicy,\n  unique,\n  check,\n  date,\n  time,\n  numeric,\n  varchar,\n  pgView,\n  pgEnum,\n} from 'drizzle-orm/pg-core';\nimport { sql } from 'drizzle-orm';\n\nexport const groupType = pgEnum('group_type', ['team', 'pod', 'session']);\n\nexport const mpPhilosophyArcCollective = pgTable(\n  'mp_philosophy_arc_collective',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    phase: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const mpbcOutcome = pgTable('mpbc_outcome', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  themeId: uuid('theme_id'),\n  phaseId: uuid('phase_id'),\n  measurementType: text('measurement_type'),\n  successCriteria: text('success_criteria'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPersonGroup = pgTable(\n  'mpbc_person_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    role: text(),\n    organizationId: uuid('organization_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    cycleId: uuid('cycle_id'),\n    position: text(),\n    identifier: text(),\n    status: text(),\n    metadata: jsonb(),\n    joinedAt: timestamp('joined_at', { withTimezone: true, mode: 'string' }),\n    leftAt: timestamp('left_at', { withTimezone: true, mode: 'string' }),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('idx_mpbc_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpbcGroup.id],\n      name: 'mpbc_person_group_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_person_group_person_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcPerformanceMetrics = pgTable('mpbc_performance_metrics', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  entityType: text('entity_type'),\n  entityId: uuid('entity_id'),\n  metricType: text('metric_type'),\n  metricValue: doublePrecision('metric_value'),\n  metricDate: timestamp('metric_date', { withTimezone: true, mode: 'string' }),\n  seasonId: uuid('season_id'),\n  calculationMethod: text('calculation_method'),\n  dataPoints: integer('data_points'),\n  confidenceScore: doublePrecision('confidence_score'),\n  notes: text(),\n  calculatedAt: timestamp('calculated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n});\n\nexport const mpbcPerformanceIndicators = pgTable(\n  'mpbc_performance_indicators',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    claBenchmarkId: uuid('cla_benchmark_id'),\n    level: text(),\n    description: text(),\n    mpCoreBenchmarkStandardId: uuid('mp_core_benchmark_standard_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPersonProfile = pgTable('mpbc_person_profile', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCorePersonId: uuid('mp_core_person_id'),\n  ageBandId: uuid('age_band_id'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  advancementLevel: text('advancement_level'),\n  responsibilityTier: text('responsibility_tier'),\n  basketballProfile: jsonb('basketball_profile'),\n});\n\nexport const mpbcPersonMetadata = pgTable('mpbc_person_metadata', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCorePersonId: uuid('mp_core_person_id'),\n  advancementLevel: text('advancement_level'),\n  responsibilityTier: text('responsibility_tier'),\n  basketballProfile: jsonb('basketball_profile'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPerson = pgTable(\n  'mpbc_person',\n  {\n    id: uuid().primaryKey().notNull(),\n    mpCorePersonId: uuid('mp_core_person_id').notNull(),\n    basketballAdvancementLevel: text('basketball_advancement_level'),\n    basketballResponsibilityTier: text('basketball_responsibility_tier'),\n    basketballCollectivePhase: text('basketball_collective_phase'),\n    position: text(),\n    jerseyNumber: text('jersey_number'),\n    height: text(),\n    skillRatings: jsonb('skill_ratings'),\n    strengths: text().array(),\n    areasForImprovement: text('areas_for_improvement').array(),\n    previousAdvancementLevel: text('previous_advancement_level'),\n    lastAdvancementDate: timestamp('last_advancement_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    advancementEvidence: text('advancement_evidence'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    userId: uuid('user_id'),\n    displayName: text('display_name'),\n    metadata: jsonb(),\n    firstName: text('first_name'),\n    lastName: text('last_name'),\n    email: text(),\n    phone: text(),\n    notes: text(),\n    personType: text('person_type'),\n    organizationId: uuid('organization_id'),\n    isAdmin: boolean('is_admin'),\n    isSuperadmin: boolean('is_superadmin'),\n    active: boolean(),\n    dateOfBirth: timestamp('date_of_birth', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    emergencyContact: jsonb('emergency_contact'),\n    profileImageUrl: text('profile_image_url'),\n    medicalInfo: jsonb('medical_info'),\n    parentGuardianInfo: jsonb('parent_guardian_info'),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    basketballProfile: jsonb('basketball_profile'),\n    businessProfile: jsonb('business_profile'),\n    educationProfile: jsonb('education_profile'),\n  },\n  table => [\n    index('idx_mpbc_person_mp_core_person_id').using(\n      'btree',\n      table.mpCorePersonId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_person_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.mpCorePersonId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_mpbc_person_mp_core_person',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.id],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_id_fkey',\n    }),\n    pgPolicy('temp_allow_all_authenticated_read_mpbc_person', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcPhase = pgTable('mpbc_phase', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  pillarId: uuid('pillar_id'),\n  keyConcepts: text('key_concepts'),\n  orderIndex: integer('order_index'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpCoreOrganizations = pgTable(\n  'mp_core_organizations',\n  {\n    name: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    type: text().default('sports').notNull(),\n    description: text(),\n    logoUrl: text('logo_url'),\n    contactInfo: jsonb('contact_info').default({}),\n    settings: jsonb().default({}),\n    subscriptionTier: text('subscription_tier').default('basic'),\n    overlayVersion: text('overlay_version').default('mpbc-v1.0'),\n    active: boolean().default(true),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    index('idx_orgs_id').using(\n      'btree',\n      table.id.asc().nullsLast().op('uuid_ops')\n    ),\n  ]\n);\n\nexport const infrastructureInvites = pgTable(\n  'infrastructure_invites',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    email: text().notNull(),\n    organizationId: uuid('organization_id'),\n    role: text().default('member'),\n    status: text().default('pending'),\n    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'invites_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyBenchmarkFramework = pgTable(\n  'mp_philosophy_benchmark_framework',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    description: text().notNull(),\n    measurementTypes: jsonb('measurement_types').notNull(),\n    progressionRules: jsonb('progression_rules').notNull(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [unique('mp_philosophy_benchmark_framework_name_key').on(table.name)]\n);\n\nexport const mpbcPillar = pgTable('mpbc_pillar', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  focusArea: text('focus_area'),\n  keyPrinciples: text('key_principles'),\n  desiredOutcomes: text('desired_outcomes'),\n  orderIndex: integer('order_index'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpPhilosophyArcResponsibility = pgTable(\n  'mp_philosophy_arc_responsibility',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    tier: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const mpbcAuditLog = pgTable('mpbc_audit_log', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  tableName: text('table_name'),\n  recordId: uuid('record_id'),\n  action: text(),\n  newValues: jsonb('new_values'),\n  changedBy: uuid('changed_by'),\n  changedAt: timestamp('changed_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcBenchmarkConstraints = pgTable('mpbc_benchmark_constraints', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  claBenchmarkId: uuid('cla_benchmark_id'),\n  constraintId: uuid('constraint_id'),\n  priority: integer(),\n  notes: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcAgeBands = pgTable('mpbc_age_bands', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  minAge: integer('min_age'),\n  maxAge: integer('max_age'),\n  description: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureMemberships = pgTable(\n  'infrastructure_memberships',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    userId: uuid('user_id'),\n    organizationId: uuid('organization_id'),\n    role: text().default('member'),\n    createdAt: timestamp('created_at', { mode: 'string' }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'memberships_organization_id_fkey',\n    }),\n    // TODO: Add foreign key to auth.users when available\n    // foreignKey({\n    // \t\tcolumns: [table.userId],\n    // \t\tforeignColumns: [users.id],\n    // \t\tname: \"memberships_user_id_fkey\"\n    // }),\n    check(\n      'memberships_role_check',\n      sql`role = ANY (ARRAY['owner'::text, 'admin'::text, 'member'::text])`\n    ),\n  ]\n);\n\nexport const mpbcBlockPlayerAssignment = pgTable(\n  'mpbc_block_player_assignment',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    blockId: uuid('block_id'),\n    playerId: uuid('player_id'),\n    specialRole: text('special_role'),\n    constraints: jsonb(),\n    objectives: text(),\n    modifications: text(),\n    performanceNotes: text('performance_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  }\n);\n\nexport const mpCorePersonRole = pgTable(\n  'mp_core_person_role',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n    role: text().notNull(),\n    permissions: text().array().default(['']),\n    scopeType: text('scope_type'),\n    scopeIds: uuid('scope_ids').array(),\n    active: boolean().default(true),\n    startedAt: timestamp('started_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    endedAt: timestamp('ended_at', { withTimezone: true, mode: 'string' }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('idx_person_role_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_role_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_role_created_by',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_role_organization',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_role_person',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_person_role_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'person_role_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpCoreIntentions = pgTable(\n  'mp_core_intentions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    title: text().notNull(),\n    description: text(),\n    targetDate: date('target_date'),\n    status: text().default('active'),\n    challengeLevel: integer('challenge_level').default(3),\n    benchmarkTargets: jsonb('benchmark_targets'),\n    developmentStage: text('development_stage'),\n    advancementLevel: integer('advancement_level'),\n    responsibilityTier: integer('responsibility_tier'),\n    progressPercentage: integer('progress_percentage').default(0),\n    domainCode: text('domain_code'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    claCategoryFocus: text('cla_category_focus'),\n    optimalChallengeLevel: integer('optimal_challenge_level'),\n    contextComplexityRating: integer('context_complexity_rating'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_intentions_group',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_intentions_person',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_intentions_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_intentions_team_id_fkey',\n    }),\n    pgPolicy('mp_core_intentions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.person_id = mp_core_intentions.person_id))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person_group mpg ON ((mpg.person_id = mp_core_intentions.person_id)))\n  WHERE ((ur.role = 'coach'::text) AND (mpg.group_id = ANY (ur.team_ids)) AND (mpg.status = 'active'::text)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person p ON ((p.id = mp_core_intentions.person_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = p.organization_id)))))`,\n    }),\n    pgPolicy('mp_core_intentions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpPhilosophyArcAdvancement = pgTable(\n  'mp_philosophy_arc_advancement',\n  {\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    level: bigint({ mode: 'number' }),\n    title: text(),\n    description: text(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n  }\n);\n\nexport const infrastructureParticipationLog = pgTable(\n  'infrastructure_participation_log',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    sessionId: uuid('session_id'),\n    personId: uuid('person_id'),\n    status: text().notNull(),\n    arrivalTime: time('arrival_time'),\n    departureTime: time('departure_time'),\n    participationLevel: integer('participation_level'),\n    energyLevel: integer('energy_level'),\n    focusLevel: integer('focus_level'),\n    notes: text(),\n    absenceReason: text('absence_reason'),\n    advanceNotice: boolean('advance_notice').default(false),\n    makeupRequired: boolean('makeup_required').default(false),\n    metadata: jsonb(),\n    recordedAt: timestamp('recorded_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    recordedBy: uuid('recorded_by'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_participation_log_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_participation_log_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_participation_log_session_id').using(\n      'btree',\n      table.sessionId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'participation_log_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.sessionId],\n      foreignColumns: [infrastructureSessions.id],\n      name: 'participation_log_session_id_fkey',\n    }),\n  ]\n);\n\nexport const infrastructureSessions = pgTable(\n  'infrastructure_sessions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    groupId: uuid('group_id'),\n    cycleId: uuid('cycle_id'),\n    sessionNumber: integer('session_number'),\n    sessionType: text('session_type').default('regular'),\n    date: date().notNull(),\n    startTime: time('start_time'),\n    endTime: time('end_time'),\n    location: text(),\n    sessionObjective: text('session_objective'),\n    preSessionNotes: text('pre_session_notes'),\n    postSessionNotes: text('post_session_notes'),\n    facilitatorReflection: text('facilitator_reflection'),\n    intensityLevel: integer('intensity_level'),\n    status: text().default('planned'),\n    expectedAttendance: integer('expected_attendance'),\n    actualAttendance: integer('actual_attendance'),\n    conditions: text(),\n    equipmentIssues: text('equipment_issues'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_sessions_cycle_id').using(\n      'btree',\n      table.cycleId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_sessions_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_sessions_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'infrastructure_sessions_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.cycleId],\n      foreignColumns: [infrastructureProgramCycle.id],\n      name: 'sessions_cycle_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'sessions_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_sessions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_group g ON ((g.id = infrastructure_sessions.group_id)))\n  WHERE ((ur.organization_id = g.organization_id) AND ((ur.is_admin = true) OR (infrastructure_sessions.group_id = ANY (ur.team_ids)))))))`,\n    }),\n    pgPolicy('infrastructure_sessions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpCorePersonGroup = pgTable(\n  'mp_core_person_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    role: text().notNull(),\n    organizationId: uuid('organization_id'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    cycleId: uuid('cycle_id'),\n    position: text(),\n    identifier: text(),\n    status: text().default('active'),\n    metadata: jsonb(),\n    joinedAt: timestamp('joined_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    leftAt: timestamp('left_at', { withTimezone: true, mode: 'string' }),\n    createdBy: uuid('created_by'),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    payerId: uuid('payer_id'),\n  },\n  table => [\n    index('idx_mp_core_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mp_core_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_cycle_id').using(\n      'btree',\n      table.cycleId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_group_id').using(\n      'btree',\n      table.groupId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_person_group_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_created_by',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_person_group_group',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_group_organization',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_payer',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_person_group_person',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_person_group_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_payer_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.payerId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_payer_id_mp_core_person_id_fk',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_person_group_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.cycleId],\n      foreignColumns: [infrastructureProgramCycle.id],\n      name: 'person_group_cycle_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'person_group_org_id_fkey',\n    }),\n    pgPolicy('mp_core_person_group_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.is_superadmin = true))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE (ur.person_id = mp_core_person_group.person_id))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_group g ON ((g.id = mp_core_person_group.group_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = g.organization_id)))) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.role = 'coach'::text) AND (mp_core_person_group.group_id = ANY (ur.team_ids))))))`,\n    }),\n    pgPolicy('mp_core_person_group_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpbcClaBenchmarks = pgTable('mpbc_cla_benchmarks', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  claCategoryId: uuid('cla_category_id'),\n  ageBandId: uuid('age_band_id'),\n  context: text(),\n  assessmentCriteria: text('assessment_criteria'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  benchmarkCategoryId: uuid('benchmark_category_id'),\n  advancementLevel: text('advancement_level'),\n});\n\nexport const mpbcClaCategories = pgTable('mpbc_cla_categories', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  learningFocus: text('learning_focus'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcCoachTemplatePreferences = pgTable(\n  'mpbc_coach_template_preferences',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    coachId: uuid('coach_id'),\n    templateId: uuid('template_id'),\n    preferenceScore: integer('preference_score'),\n    usageFrequency: integer('usage_frequency'),\n    lastUsed: timestamp('last_used', { withTimezone: true, mode: 'string' }),\n    preferredModifications: jsonb('preferred_modifications'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcConstraintType = pgTable('mpbc_constraint_type', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  applicationMethod: text('application_method'),\n  exampleImplementations: jsonb('example_implementations'),\n  intensityScalable: boolean('intensity_scalable'),\n  attendanceAdaptable: boolean('attendance_adaptable'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureProgramCycle = pgTable(\n  'infrastructure_program_cycle',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id'),\n    name: text().notNull(),\n    year: integer().notNull(),\n    term: text(),\n    startDate: date('start_date').notNull(),\n    endDate: date('end_date').notNull(),\n    description: text(),\n    objectives: text().array(),\n    active: boolean().default(true),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'program_cycle_organization_id_fkey',\n    }),\n    pgPolicy('program_cycle_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`((organization_id)::text = (((auth.jwt() ->> 'app_metadata'::text))::jsonb ->> 'organization_id'::text))`,\n    }),\n    pgPolicy('program_cycle_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('program_cycle_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('program_cycle_delete_policy', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n  ]\n);\n\nexport const mpCoreActions = pgTable(\n  'mp_core_actions',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    intentionId: uuid('intention_id'),\n    title: text().notNull(),\n    description: text(),\n    status: text().default('planned'),\n    executedAt: timestamp('executed_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    durationMinutes: integer('duration_minutes'),\n    challengeLevel: integer('challenge_level'),\n    successRate: numeric('success_rate', { precision: 5, scale: 2 }),\n    benchmarkAssessments: jsonb('benchmark_assessments'),\n    advancementProgress: jsonb('advancement_progress'),\n    responsibilityProgress: jsonb('responsibility_progress'),\n    challengeRating: integer('challenge_rating'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_actions_group',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'fk_actions_intention',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_actions_person',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'mp_core_actions_intention_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_actions_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_actions_team_id_fkey',\n    }),\n    pgPolicy('mp_core_actions_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.person_id = mp_core_actions.person_id)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person_group mpg ON ((mpg.person_id = mp_core_actions.person_id)))\n  WHERE ((ur.role = 'coach'::text) AND (mpg.group_id = ANY (ur.team_ids)) AND (mpg.status = 'active'::text)))) OR (EXISTS ( SELECT 1\n   FROM (get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n     JOIN mp_core_person p ON ((p.id = mp_core_actions.person_id)))\n  WHERE ((ur.is_admin = true) AND (ur.organization_id = p.organization_id)))))`,\n    }),\n    pgPolicy('mp_core_actions_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpCoreReflections = pgTable(\n  'mp_core_reflections',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    actionId: uuid('action_id'),\n    intentionId: uuid('intention_id'),\n    content: text().notNull(),\n    insights: text(),\n    nextSteps: text('next_steps'),\n    challengeFeedback: text('challenge_feedback'),\n    perceivedDifficulty: integer('perceived_difficulty'),\n    developmentInsights: jsonb('development_insights'),\n    benchmarkProgress: jsonb('benchmark_progress'),\n    advancementInsights: text('advancement_insights'),\n    responsibilityInsights: text('responsibility_insights'),\n    collectiveInsights: text('collective_insights'),\n    advancementProgress: jsonb('advancement_progress'),\n    responsibilityProgress: jsonb('responsibility_progress'),\n    collectiveProgress: jsonb('collective_progress'),\n    confidenceScore: integer('confidence_score'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.actionId],\n      foreignColumns: [mpCoreActions.id],\n      name: 'fk_reflections_action',\n    }),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_reflections_group',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'fk_reflections_intention',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_reflections_person',\n    }),\n    foreignKey({\n      columns: [table.actionId],\n      foreignColumns: [mpCoreActions.id],\n      name: 'mp_core_reflections_action_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.intentionId],\n      foreignColumns: [mpCoreIntentions.id],\n      name: 'mp_core_reflections_intention_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mp_core_reflections_person_id_fkey',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mp_core_reflections_team_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyArcTypes = pgTable(\n  'mp_philosophy_arc_types',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    description: text().notNull(),\n    domainCode: text('domain_code').notNull(),\n    stages: jsonb().notNull(),\n    typicalDurationDays: integer('typical_duration_days'),\n    defaultGraduationThreshold: numeric('default_graduation_threshold', {\n      precision: 5,\n      scale: 2,\n    }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [unique('mp_philosophy_arc_types_name_key').on(table.name)]\n);\n\nexport const mpbcCoreSkillMapping = pgTable('mpbc_core_skill_mapping', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpbcSkillId: uuid('mpbc_skill_id'),\n  coreSkillName: text('core_skill_name'),\n  mappingStrength: integer('mapping_strength'),\n  mappingContext: text('mapping_context'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  coreSkillId: uuid('core_skill_id'),\n  relationshipType: text('relationship_type'),\n  aiConfidenceScore: integer('ai_confidence_score'),\n  developmentPriority: integer('development_priority'),\n  contextualFactors: jsonb('contextual_factors'),\n  skillTransferCoefficient: doublePrecision('skill_transfer_coefficient'),\n  optimalAgeRange: text('optimal_age_range'),\n  prerequisiteSkills: text('prerequisite_skills').array(),\n  complementarySkills: text('complementary_skills').array(),\n});\n\nexport const mpbcConstraintsBank = pgTable('mpbc_constraints_bank', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  constraintName: text('constraint_name'),\n  constraintText: text('constraint_text'),\n  skillTag: text('skill_tag'),\n  offensiveOrDefensive: text('offensive_or_defensive'),\n  constraintType: text('constraint_type'),\n  exampleContexts: text('example_contexts'),\n  confidenceScore: numeric('confidence_score'),\n  notes: text(),\n  promptKeywords: text('prompt_keywords'),\n  aiParsingRules: jsonb('ai_parsing_rules'),\n});\n\nexport const mpbcConstraintManipulations = pgTable(\n  'mpbc_constraint_manipulations',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text(),\n    description: text(),\n    constraintType: text('constraint_type'),\n    claCategoryId: uuid('cla_category_id'),\n    challengeLevel: integer('challenge_level'),\n    implementationNotes: text('implementation_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcCoreSkills = pgTable('mpbc_core_skills', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  displayName: text('display_name'),\n  category: text(),\n  subcategory: text(),\n  description: text(),\n  synonyms: text().array(),\n  isActive: boolean('is_active').default(true),\n  parentSkillId: uuid('parent_skill_id'),\n  useCase: text('use_case'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  comboCode: text('combo_code'),\n});\n\nexport const mpbcPersonRole = pgTable(\n  'mpbc_person_role',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n    role: text().notNull(),\n    permissions: text().default(['']),\n    scopeType: text('scope_type'),\n    scopeIds: uuid('scope_ids'),\n    active: boolean().default(true),\n    startedAt: timestamp('started_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    endedAt: timestamp('ended_at', { withTimezone: true, mode: 'string' }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n  },\n  table => [\n    index('mpbc_person_role_organization_id_idx').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('mpbc_person_role_person_id_idx').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_created_by_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_person_role_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_person_role_organization_id_fkey1',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_person_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_person_role_person_id_fkey1',\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlan = pgTable(\n  'mpbc_development_plan',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    playerId: uuid('player_id'),\n    groupId: uuid('group_id'),\n    seasonId: uuid('season_id'),\n    initialObservation: text('initial_observation'),\n    objective: text('objective'),\n    primaryPillarId: uuid('primary_pillar_id'),\n    secondaryPillarId: uuid('secondary_pillar_id'),\n    focusSkillsId: uuid('focus_skills_id'),\n    targetOutcomes: text('target_outcomes'),\n    baselineAssessment: text('baseline_assessment'),\n    targetMetrics: jsonb('target_metrics'),\n    timelineWeeks: integer('timeline_weeks'),\n    priorityLevel: text('priority_level'),\n    status: text('status'),\n    progressPercentage: integer('progress_percentage'),\n    lastReviewDate: timestamp('last_review_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    nextReviewDate: timestamp('next_review_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    progressNotes: text('progress_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    claPrimaryBenchmarkId: uuid('cla_primary_benchmark_id'),\n    claSecondaryBenchmarkId: uuid('cla_secondary_benchmark_id'),\n    claTertiaryBenchmarkId: uuid('cla_tertiary_benchmark_id'),\n    intelligenceDevelopmentGoals: jsonb('intelligence_development_goals'),\n    contextAssessmentEnabled: boolean('context_assessment_enabled'),\n    startDate: timestamp('start_date', { withTimezone: true, mode: 'string' }),\n    endDate: timestamp('end_date', { withTimezone: true, mode: 'string' }),\n    archivedAt: timestamp('archived_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    archivedBy: uuid('archived_by'),\n    targetEndDate: timestamp('target_end_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    actualEndDate: timestamp('actual_end_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    orgId: uuid('org_id'),\n    organizationId: uuid('organization_id'),\n    version: text('version'),\n    overlaySchema: text('overlay_schema'),\n    cycleId: uuid('cycle_id'),\n    personId: uuid('person_id'),\n    metadata: jsonb('metadata'),\n    oldId: uuid('old_id'),\n    migrationPhase: text('migration_phase'),\n    needsEnhancement: boolean('needs_enhancement'),\n    originalContent: text('original_content'),\n    priority: integer('priority'),\n  },\n  table => [\n    index('idx_mpbc_development_plan_archived_at').using(\n      'btree',\n      table.archivedAt.asc().nullsLast().op('timestamptz_ops')\n    ),\n    index('idx_mpbc_development_plan_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_development_plan_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'fk_mpbc_development_plan_person',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.groupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'mpbc_development_plan_group_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_development_plan_player_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.seasonId],\n      foreignColumns: [mpbcSeason.id],\n      name: 'mpbc_development_plan_season_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlanProgress = pgTable(\n  'mpbc_development_plan_progress',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    pdpId: uuid('pdp_id'),\n    skillTagId: uuid('skill_tag_id'),\n    assessmentDate: timestamp('assessment_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    previousLevel: text('previous_level'),\n    currentLevel: text('current_level'),\n    improvementNotes: text('improvement_notes'),\n    evidence: text(),\n    nextSteps: text('next_steps'),\n    assessedBy: uuid('assessed_by'),\n    assessmentMethod: text('assessment_method'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const infrastructureSystemSettings = pgTable(\n  'infrastructure_system_settings',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id'),\n    category: text().notNull(),\n    settingKey: text('setting_key').notNull(),\n    settingValue: jsonb('setting_value').notNull(),\n    description: text(),\n    dataType: text('data_type').notNull(),\n    isPublic: boolean('is_public').default(false),\n    requiresRestart: boolean('requires_restart').default(false),\n    lastChangedBy: uuid('last_changed_by'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    index('idx_system_settings_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'system_settings_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const infrastructureDashboardConfig = pgTable(\n  'infrastructure_dashboard_config',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    personId: uuid('person_id'),\n    dashboardType: text('dashboard_type').notNull(),\n    widgetConfig: jsonb('widget_config').notNull(),\n    isDefault: boolean('is_default').default(false),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_dashboard_config_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_dashboard_config_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'dashboard_config_organization_id_fkey',\n    }),\n  ]\n);\n\nexport const mpPhilosophyChallengePoint = pgTable(\n  'mp_philosophy_challenge_point',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    type: text(),\n    description: text(),\n    calculationRules: jsonb('calculation_rules'),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n  }\n);\n\nexport const mpbcCuePack = pgTable('mpbc_cue_pack', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  skillTagId: uuid('skill_tag_id'),\n  phaseId: uuid('phase_id'),\n  cueType: text('cue_type'),\n  cues: text().array(),\n  whenToUse: text('when_to_use'),\n  exampleScenarios: text('example_scenarios'),\n  effectivenessRating: integer('effectiveness_rating'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureFileStorage = pgTable(\n  'infrastructure_file_storage',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    fileName: text('file_name').notNull(),\n    originalName: text('original_name').notNull(),\n    filePath: text('file_path').notNull(),\n    fileType: text('file_type').notNull(),\n    fileSize: integer('file_size'),\n    bucketName: text('bucket_name').notNull(),\n    entityType: text('entity_type'),\n    entityId: uuid('entity_id'),\n    uploadedBy: uuid('uploaded_by'),\n    description: text(),\n    tags: text().array(),\n    publicAccess: boolean('public_access').default(false),\n    thumbnailPath: text('thumbnail_path'),\n    processingStatus: text('processing_status').default('uploaded'),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_file_storage_entity_id').using(\n      'btree',\n      table.entityId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_file_storage_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'file_storage_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_file_storage_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`((public_access = true) OR (EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (infrastructure_file_storage.uploaded_by = ur.person_id)))) OR ((entity_type = 'person'::text) AND (EXISTS ( SELECT 1\n   FROM mp_core_person p\n  WHERE (p.id = infrastructure_file_storage.entity_id)))))`,\n    }),\n    pgPolicy('infrastructure_file_storage_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('infrastructure_file_storage_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('infrastructure_file_storage_delete_policy', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const infrastructureNotificationQueue = pgTable(\n  'infrastructure_notification_queue',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    recipientId: uuid('recipient_id').notNull(),\n    notificationType: text('notification_type').notNull(),\n    subject: text(),\n    message: text().notNull(),\n    data: jsonb(),\n    priority: integer().default(3),\n    status: text().default('queued'),\n    scheduledFor: timestamp('scheduled_for', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    sentAt: timestamp('sent_at', { withTimezone: true, mode: 'string' }),\n    errorMessage: text('error_message'),\n    retryCount: integer('retry_count').default(0),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    index('idx_notification_queue_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_notification_queue_recipient_id').using(\n      'btree',\n      table.recipientId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'notification_queue_organization_id_fkey',\n    }),\n    pgPolicy('infrastructure_notification_queue_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.person_id = infrastructure_notification_queue.recipient_id))))`,\n    }),\n  ]\n);\n\nexport const mpbcDevelopmentPlanAssessments = pgTable(\n  'mpbc_development_plan_assessments',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    pdpId: uuid('pdp_id'),\n    mpCoreBenchmarkAssessmentId: uuid('mp_core_benchmark_assessment_id'),\n    assessmentDate: timestamp('assessment_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    videoEvidenceUrl: text('video_evidence_url'),\n    contextNotes: text('context_notes'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcDrillMaster = pgTable('mpbc_drill_master', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  subcategory: text(),\n  setupInstructions: text('setup_instructions'),\n  coachingPoints: text('coaching_points'),\n  equipmentNeeded: text('equipment_needed'),\n  spaceRequirements: text('space_requirements'),\n  minPlayers: integer('min_players'),\n  maxPlayers: integer('max_players'),\n  optimalPlayers: integer('optimal_players'),\n  durationMinutes: integer('duration_minutes'),\n  difficultyLevel: text('difficulty_level'),\n  ageAppropriate: text('age_appropriate'),\n  skillTags: text('skill_tags').array(),\n  phaseTags: text('phase_tags').array(),\n  videoUrl: text('video_url'),\n  diagramUrl: text('diagram_url'),\n  pdfUrl: text('pdf_url'),\n  tags: text().array(),\n  verified: boolean(),\n  usageCount: integer('usage_count'),\n  ratingAvg: doublePrecision('rating_avg'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpCoreGroup = pgTable(\n  'mp_core_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    name: text().notNull(),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    groupType: text('group_type'),\n    leadPersonId: uuid('lead_person_id'),\n    organizationId: uuid('organization_id'),\n    program: text(),\n    levelCategory: text('level_category'),\n    description: text(),\n    maxCapacity: integer('max_capacity'),\n    schedule: jsonb(),\n    active: boolean().default(true),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_created_by',\n    }),\n    foreignKey({\n      columns: [table.leadPersonId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_lead_person',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_group_organization',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [mpCorePerson.id],\n      name: 'fk_group_updated_by',\n    }),\n    pgPolicy('mp_core_group_select_policy', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(EXISTS ( SELECT 1\n   FROM get_user_role() ur(person_id, organization_id, role, is_superadmin, is_admin, team_ids)\n  WHERE ((ur.is_superadmin = true) OR (ur.organization_id = mp_core_group.organization_id))))`,\n    }),\n    pgPolicy('mp_core_group_update_policy', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('mp_core_group_insert_policy', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n  ]\n);\n\nexport const mpbcDrillPhaseTags = pgTable('mpbc_drill_phase_tags', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  drillId: uuid('drill_id'),\n  phaseId: uuid('phase_id'),\n  relevanceLevel: integer('relevance_level'),\n});\n\nexport const mpbcDrillSkillTags = pgTable('mpbc_drill_skill_tags', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  drillId: uuid('drill_id'),\n  skillTagId: uuid('skill_tag_id'),\n  emphasisLevel: integer('emphasis_level'),\n});\n\nexport const mpbcObservations = pgTable(\n  'mpbc_observations',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    playerId: uuid('player_id'),\n    observerId: uuid('observer_id'),\n    skillTags: text('skill_tags').array(),\n    claCategory: text('cla_category'),\n    context: text(),\n    observationText: text('observation_text'),\n    performanceRating: integer('performance_rating'),\n    basketballSpecificMetrics: jsonb('basketball_specific_metrics'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    developmentPlanId: uuid('development_plan_id'),\n    archivedAt: timestamp('archived_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    archivedBy: uuid('archived_by'),\n    orgId: uuid('org_id'),\n    personId: uuid('person_id'),\n    groupId: uuid('group_id'),\n    cycleId: uuid('cycle_id'),\n    organizationId: uuid('organization_id'),\n    tags: text().array(),\n    observationDate: timestamp('observation_date', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_mpbc_observations_archived_at').using(\n      'btree',\n      table.archivedAt.asc().nullsLast().op('timestamptz_ops')\n    ),\n    index('idx_mpbc_observations_development_plan_id').using(\n      'btree',\n      table.developmentPlanId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_observations_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mpbc_observations_person_id').using(\n      'btree',\n      table.personId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.developmentPlanId],\n      foreignColumns: [mpbcDevelopmentPlan.id],\n      name: 'fk_mpbc_observations_development_plan',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'fk_mpbc_observations_person',\n    }).onDelete('set null'),\n    foreignKey({\n      columns: [table.observerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_observations_observer_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_observations_player_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcGroup = pgTable(\n  'mpbc_group',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    mpCoreGroupId: uuid('mp_core_group_id'),\n    division: text(),\n    conference: text(),\n    playingStyle: text('playing_style'),\n    teamPhilosophy: text('team_philosophy'),\n    seasonRecord: text('season_record'),\n    teamStatistics: jsonb('team_statistics'),\n    homeCourt: text('home_court'),\n    practiceFacility: text('practice_facility'),\n    equipmentInventory: jsonb('equipment_inventory'),\n    travelRequirements: text('travel_requirements'),\n    collectiveSkillLevel: text('collective_skill_level'),\n    teamChemistryRating: integer('team_chemistry_rating'),\n    leadershipStructure: jsonb('leadership_structure'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    name: text(),\n    groupType: text('group_type'),\n    leadPersonId: uuid('lead_person_id'),\n    program: text(),\n    levelCategory: text('level_category'),\n    description: text(),\n    maxCapacity: integer('max_capacity'),\n    schedule: jsonb(),\n    metadata: jsonb(),\n    active: boolean(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_mpbc_group_mp_core_group_id').using(\n      'btree',\n      table.mpCoreGroupId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.mpCoreGroupId],\n      foreignColumns: [mpCoreGroup.id],\n      name: 'fk_mpbc_group_mp_core_group',\n    }).onDelete('cascade'),\n    foreignKey({\n      columns: [table.leadPersonId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_group_lead_person_id_fkey',\n    }),\n    pgPolicy('temp_allow_all_authenticated_read_mpbc_group', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcDrillOrg = pgTable('mpbc_drill_org', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  organizationId: uuid('organization_id'),\n  masterDrillId: uuid('master_drill_id'),\n  name: text(),\n  description: text(),\n  customizations: jsonb(),\n  private: boolean(),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcGoalTracking = pgTable('mpbc_goal_tracking', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  personId: uuid('person_id'),\n  pdpId: uuid('pdp_id'),\n  teamId: uuid('team_id'),\n  seasonId: uuid('season_id'),\n  goalType: text('goal_type'),\n  title: text(),\n  description: text(),\n  targetMetric: text('target_metric'),\n  targetValue: text('target_value'),\n  currentValue: text('current_value'),\n  deadline: timestamp({ withTimezone: true, mode: 'string' }),\n  priority: text(),\n  status: text(),\n  progressNotes: text('progress_notes'),\n  lastUpdated: timestamp('last_updated', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcGroupMetadata = pgTable('mpbc_group_metadata', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpCoreGroupId: uuid('mp_core_group_id'),\n  collectiveGrowthPhase: text('collective_growth_phase'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcGroupProfile = pgTable('mpbc_group_profile', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  mpbcGroupId: uuid('mpbc_group_id'),\n  collectiveAdvancementLevel: text('collective_advancement_level'),\n  collectiveResponsibilityTier: text('collective_responsibility_tier'),\n  collectiveGrowthPhase: text('collective_growth_phase'),\n  offensiveRating: integer('offensive_rating'),\n  defensiveRating: integer('defensive_rating'),\n  paceOfPlay: integer('pace_of_play'),\n  teamEfficiency: integer('team_efficiency'),\n  strengths: text().array(),\n  areasForImprovement: text('areas_for_improvement').array(),\n  teamGoals: text('team_goals'),\n  problemSolvingEffectiveness: integer('problem_solving_effectiveness'),\n  adaptabilityRating: integer('adaptability_rating'),\n  communicationEffectiveness: integer('communication_effectiveness'),\n  performanceTrends: jsonb('performance_trends'),\n  milestoneAchievements: text('milestone_achievements').array(),\n  lastTeamAssessmentDate: timestamp('last_team_assessment_date', {\n    withTimezone: true,\n    mode: 'string',\n  }),\n  assessmentNotes: text('assessment_notes'),\n  nextDevelopmentTargets: text('next_development_targets').array(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcIndividualChallengePoints = pgTable(\n  'mpbc_individual_challenge_points',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    mpCorePersonId: uuid('mp_core_person_id'),\n    claCategoryId: uuid('cla_category_id'),\n    currentChallengeLevel: integer('current_challenge_level'),\n    optimalChallengeLevel: integer('optimal_challenge_level'),\n    successRate: doublePrecision('success_rate'),\n    lastCalculatedAt: timestamp('last_calculated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcOrganizations = pgTable('mpbc_organizations', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  name: text(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  type: text(),\n  description: text(),\n  logoUrl: text('logo_url'),\n  contactInfo: jsonb('contact_info'),\n  settings: jsonb(),\n  subscriptionTier: text('subscription_tier'),\n  overlayVersion: text('overlay_version'),\n  active: boolean(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcPracticeBlockClaConstraints = pgTable(\n  'mpbc_practice_block_cla_constraints',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    practiceBlockId: uuid('practice_block_id'),\n    constraintManipulationId: uuid('constraint_manipulation_id'),\n    applicationNotes: text('application_notes'),\n    effectivenessRating: integer('effectiveness_rating'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPracticeTemplatesEnhanced = pgTable(\n  'mpbc_practice_templates_enhanced',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    templateId: text('template_id'),\n    basePracticeNumber: integer('base_practice_number'),\n    attendanceMin: integer('attendance_min'),\n    attendanceMax: integer('attendance_max'),\n    intensityLevel: integer('intensity_level'),\n    focusArea: text('focus_area'),\n    templateBlocks: jsonb('template_blocks'),\n    estimatedDuration: integer('estimated_duration'),\n    mpbcAlignment: jsonb('mpbc_alignment'),\n    constraintDensity: doublePrecision('constraint_density'),\n    attendanceAdaptations: jsonb('attendance_adaptations'),\n    variabilityFactors: jsonb('variability_factors'),\n    claEnhanced: boolean('cla_enhanced'),\n    effectivenessScore: doublePrecision('effectiveness_score'),\n    usageCount: integer('usage_count'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  }\n);\n\nexport const mpbcPracticeBlock = pgTable('mpbc_practice_block', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  sessionId: uuid('session_id'),\n  masterDrillId: uuid('master_drill_id'),\n  orgDrillId: uuid('org_drill_id'),\n  blockName: text('block_name'),\n  description: text(),\n  phaseId: uuid('phase_id'),\n  themeId: uuid('theme_id'),\n  objective: text(),\n  durationMinutes: integer('duration_minutes'),\n  orderIndex: integer('order_index'),\n  format: text(),\n  constraints: jsonb(),\n  coachingEmphasis: text('coaching_emphasis'),\n  successCriteria: text('success_criteria'),\n  modifications: text(),\n  equipmentNeeded: text('equipment_needed'),\n  spaceSetup: text('space_setup'),\n  playerGroupings: jsonb('player_groupings'),\n  notes: text(),\n  completed: boolean(),\n  effectivenessRating: integer('effectiveness_rating'),\n  active: boolean(),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n  claIntelligenceTargets: jsonb('cla_intelligence_targets'),\n  contextComplexityLevel: integer('context_complexity_level'),\n  assessmentOpportunities: text('assessment_opportunities'),\n});\n\nexport const mpbcPracticeSession = pgTable('mpbc_practice_session', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  teamId: uuid('team_id'),\n  seasonId: uuid('season_id'),\n  sessionNumber: integer('session_number'),\n  date: timestamp({ withTimezone: true, mode: 'string' }),\n  startTime: timestamp('start_time', { withTimezone: true, mode: 'string' }),\n  endTime: timestamp('end_time', { withTimezone: true, mode: 'string' }),\n  location: text(),\n  facilityInfo: text('facility_info'),\n  primaryThemeId: uuid('primary_theme_id'),\n  secondaryThemeId: uuid('secondary_theme_id'),\n  sessionObjective: text('session_objective'),\n  prePracticeNotes: text('pre_practice_notes'),\n  postPracticeNotes: text('post_practice_notes'),\n  coachReflection: text('coach_reflection'),\n  intensityLevel: integer('intensity_level'),\n  status: text(),\n  expectedAttendance: integer('expected_attendance'),\n  actualAttendance: integer('actual_attendance'),\n  weatherConditions: text('weather_conditions'),\n  equipmentIssues: text('equipment_issues'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  createdBy: uuid('created_by'),\n  updatedBy: uuid('updated_by'),\n});\n\nexport const mpbcPlayerSkillChallenge = pgTable(\n  'mpbc_player_skill_challenge',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    developmentPlanId: uuid('development_plan_id'),\n    skillTagId: uuid('skill_tag_id'),\n    challengeTitle: text('challenge_title'),\n    description: text(),\n    successCriteria: text('success_criteria'),\n    practiceFrequency: text('practice_frequency'),\n    deadline: timestamp({ withTimezone: true, mode: 'string' }),\n    priority: text(),\n    difficulty: text(),\n    status: text(),\n    progressPercentage: integer('progress_percentage'),\n    coachNotes: text('coach_notes'),\n    playerNotes: text('player_notes'),\n    resources: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    playerId: uuid('player_id'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_created_by_fkey',\n    }),\n    foreignKey({\n      columns: [table.developmentPlanId],\n      foreignColumns: [mpbcDevelopmentPlan.id],\n      name: 'mpbc_player_skill_challenge_development_plan_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.playerId],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_player_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.skillTagId],\n      foreignColumns: [mpbcSkillTag.id],\n      name: 'mpbc_player_skill_challenge_skill_tag_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [mpbcPerson.id],\n      name: 'mpbc_player_skill_challenge_updated_by_fkey',\n    }),\n    pgPolicy('Allow read for all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const infrastructureInvitations = pgTable('infrastructure_invitations', {\n  id: uuid().defaultRandom().primaryKey().notNull(),\n  teamId: uuid('team_id').notNull(),\n  email: text().notNull(),\n  role: text().notNull(),\n  invitedBy: uuid('invited_by').notNull(),\n  invitedAt: timestamp('invited_at', { mode: 'string' }).defaultNow().notNull(),\n  status: varchar({ length: 20 }).default('pending').notNull(),\n});\n\nexport const mpbcPracticeTheme = pgTable('mpbc_practice_theme', {\n  id: uuid().defaultRandom().primaryKey().notNull(),\n  name: text(),\n  description: text(),\n  category: text(),\n  subcategory: text(),\n  phaseId: text('phase_id'),\n  pillarId: text('pillar_id'),\n  // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n  comboCode: bigint('combo_code', { mode: 'number' }),\n  synonyms: jsonb(),\n  useCase: text('use_case'),\n  verified: boolean(),\n  active: boolean(),\n  createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n  updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n  suggestedBy: text('suggested_by'),\n  sourceUid: text('source_uid'),\n});\n\nexport const mpbcPromptTemplates = pgTable('mpbc_prompt_templates', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  promptName: text('prompt_name').notNull(),\n  useCase: text('use_case').notNull(),\n  promptTemplate: text('prompt_template').notNull(),\n  systemInstructions: text('system_instructions'),\n  exampleInputs: jsonb('example_inputs'),\n  exampleOutputs: jsonb('example_outputs'),\n  modelParameters: jsonb('model_parameters'),\n  version: text().default('v1.0'),\n  active: boolean().default(true),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n  updatedAt: timestamp('updated_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcSeason = pgTable(\n  'mpbc_season',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    organizationId: uuid('organization_id').notNull(),\n    name: text().notNull(),\n    year: integer().notNull(),\n    term: text(),\n    startDate: date('start_date').notNull(),\n    endDate: date('end_date').notNull(),\n    description: text(),\n    goals: text().array(),\n    active: boolean().default(true),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n  },\n  table => [\n    index('idx_season_dates').using(\n      'btree',\n      table.startDate.asc().nullsLast().op('date_ops'),\n      table.endDate.asc().nullsLast().op('date_ops')\n    ),\n    index('idx_season_organization_active').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('bool_ops'),\n      table.active.asc().nullsLast().op('bool_ops')\n    ),\n    unique('unique_active_season').on(table.organizationId, table.active),\n    check('season_check', sql`end_date > start_date`),\n    check(\n      'season_term_check',\n      sql`term = ANY (ARRAY['fall'::text, 'winter'::text, 'spring'::text, 'summer'::text, 'annual'::text])`\n    ),\n  ]\n);\n\nexport const mpbcSessionParticipation = pgTable(\n  'mpbc_session_participation',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    sessionId: uuid('session_id').notNull(),\n    playerId: uuid('player_id').notNull(),\n    blocksParticipated: uuid('blocks_participated').array(),\n    leadershipDisplayed: text('leadership_displayed').array(),\n    effortLevel: integer('effort_level'),\n    attitudeRating: integer('attitude_rating'),\n    skillDemonstration: text('skill_demonstration').array(),\n    areasStruggled: text('areas_struggled').array(),\n    coachFeedback: text('coach_feedback'),\n    playerSelfAssessment: text('player_self_assessment'),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    recordedBy: uuid('recorded_by'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.sessionId],\n      foreignColumns: [mpbcPracticeSession.id],\n      name: 'session_participation_session_id_fkey',\n    }),\n    unique('session_participation_session_id_player_id_key').on(\n      table.sessionId,\n      table.playerId\n    ),\n    check(\n      'session_participation_attitude_rating_check',\n      sql`(attitude_rating >= 1) AND (attitude_rating <= 5)`\n    ),\n    check(\n      'session_participation_effort_level_check',\n      sql`(effort_level >= 1) AND (effort_level <= 5)`\n    ),\n  ]\n);\n\nexport const mpbcSignalType = pgTable('mpbc_signal_type', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  signalName: text('signal_name').notNull(),\n  description: text(),\n  category: text(),\n  triggerConditions: jsonb('trigger_conditions'),\n  recommendedActions: text('recommended_actions').array(),\n  priorityLevel: integer('priority_level').default(3),\n  autoGenerate: boolean('auto_generate').default(false),\n  promptTemplate: text('prompt_template'),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const infrastructureActivityLogs = pgTable(\n  'infrastructure_activity_logs',\n  {\n    action: text().notNull(),\n    timestamp: timestamp({ mode: 'string' }).defaultNow().notNull(),\n    ipAddress: varchar('ip_address', { length: 45 }),\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    personId: uuid('person_id'),\n    organizationId: uuid('organization_id'),\n  },\n  table => [\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'infrastructure_activity_logs_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'infrastructure_activity_logs_person_id_fkey',\n    }),\n  ]\n);\n\nexport const mpCorePerson = pgTable(\n  'mp_core_person',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    displayName: text('display_name').notNull(),\n    metadata: jsonb(),\n    createdAt: timestamp('created_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    updatedAt: timestamp('updated_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n    firstName: text('first_name'),\n    lastName: text('last_name'),\n    email: text(),\n    phone: text(),\n    notes: text(),\n    personType: text('person_type'),\n    organizationId: uuid('organization_id'),\n    isAdmin: boolean('is_admin').default(false),\n    isSuperadmin: boolean('is_superadmin').default(false),\n    active: boolean().default(true),\n    dateOfBirth: date('date_of_birth'),\n    emergencyContact: jsonb('emergency_contact'),\n    profileImageUrl: text('profile_image_url'),\n    medicalInfo: jsonb('medical_info'),\n    parentGuardianInfo: jsonb('parent_guardian_info'),\n    createdBy: uuid('created_by'),\n    updatedBy: uuid('updated_by'),\n    authUid: uuid('auth_uid'),\n    stripeCustomerId: text('stripe_customer_id'),\n    stripeSubscriptionId: text('stripe_subscription_id'),\n    stripeProductId: text('stripe_product_id'),\n    planName: text('plan_name'),\n    subscriptionStatus: text('subscription_status'),\n    seatsPurchased: integer('seats_purchased').default(1),\n    seatsUsed: integer('seats_used').default(1),\n  },\n  table => [\n    index('idx_mp_core_person_auth_uid').using(\n      'btree',\n      table.authUid.asc().nullsLast().op('uuid_ops')\n    ),\n    index('idx_mp_core_person_organization_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.createdBy],\n      foreignColumns: [table.id],\n      name: 'fk_person_created_by',\n    }),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'fk_person_organization',\n    }),\n    foreignKey({\n      columns: [table.updatedBy],\n      foreignColumns: [table.id],\n      name: 'fk_person_updated_by',\n    }),\n    // TODO: Add foreign key to auth.users when available\n    // foreignKey({\n    // \t\tcolumns: [table.authUid],\n    // \t\tforeignColumns: [users.id],\n    // \t\tname: \"mp_core_person_auth_uid_fkey\"\n    // }),\n    unique('mp_core_person_stripe_customer_id_key').on(table.stripeCustomerId),\n    unique('mp_core_person_stripe_customer_id_unique').on(\n      table.stripeCustomerId\n    ),\n    unique('mp_core_person_stripe_subscription_id_key').on(\n      table.stripeSubscriptionId\n    ),\n    unique('mp_core_person_stripe_subscription_id_unique').on(\n      table.stripeSubscriptionId\n    ),\n    pgPolicy('Allow authenticated users to read their own record', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`(auth_uid = auth.uid())`,\n    }),\n    pgPolicy('Allow authenticated users to insert their own record', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('Allow authenticated users to update their own record', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to read person records', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n    }),\n    pgPolicy('Superadmin can select all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Superadmin can insert all', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Allow organization admins to create person records', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to update person records', {\n      as: 'permissive',\n      for: 'update',\n      to: ['public'],\n    }),\n    pgPolicy('Allow organization admins to delete person records', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['public'],\n    }),\n    pgPolicy('Superadmin can update all', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Superadmin can delete all', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can select all in org', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can insert in org', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can update all in org', {\n      as: 'permissive',\n      for: 'update',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Admin can delete all in org', {\n      as: 'permissive',\n      for: 'delete',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Coach can select own record in org', {\n      as: 'permissive',\n      for: 'select',\n      to: ['authenticated'],\n    }),\n    pgPolicy('Coach can insert own record in org', {\n      as: 'permissive',\n      for: 'insert',\n      to: ['authenticated'],\n    }),\n  ]\n);\n\nexport const mpbcTemplateUsageLog = pgTable(\n  'mpbc_template_usage_log',\n  {\n    id: uuid()\n      .default(sql`uuid_generate_v4()`)\n      .primaryKey()\n      .notNull(),\n    templateId: uuid('template_id'),\n    sessionId: uuid('session_id'),\n    organizationId: uuid('organization_id'),\n    coachId: uuid('coach_id'),\n    attendanceActual: integer('attendance_actual'),\n    effectivenessRating: integer('effectiveness_rating'),\n    modificationsMade: jsonb('modifications_made'),\n    coachFeedback: text('coach_feedback'),\n    wouldUseAgain: boolean('would_use_again'),\n    usedAt: timestamp('used_at', {\n      withTimezone: true,\n      mode: 'string',\n    }).defaultNow(),\n  },\n  table => [\n    foreignKey({\n      columns: [table.templateId],\n      foreignColumns: [mpbcPracticeTemplatesEnhanced.id],\n      name: 'template_usage_log_template_id_fkey',\n    }),\n  ]\n);\n\nexport const mpbcSkillPrerequisites = pgTable('mpbc_skill_prerequisites', {\n  skillId: text('skill_id'),\n  prerequisiteSkillId: text('prerequisite_skill_id'),\n  required: boolean(),\n  id: uuid().defaultRandom().primaryKey().notNull(),\n});\n\nexport const mpbcVersionConfig = pgTable('mpbc_version_config', {\n  id: uuid()\n    .default(sql`uuid_generate_v4()`)\n    .primaryKey()\n    .notNull(),\n  version: text().notNull(),\n  schemaVersion: text('schema_version').notNull(),\n  promptLibrary: jsonb('prompt_library'),\n  constraintDefinitions: jsonb('constraint_definitions'),\n  aiModelConfig: jsonb('ai_model_config'),\n  active: boolean().default(true),\n  createdAt: timestamp('created_at', {\n    withTimezone: true,\n    mode: 'string',\n  }).defaultNow(),\n});\n\nexport const mpbcSkillTag = pgTable(\n  'mpbc_skill_tag',\n  {\n    id: uuid().defaultRandom().primaryKey().notNull(),\n    name: text(),\n    description: text(),\n    category: text(),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    difficultyLevel: bigint('difficulty_level', { mode: 'number' }),\n    prerequisites: text(),\n    pillarId: text('pillar_id'),\n    parentSkillId: text('parent_skill_id'),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    progressionOrder: bigint('progression_order', { mode: 'number' }),\n    active: boolean(),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n    claCategoryMapping: text('cla_category_mapping'),\n    intelligenceFocus: text('intelligence_focus'),\n    contextRequirements: text('context_requirements'),\n  },\n  table => [\n    pgPolicy('Allow read for all', {\n      as: 'permissive',\n      for: 'select',\n      to: ['public'],\n      using: sql`true`,\n    }),\n  ]\n);\n\nexport const mpbcCorePersonProfile = pgTable(\n  'mpbc_core_person_profile',\n  {\n    personId: uuid('person_id').primaryKey().notNull(),\n    organizationId: uuid('organization_id'),\n    heightCm: integer('height_cm'),\n    dominantHand: text('dominant_hand'),\n    playingPosition: text('playing_position'),\n    preferredShotZone: text('preferred_shot_zone'),\n    createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' })\n      .defaultNow()\n      .notNull(),\n    advancementLevel: text('advancement_level'),\n    responsibilityTier: text('responsibility_tier'),\n    basketballProfile: jsonb('basketball_profile'),\n  },\n  table => [\n    index('idx_mpbc_core_person_profile_org_id').using(\n      'btree',\n      table.organizationId.asc().nullsLast().op('uuid_ops')\n    ),\n    foreignKey({\n      columns: [table.organizationId],\n      foreignColumns: [mpCoreOrganizations.id],\n      name: 'mpbc_core_person_profile_organization_id_fkey',\n    }),\n    foreignKey({\n      columns: [table.personId],\n      foreignColumns: [mpCorePerson.id],\n      name: 'mpbc_core_person_profile_person_id_fkey',\n    }).onDelete('cascade'),\n  ]\n);\nexport const vMpCoreGroupMembership = pgView('v_mp_core_group_membership', {\n  id: uuid(),\n  groupId: uuid('group_id'),\n  personId: uuid('person_id'),\n  role: text(),\n  createdAt: timestamp('created_at', { withTimezone: true, mode: 'string' }),\n  updatedAt: timestamp('updated_at', { withTimezone: true, mode: 'string' }),\n}).as(\n  sql`SELECT mp_core_person_group.id, mp_core_person_group.group_id, mp_core_person_group.person_id, mp_core_person_group.role, mp_core_person_group.created_at, mp_core_person_group.updated_at FROM mp_core_person_group`\n);\n\nexport const currentParticipants = pgView('current_participants', {\n  id: uuid(),\n  firstName: text('first_name'),\n  lastName: text('last_name'),\n  email: text(),\n  personType: text('person_type'),\n  authUid: uuid('auth_uid'),\n  groupId: uuid('group_id'),\n  groupName: text('group_name'),\n  role: text(),\n  position: text(),\n  identifier: text(),\n  cycleName: text('cycle_name'),\n  organizationId: uuid('organization_id'),\n})\n  .with({ securityInvoker: 'on' })\n  .as(\n    sql`SELECT p.id, p.first_name, p.last_name, p.email, p.person_type, p.auth_uid, pg.group_id, g.name AS group_name, pg.role, pg.\"position\", pg.identifier, pc.name AS cycle_name, p.organization_id FROM mp_core_person p JOIN mp_core_person_group pg ON p.id = pg.person_id JOIN mp_core_group g ON pg.group_id = g.id LEFT JOIN infrastructure_program_cycle pc ON pg.cycle_id = pc.id WHERE g.active = true`\n  );\n\nexport const sessionParticipationSummary = pgView(\n  'session_participation_summary',\n  {\n    sessionId: uuid('session_id'),\n    date: date(),\n    sessionType: text('session_type'),\n    groupName: text('group_name'),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    totalTracked: bigint('total_tracked', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    presentCount: bigint('present_count', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    absentCount: bigint('absent_count', { mode: 'number' }),\n    // You can use { mode: \"bigint\" } if numbers are exceeding js number limitations\n    lateCount: bigint('late_count', { mode: 'number' }),\n    attendancePercentage: numeric('attendance_percentage'),\n  }\n)\n  .with({ securityInvoker: 'on' })\n  .as(\n    sql`SELECT s.id AS session_id, s.date, s.session_type, g.name AS group_name, count(pl.id) AS total_tracked, count( CASE WHEN pl.status = 'present'::text THEN 1 ELSE NULL::integer END) AS present_count, count( CASE WHEN pl.status = 'absent'::text THEN 1 ELSE NULL::integer END) AS absent_count, count( CASE WHEN pl.status = 'late'::text THEN 1 ELSE NULL::integer END) AS late_count, round(count( CASE WHEN pl.status = 'present'::text THEN 1 ELSE NULL::integer END)::numeric / NULLIF(count(pl.id), 0)::numeric * 100::numeric, 2) AS attendance_percentage FROM infrastructure_sessions s JOIN mp_core_group g ON g.id = s.group_id LEFT JOIN infrastructure_participation_log pl ON pl.session_id = s.id GROUP BY s.id, s.date, s.session_type, g.name`\n  );\n\n// Export ActivityType enum for use across the application\nexport enum ActivityType {\n  SIGN_IN = 'SIGN_IN',\n  SIGN_UP = 'SIGN_UP',\n  SIGN_OUT = 'SIGN_OUT',\n  UPDATE_PASSWORD = 'UPDATE_PASSWORD',\n  DELETE_ACCOUNT = 'DELETE_ACCOUNT',\n  UPDATE_ACCOUNT = 'UPDATE_ACCOUNT',\n  CREATE_TEAM = 'CREATE_TEAM',\n  REMOVE_TEAM_MEMBER = 'REMOVE_TEAM_MEMBER',\n  INVITE_TEAM_MEMBER = 'INVITE_TEAM_MEMBER',\n  ACCEPT_INVITATION = 'ACCEPT_INVITATION',\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/seed.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":7,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":7,"endColumn":18,"suggestions":[{"fix":{"range":[163,214],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":27,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":27,"endColumn":16,"suggestions":[{"fix":{"range":[526,580],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":16,"suggestions":[{"fix":{"range":[596,641],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":38,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":38,"endColumn":18,"suggestions":[{"fix":{"range":[819,864],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":42,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":42,"endColumn":16,"suggestions":[{"fix":{"range":[914,963],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import { stripe } from '../payments/stripe';\nimport { db } from './drizzle';\nimport { mpCorePerson } from './schema';\n\nasync function seed() {\n  if (!db) {\n    console.error('Database connection not available');\n    return;\n  }\n\n  const email = 'test@test.com';\n\n  const result = await db\n    .insert(mpCorePerson)\n    .values([\n      {\n        email: email,\n        firstName: 'Test',\n        lastName: 'User',\n        personType: 'player',\n        role: 'owner',\n      },\n    ])\n    .returning();\n\n  if (result[0]) {\n    console.log('Initial user created:', result[0].email);\n  } else {\n    console.log('Failed to create initial user');\n  }\n\n  // Note: Teams are handled as group_id and group_name in current_participants\n  // No separate teams table exists in the current schema\n}\n\nseed()\n  .catch(error => {\n    console.error('Seed process failed:', error);\n    process.exit(1);\n  })\n  .finally(() => {\n    console.log('Seed process finished. Exiting...');\n    process.exit(0);\n  });\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/setup.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":103,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":142,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":17},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":213,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":213,"endColumn":14,"suggestions":[{"fix":{"range":[6549,6597],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":216,"column":14,"nodeType":"MemberExpression","messageId":"unexpected","endLine":216,"endColumn":27}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { exec } from 'node:child_process';\nimport { promises as fs } from 'node:fs';\nimport { promisify } from 'node:util';\nimport readline from 'node:readline';\nimport crypto from 'node:crypto';\nimport path from 'node:path';\n// import os from 'node:os';\n\nconst execAsync = promisify(exec);\n\nfunction question(query: string): Promise<string> {\n  const rl = readline.createInterface({\n    input: process.stdin,\n    output: process.stdout,\n  });\n\n  return new Promise(resolve =>\n    rl.question(query, ans => {\n      rl.close();\n      resolve(ans);\n    })\n  );\n}\n\n// async function checkStripeCLI() {\n//   console.log(\n//     'Step 1: Checking if Stripe CLI is installed and authenticated...'\n//   );\n//   try {\n//     await execAsync('stripe --version');\n//     console.log('Stripe CLI is installed.');\n\n//     // Check if Stripe CLI is authenticated\n//     try {\n//       await execAsync('stripe config --list');\n//       console.log('Stripe CLI is authenticated.');\n//     } catch (error) {\n//       console.log(\n//         'Stripe CLI is not authenticated or the authentication has expired.'\n//       );\n//       console.log('Please run: stripe login');\n//       const answer = await question(\n//         'Have you completed the authentication? (y/n): '\n//       );\n//       if (answer.toLowerCase() !== 'y') {\n//         console.log(\n//           'Please authenticate with Stripe CLI and run this script again.'\n//         );\n//         process.exit(1);\n//       }\n\n//       // Verify authentication after user confirms login\n//       try {\n//         await execAsync('stripe config --list');\n//         console.log('Stripe CLI authentication confirmed.');\n//       } catch (error) {\n//         console.error(\n//           'Failed to verify Stripe CLI authentication. Please try again.'\n//         );\n//         process.exit(1);\n//       }\n//     }\n//   } catch (error) {\n//     console.error(\n//       'Stripe CLI is not installed. Please install it and try again.'\n//     );\n//     console.log('To install Stripe CLI, follow these steps:');\n//     console.log('1. Visit: https://docs.stripe.com/stripe-cli');\n//     console.log(\n//       '2. Download and install the Stripe CLI for your operating system'\n//     );\n//     console.log('3. After installation, run: stripe login');\n//     console.log(\n//       'After installation and authentication, please run this setup script again.'\n//     );\n//     process.exit(1);\n//   }\n// }\n\nasync function getPostgresURL(): Promise<string> {\n  // console.log('Step 2: Setting up Postgres');\n  const dbChoice = await question(\n    'Do you want to use a local Postgres instance with Docker (L) or a remote Postgres instance (R)? (L/R): '\n  );\n\n  if (dbChoice.toLowerCase() === 'l') {\n    // console.log('Setting up local Postgres instance with Docker...');\n    await setupLocalPostgres();\n    return 'postgres://postgres:postgres@localhost:54322/postgres';\n  } else {\n    // console.log(\n    //   'You can find Postgres databases at: https://vercel.com/marketplace?category=databases'\n    // );\n    return await question('Enter your POSTGRES_URL: ');\n  }\n}\n\nasync function setupLocalPostgres() {\n  // console.log('Checking if Docker is installed...');\n  try {\n    await execAsync('docker --version');\n    // console.log('Docker is installed.');\n  } catch (error) {\n    // console.error(\n    //   'Docker is not installed. Please install Docker and try again.'\n    // );\n    // console.log(\n    //   'To install Docker, visit: https://docs.docker.com/get-docker/'\n    // );\n    process.exit(1);\n  }\n\n  // console.log('Creating docker-compose.yml file...');\n  const dockerComposeContent = `\nservices:\n  postgres:\n    image: postgres:16.4-alpine\n    container_name: next_saas_starter_postgres\n    environment:\n      POSTGRES_DB: postgres\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n    ports:\n      - \"54322:5432\"\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n\nvolumes:\n  postgres_data:\n`;\n\n  await fs.writeFile(\n    path.join(process.cwd(), 'docker-compose.yml'),\n    dockerComposeContent\n  );\n  // console.log('docker-compose.yml file created.');\n\n  // console.log('Starting Docker container with `docker compose up -d`...');\n  try {\n    await execAsync('docker compose up -d');\n    // console.log('Docker container started successfully.');\n  } catch (error) {\n    // console.error(\n    //   'Failed to start Docker container. Please check your Docker installation and try again.'\n    // );\n    process.exit(1);\n  }\n}\n\n// async function getStripeSecretKey(): Promise<string> {\n//   console.log('Step 3: Getting Stripe Secret Key');\n//   console.log(\n//     'You can find your Stripe Secret Key at: https://dashboard.stripe.com/test/apikeys'\n//   );\n//   return await question('Enter your Stripe Secret Key: ');\n// }\n\n// async function createStripeWebhook(): Promise<string> {\n//   console.log('Step 4: Creating Stripe webhook...');\n//   try {\n//     const { stdout } = await execAsync('stripe listen --print-secret');\n//     const match = stdout.match(/whsec_[a-zA-Z0-9]+/);\n//     if (!match) {\n//       throw new Error('Failed to extract Stripe webhook secret');\n//     }\n//     console.log('Stripe webhook created.');\n//     return match[0];\n//   } catch (error) {\n//     console.error(\n//       'Failed to create Stripe webhook. Check your Stripe CLI installation and permissions.'\n//     );\n//     if (os.platform() === 'win32') {\n//       console.log(\n//         'Note: On Windows, you may need to run this script as an administrator.'\n//       );\n//     }\n//     throw error;\n//   }\n// }\n\nfunction generateAuthSecret(): string {\n  // console.log('Step 5: Generating AUTH_SECRET...');\n  return crypto.randomBytes(32).toString('hex');\n}\n\nasync function writeEnvFile(envVars: Record<string, string>) {\n  // console.log('Step 6: Writing environment variables to .env');\n  const envContent = Object.entries(envVars)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('\\n');\n\n  await fs.writeFile(path.join(process.cwd(), '.env'), envContent);\n  // console.log('.env file created with the necessary variables.');\n}\n\nasync function main() {\n  // await checkStripeCLI();\n\n  const POSTGRES_URL = await getPostgresURL();\n  // const STRIPE_SECRET_KEY = await getStripeSecretKey();\n  // const STRIPE_WEBHOOK_SECRET = await createStripeWebhook();\n  const BASE_URL = 'http://localhost:3000';\n  const AUTH_SECRET = generateAuthSecret();\n\n  await writeEnvFile({\n    POSTGRES_URL,\n    // STRIPE_SECRET_KEY,\n    // STRIPE_WEBHOOK_SECRET,\n    BASE_URL,\n    AUTH_SECRET,\n  });\n\n  console.log('🎉 Setup completed successfully!');\n}\n\nmain().catch(console.error);\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/test-queries.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/db/user-service.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":137,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":137,"endColumn":20,"suggestions":[{"fix":{"range":[3017,3071],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'basketballError' is assigned a value but never used.","line":142,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":230,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":230,"endColumn":18,"suggestions":[{"fix":{"range":[6043,6095],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":252,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":252,"endColumn":20,"suggestions":[{"fix":{"range":[6625,6679],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'basketballError' is assigned a value but never used.","line":257,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":257,"endColumn":57},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":313,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":313,"endColumn":18,"suggestions":[{"fix":{"range":[8534,8584],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":383,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":383,"endColumn":18,"suggestions":[{"fix":{"range":[10429,10482],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":473,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":473,"endColumn":18,"suggestions":[{"fix":{"range":[12372,12437],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":498,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":498,"endColumn":18,"suggestions":[{"fix":{"range":[12954,13017],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":510,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":510,"endColumn":18,"suggestions":[{"fix":{"range":[13254,13320],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":578,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":578,"endColumn":39},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":611,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":611,"endColumn":18,"suggestions":[{"fix":{"range":[15844,15897],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":724,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":724,"endColumn":22,"suggestions":[{"fix":{"range":[19120,19165],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":771,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":771,"endColumn":18,"suggestions":[{"fix":{"range":[20563,20617],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":779,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":779,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20760,20763],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20760,20763],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":838,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":838,"endColumn":18,"suggestions":[{"fix":{"range":[22171,22221],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":869,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":869,"endColumn":18,"suggestions":[{"fix":{"range":[22802,22871],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":931,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":931,"endColumn":18,"suggestions":[{"fix":{"range":[24290,24341],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":973,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":973,"endColumn":18,"suggestions":[{"fix":{"range":[25203,25258],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * User Service\n *\n * This service bridges the gap between mp_core (authentication) and mpbc (basketball roles) systems.\n * It provides a unified interface for user data that combines:\n *\n * 1. Authentication data from mp_core_person\n * 2. Basketball role data from mpbc_person (source of truth)\n * 3. Additional roles from mp_core_person_role\n * 4. Basketball-specific roles from mpbc_person_role\n *\n * The service handles both global (mp_core) and vertical-specific (mpbc) role logic.\n */\n\nimport { createClient } from '@/lib/supabase/server';\nimport { cookies } from 'next/headers';\nimport {\n  PersonType,\n  RoleContext,\n  Capability,\n  hasCapability,\n  getAllPersonRoles,\n  getPersonRolesWithContext,\n  switchActiveRole,\n} from '@/lib/db/role-logic';\nimport {\n  BasketballRoleType,\n  getBasketballRoles,\n  hasBasketballRole,\n  BasketballRole,\n} from '@/lib/db/basketball-roles';\nimport { NextResponse } from 'next/server';\nimport { getPackFeatures } from '@/lib/db/packs';\n\n/**\n * Core user data from mp_core_person\n */\nexport interface CoreUser {\n  id: string;\n  authUid: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  organizationId: string;\n  active: boolean;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n/**\n * Basketball user data from mpbc_person\n */\nexport interface BasketballUser {\n  id: string;\n  personId: string;\n  personType: PersonType;\n  organizationId: string;\n  displayName?: string;\n  isAdmin: boolean;\n  isSuperadmin: boolean;\n  createdAt: Date;\n  updatedAt?: Date;\n}\n\n/**\n * Combined user data with roles\n */\nexport interface UnifiedUser {\n  // Core identity\n  id: string;\n  authUid: string;\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  displayName?: string;\n\n  // Organization\n  organizationId: string;\n  organizationName?: string;\n\n  // Status\n  active: boolean;\n  createdAt: Date;\n  updatedAt?: Date;\n\n  // Roles\n  primaryRole: PersonType;\n  isAdmin: boolean;\n  isSuperadmin: boolean;\n  roles: string[];\n  basketballRoles: BasketballRole[];\n\n  // Context\n  currentContext?: RoleContext;\n  availableContexts?: RoleContext[];\n\n  // Pack features\n  packFeatures?: Record<string, boolean>;\n}\n\n/**\n * Role context stored in cookies\n */\ninterface StoredRoleContext {\n  personId: string;\n  organizationId: string;\n  groupId?: string;\n  contextType?: string;\n  role: string;\n}\n\n/**\n * Get the current authenticated user with unified role data\n */\nexport async function getCurrentUser(): Promise<UnifiedUser | null> {\n  try {\n    const supabase = createClient();\n\n    // Get authenticated user from Supabase\n    const {\n      data: { user },\n    } = await supabase.auth.getUser();\n    if (!user) {\n      return null;\n    }\n\n    // Get core user data\n    const { data: coreUser, error: coreError } = await supabase\n      .from('mp_core_person')\n      .select(\n        'id, auth_uid, email, first_name, last_name, organization_id, active, created_at, updated_at'\n      )\n      .eq('auth_uid', user.id)\n      .single();\n\n    if (coreError || !coreUser) {\n      console.error('Error fetching core user:', coreError);\n      return null;\n    }\n\n    // Get basketball user data\n    const { data: basketballUser, error: basketballError } = await supabase\n      .from('mpbc_person')\n      .select(\n        'id, person_id, person_type, organization_id, display_name, is_admin, is_superadmin, created_at, updated_at'\n      )\n      .eq('person_id', coreUser.id)\n      .maybeSingle();\n\n    // Get organization name\n    const { data: organization } = await supabase\n      .from('mp_core_organizations')\n      .select('name')\n      .eq('id', coreUser.organization_id)\n      .maybeSingle();\n\n    // Get all roles\n    const roles = await getAllPersonRoles(coreUser.id);\n\n    // Get basketball-specific roles\n    const basketballRoles = await getBasketballRoles(coreUser.id);\n\n    // Get pack features\n    const packFeatures = await getPackFeatures(coreUser.organization_id);\n\n    // Get current role context from cookies\n    const storedContext = await getRoleContextFromCookies();\n\n    // Get all available role contexts\n    const availableContexts = await getPersonRolesWithContext(coreUser.id);\n\n    // Find the current context or use the default\n    let currentContext: RoleContext | undefined;\n\n    if (storedContext && storedContext.personId === coreUser.id) {\n      // Use stored context\n      currentContext = {\n        personId: storedContext.personId,\n        organizationId: storedContext.organizationId,\n        ...(storedContext.groupId ? { groupId: storedContext.groupId } : {}),\n        ...(storedContext.contextType\n          ? {\n              contextType: storedContext.contextType as\n                | 'team'\n                | 'organization'\n                | 'system',\n            }\n          : {}),\n      };\n    } else if (availableContexts.length > 0) {\n      // Use first available context\n      currentContext = availableContexts[0]?.context;\n    }\n\n    // Build unified user object\n    const unifiedUser: UnifiedUser = {\n      id: coreUser.id,\n      authUid: coreUser.auth_uid,\n      email: coreUser.email,\n      firstName: coreUser.first_name,\n      lastName: coreUser.last_name,\n      displayName:\n        basketballUser?.display_name ||\n        `${coreUser.first_name || ''} ${coreUser.last_name || ''}`.trim(),\n\n      organizationId: coreUser.organization_id,\n      organizationName: organization?.name,\n\n      active: coreUser.active,\n      createdAt: new Date(coreUser.created_at),\n      ...(coreUser.updated_at\n        ? { updatedAt: new Date(coreUser.updated_at) }\n        : {}),\n\n      primaryRole:\n        (basketballUser?.person_type as PersonType) || PersonType.PLAYER,\n      isAdmin: basketballUser?.is_admin || false,\n      isSuperadmin: basketballUser?.is_superadmin || false,\n      roles,\n      basketballRoles,\n\n      ...(currentContext ? { currentContext } : {}),\n      availableContexts: availableContexts.map(rc => rc.context),\n\n      packFeatures: packFeatures as unknown as Record<string, boolean>,\n    };\n\n    return unifiedUser;\n  } catch (error) {\n    console.error('Error getting current user:', error);\n    return null;\n  }\n}\n\n/**\n * Get a user by ID with unified role data\n */\nexport async function getUserById(userId: string): Promise<UnifiedUser | null> {\n  try {\n    const supabase = createClient();\n\n    // Get core user data\n    const { data: coreUser, error: coreError } = await supabase\n      .from('mp_core_person')\n      .select(\n        'id, auth_uid, email, first_name, last_name, organization_id, active, created_at, updated_at'\n      )\n      .eq('id', userId)\n      .single();\n\n    if (coreError || !coreUser) {\n      console.error('Error fetching core user:', coreError);\n      return null;\n    }\n\n    // Get basketball user data\n    const { data: basketballUser, error: basketballError } = await supabase\n      .from('mpbc_person')\n      .select(\n        'id, person_id, person_type, organization_id, display_name, is_admin, is_superadmin, created_at, updated_at'\n      )\n      .eq('person_id', coreUser.id)\n      .maybeSingle();\n\n    // Get organization name\n    const { data: organization } = await supabase\n      .from('mp_core_organizations')\n      .select('name')\n      .eq('id', coreUser.organization_id)\n      .maybeSingle();\n\n    // Get all roles\n    const roles = await getAllPersonRoles(coreUser.id);\n\n    // Get basketball-specific roles\n    const basketballRoles = await getBasketballRoles(coreUser.id);\n\n    // Get pack features\n    const packFeatures = await getPackFeatures(coreUser.organization_id);\n\n    // Build unified user object\n    const unifiedUser: UnifiedUser = {\n      id: coreUser.id,\n      authUid: coreUser.auth_uid,\n      email: coreUser.email,\n      firstName: coreUser.first_name,\n      lastName: coreUser.last_name,\n      displayName:\n        basketballUser?.display_name ||\n        `${coreUser.first_name || ''} ${coreUser.last_name || ''}`.trim(),\n\n      organizationId: coreUser.organization_id,\n      organizationName: organization?.name,\n\n      active: coreUser.active,\n      createdAt: new Date(coreUser.created_at),\n      ...(coreUser.updated_at\n        ? { updatedAt: new Date(coreUser.updated_at) }\n        : {}),\n\n      primaryRole:\n        (basketballUser?.person_type as PersonType) || PersonType.PLAYER,\n      isAdmin: basketballUser?.is_admin || false,\n      isSuperadmin: basketballUser?.is_superadmin || false,\n      roles,\n      basketballRoles,\n\n      packFeatures: packFeatures as unknown as Record<string, boolean>,\n    };\n\n    return unifiedUser;\n  } catch (error) {\n    console.error('Error getting user by ID:', error);\n    return null;\n  }\n}\n\n/**\n * Get users by role\n */\nexport async function getUsersByRole(\n  role: PersonType | BasketballRoleType,\n  organizationId?: string,\n  includeInactive: boolean = false\n): Promise<UnifiedUser[]> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return [];\n    }\n\n    // Use provided organizationId or default to current user's org\n    const orgId = organizationId || currentUser.organizationId;\n\n    // Check if user has permission to view users in this organization\n    if (orgId !== currentUser.organizationId && !currentUser.isSuperadmin) {\n      return [];\n    }\n\n    // Get users based on role type\n    let userIds: string[] = [];\n\n    // Check if it's a core role or a basketball-specific role\n    if (Object.values(PersonType).includes(role as PersonType)) {\n      // It's a core role, query mpbc_person\n      const { data: users } = await supabase\n        .from('mpbc_person')\n        .select('person_id')\n        .eq('organization_id', orgId)\n        .eq('person_type', role);\n\n      if (users) {\n        userIds = users.map(u => u.person_id);\n      }\n    } else {\n      // It's a basketball-specific role, query mpbc_person_role\n      const { data: users } = await supabase\n        .from('mpbc_person_role')\n        .select('person_id')\n        .eq('organization_id', orgId)\n        .eq('role', role)\n        .eq('active', true);\n\n      if (users) {\n        userIds = users.map(u => u.person_id);\n      }\n    }\n\n    // Get full user data for each user ID\n    const unifiedUsers: UnifiedUser[] = [];\n\n    for (const userId of userIds) {\n      const user = await getUserById(userId);\n      if (user && (includeInactive || user.active)) {\n        unifiedUsers.push(user);\n      }\n    }\n\n    return unifiedUsers;\n  } catch (error) {\n    console.error('Error getting users by role:', error);\n    return [];\n  }\n}\n\n/**\n * Check if the current user has a capability\n */\nexport async function currentUserHasCapability(\n  capability: Capability,\n  context?: RoleContext\n): Promise<boolean> {\n  const currentUser = await getCurrentUser();\n\n  if (!currentUser) {\n    return false;\n  }\n\n  return hasCapability(\n    currentUser.id,\n    capability,\n    context || currentUser.currentContext\n  );\n}\n\n/**\n * Check if the current user has a basketball role\n */\nexport async function currentUserHasBasketballRole(\n  role: BasketballRoleType | string,\n  context?: RoleContext\n): Promise<boolean> {\n  const currentUser = await getCurrentUser();\n\n  if (!currentUser) {\n    return false;\n  }\n\n  return hasBasketballRole(\n    currentUser.id,\n    role,\n    context || currentUser.currentContext\n  );\n}\n\n/**\n * Switch the current user's active role context\n */\nexport async function switchUserRoleContext(\n  role: string,\n  context: RoleContext\n): Promise<boolean> {\n  const currentUser = await getCurrentUser();\n\n  if (!currentUser) {\n    return false;\n  }\n\n  const success = await switchActiveRole(currentUser.id, role, context);\n\n  if (success) {\n    // Store the new context in cookies\n    await storeRoleContextInCookies({\n      personId: context.personId,\n      organizationId: context.organizationId,\n      ...(context.groupId ? { groupId: context.groupId } : {}),\n      ...(context.contextType ? { contextType: context.contextType } : {}),\n      role,\n    });\n  }\n\n  return success;\n}\n\n/**\n * Get the role context from cookies\n */\nasync function getRoleContextFromCookies(): Promise<StoredRoleContext | null> {\n  try {\n    const cookieStore = await cookies();\n    const contextCookie = cookieStore.get('role_context');\n\n    if (!contextCookie) {\n      return null;\n    }\n\n    return JSON.parse(\n      decodeURIComponent(contextCookie.value)\n    ) as StoredRoleContext;\n  } catch (error) {\n    console.error('Error getting role context from cookies:', error);\n    return null;\n  }\n}\n\n/**\n * Store the role context in cookies\n */\nasync function storeRoleContextInCookies(\n  context: StoredRoleContext\n): Promise<void> {\n  try {\n    const cookieStore = await cookies();\n    cookieStore.set(\n      'role_context',\n      encodeURIComponent(JSON.stringify(context)),\n      {\n        path: '/',\n        maxAge: 60 * 60 * 24 * 7, // 1 week\n        httpOnly: true,\n        secure: process.env.NODE_ENV === 'production',\n        sameSite: 'lax',\n      }\n    );\n  } catch (error) {\n    console.error('Error storing role context in cookies:', error);\n  }\n}\n\n/**\n * Clear the role context from cookies\n */\nexport async function clearRoleContextFromCookies(): Promise<void> {\n  try {\n    const cookieStore = await cookies();\n    cookieStore.delete('role_context');\n  } catch (error) {\n    console.error('Error clearing role context from cookies:', error);\n  }\n}\n\n/**\n * Middleware to check if the current user has a capability\n * For use in API routes\n */\nexport async function requireCapability(\n  capability: Capability,\n  context?: RoleContext\n): Promise<Response | null> {\n  const hasAccess = await currentUserHasCapability(capability, context);\n\n  if (!hasAccess) {\n    return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n  }\n\n  return null;\n}\n\n/**\n * Middleware to check if the current user has a specific role\n * For use in API routes\n */\nexport async function requireRole(\n  role: PersonType | BasketballRoleType | string,\n  context?: RoleContext\n): Promise<Response | null> {\n  const currentUser = await getCurrentUser();\n\n  if (!currentUser) {\n    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n  }\n\n  // Check if it's a core role or a basketball-specific role\n  if (Object.values(PersonType).includes(role as PersonType)) {\n    // It's a core role\n    if (!currentUser.roles.includes(role)) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n  } else {\n    // It's a basketball-specific role\n    const hasRole = await currentUserHasBasketballRole(role, context);\n    if (!hasRole) {\n      return NextResponse.json({ error: 'Forbidden' }, { status: 403 });\n    }\n  }\n\n  return null;\n}\n\n/**\n * Get users in a team with their roles\n */\nexport async function getUsersInTeam(teamId: string): Promise<UnifiedUser[]> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return [];\n    }\n\n    // Check if user has permission to view this team\n    const canView = await hasCapability(\n      currentUser.id,\n      Capability.VIEW_TEAM_PLAYERS,\n      { ...currentUser.currentContext!, groupId: teamId }\n    );\n\n    if (!canView && !currentUser.isAdmin && !currentUser.isSuperadmin) {\n      return [];\n    }\n\n    // Get all users in the team\n    const { data: teamMembers } = await supabase\n      .from('mp_core_person_group')\n      .select('person_id, role')\n      .eq('group_id', teamId)\n      .eq('active', true);\n\n    if (!teamMembers) {\n      return [];\n    }\n\n    // Get full user data for each team member\n    const unifiedUsers: UnifiedUser[] = [];\n\n    for (const member of teamMembers) {\n      const user = await getUserById(member.person_id);\n      if (user) {\n        // Add team role to the user object\n        unifiedUsers.push({\n          ...user,\n        });\n      }\n    }\n\n    return unifiedUsers;\n  } catch (error) {\n    console.error('Error getting users in team:', error);\n    return [];\n  }\n}\n\n/**\n * Create or update a user with unified role data\n */\nexport async function createOrUpdateUser(userData: {\n  email: string;\n  firstName?: string;\n  lastName?: string;\n  displayName?: string;\n  organizationId: string;\n  primaryRole: PersonType;\n  isAdmin?: boolean;\n  isSuperadmin?: boolean;\n  basketballRoles?: BasketballRole[];\n  active?: boolean;\n}): Promise<string | null> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return null;\n    }\n\n    // Check if current user has permission to create/update users\n    if (!currentUser.isAdmin && !currentUser.isSuperadmin) {\n      return null;\n    }\n\n    // Check if organization ID is valid\n    if (\n      userData.organizationId !== currentUser.organizationId &&\n      !currentUser.isSuperadmin\n    ) {\n      return null;\n    }\n\n    // Check if user already exists\n    const { data: existingUser } = await supabase\n      .from('mp_core_person')\n      .select('id')\n      .eq('email', userData.email)\n      .maybeSingle();\n\n    let userId: string;\n\n    if (existingUser) {\n      // Update existing user\n      userId = existingUser.id;\n\n      await supabase\n        .from('mp_core_person')\n        .update({\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          active: userData.active !== undefined ? userData.active : true,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', userId);\n\n      // Update mpbc_person\n      const { data: existingMpbcPerson } = await supabase\n        .from('mpbc_person')\n        .select('id')\n        .eq('person_id', userId)\n        .maybeSingle();\n\n      if (existingMpbcPerson) {\n        await supabase\n          .from('mpbc_person')\n          .update({\n            person_type: userData.primaryRole,\n            display_name:\n              userData.displayName ||\n              `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),\n            is_admin: userData.isAdmin || false,\n            is_superadmin: userData.isSuperadmin || false,\n            updated_at: new Date().toISOString(),\n          })\n          .eq('person_id', userId);\n      } else {\n        await supabase.from('mpbc_person').insert({\n          person_id: userId,\n          person_type: userData.primaryRole,\n          organization_id: userData.organizationId,\n          display_name:\n            userData.displayName ||\n            `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),\n          is_admin: userData.isAdmin || false,\n          is_superadmin: userData.isSuperadmin || false,\n        });\n      }\n    } else {\n      // Create new user\n      const { data: newUser, error } = await supabase\n        .from('mp_core_person')\n        .insert({\n          email: userData.email,\n          first_name: userData.firstName,\n          last_name: userData.lastName,\n          organization_id: userData.organizationId,\n          person_type: userData.primaryRole,\n          active: userData.active !== undefined ? userData.active : true,\n          created_at: new Date().toISOString(),\n        })\n        .select('id')\n        .single();\n\n      if (error || !newUser) {\n        console.error('Error creating user:', error);\n        return null;\n      }\n\n      userId = newUser.id;\n\n      // Create mpbc_person\n      await supabase.from('mpbc_person').insert({\n        person_id: userId,\n        person_type: userData.primaryRole,\n        organization_id: userData.organizationId,\n        display_name:\n          userData.displayName ||\n          `${userData.firstName || ''} ${userData.lastName || ''}`.trim(),\n        is_admin: userData.isAdmin || false,\n        is_superadmin: userData.isSuperadmin || false,\n      });\n    }\n\n    // Add or update basketball roles\n    if (userData.basketballRoles && userData.basketballRoles.length > 0) {\n      // First, deactivate all existing basketball roles\n      await supabase\n        .from('mpbc_person_role')\n        .update({\n          active: false,\n          ended_at: new Date().toISOString(),\n        })\n        .eq('person_id', userId);\n\n      // Then add new roles\n      for (const role of userData.basketballRoles) {\n        await supabase.from('mpbc_person_role').insert({\n          person_id: userId,\n          organization_id: userData.organizationId,\n          role: role.role,\n          permissions: role.permissions || [],\n          scope_type: role.scopeType || 'organization',\n          scope_ids: role.scopeIds || [],\n          active: true,\n          started_at: new Date().toISOString(),\n        });\n      }\n    }\n\n    return userId;\n  } catch (error) {\n    console.error('Error creating/updating user:', error);\n    return null;\n  }\n}\n\n/**\n * Get all teams for a user based on their roles\n */\nexport async function getUserTeams(userId?: string): Promise<any[]> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return [];\n    }\n\n    // Use provided userId or default to current user\n    const targetUserId = userId || currentUser.id;\n\n    // Check if current user has permission to view this user's teams\n    if (\n      targetUserId !== currentUser.id &&\n      !currentUser.isAdmin &&\n      !currentUser.isSuperadmin\n    ) {\n      const canView = await hasCapability(\n        currentUser.id,\n        Capability.VIEW_ORGANIZATION_DATA\n      );\n\n      if (!canView) {\n        return [];\n      }\n    }\n\n    // Get all teams the user is associated with\n    const { data: userGroups } = await supabase\n      .from('mp_core_person_group')\n      .select('group_id, role')\n      .eq('person_id', targetUserId)\n      .eq('active', true);\n\n    if (!userGroups || userGroups.length === 0) {\n      return [];\n    }\n\n    // Get team details\n    const teamIds = userGroups.map(ug => ug.group_id);\n    const { data: teams } = await supabase\n      .from('mp_core_group')\n      .select('*')\n      .in('id', teamIds);\n\n    if (!teams) {\n      return [];\n    }\n\n    // Combine team data with role\n    return teams.map(team => {\n      const userGroup = userGroups.find(ug => ug.group_id === team.id);\n      return {\n        ...team,\n        userRole: userGroup?.role,\n      };\n    });\n  } catch (error) {\n    console.error('Error getting user teams:', error);\n    return [];\n  }\n}\n\n/**\n * Check if a user is part of a team with a specific role\n */\nexport async function isUserInTeamWithRole(\n  userId: string,\n  teamId: string,\n  role?: string\n): Promise<boolean> {\n  try {\n    const supabase = createClient();\n\n    let query = supabase\n      .from('mp_core_person_group')\n      .select('id')\n      .eq('person_id', userId)\n      .eq('group_id', teamId)\n      .eq('active', true);\n\n    if (role) {\n      query = query.eq('role', role);\n    }\n\n    const { data } = await query;\n\n    return !!data && data.length > 0;\n  } catch (error) {\n    console.error('Error checking if user is in team with role:', error);\n    return false;\n  }\n}\n\n/**\n * Add a user to a team with a specific role\n */\nexport async function addUserToTeam(\n  userId: string,\n  teamId: string,\n  role: string\n): Promise<boolean> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return false;\n    }\n\n    // Check if current user has permission to manage teams\n    const canManage = await hasCapability(\n      currentUser.id,\n      Capability.MANAGE_TEAMS\n    );\n\n    if (!canManage && !currentUser.isAdmin && !currentUser.isSuperadmin) {\n      return false;\n    }\n\n    // Check if user is already in the team\n    const { data: existingMembership } = await supabase\n      .from('mp_core_person_group')\n      .select('id')\n      .eq('person_id', userId)\n      .eq('group_id', teamId)\n      .maybeSingle();\n\n    if (existingMembership) {\n      // Update existing membership\n      await supabase\n        .from('mp_core_person_group')\n        .update({\n          role,\n          active: true,\n          updated_at: new Date().toISOString(),\n        })\n        .eq('id', existingMembership.id);\n    } else {\n      // Create new membership\n      await supabase.from('mp_core_person_group').insert({\n        person_id: userId,\n        group_id: teamId,\n        role,\n        active: true,\n        created_at: new Date().toISOString(),\n      });\n    }\n\n    return true;\n  } catch (error) {\n    console.error('Error adding user to team:', error);\n    return false;\n  }\n}\n\n/**\n * Remove a user from a team\n */\nexport async function removeUserFromTeam(\n  userId: string,\n  teamId: string\n): Promise<boolean> {\n  try {\n    const supabase = createClient();\n    const currentUser = await getCurrentUser();\n\n    if (!currentUser) {\n      return false;\n    }\n\n    // Check if current user has permission to manage teams\n    const canManage = await hasCapability(\n      currentUser.id,\n      Capability.MANAGE_TEAMS\n    );\n\n    if (!canManage && !currentUser.isAdmin && !currentUser.isSuperadmin) {\n      return false;\n    }\n\n    // Update membership to inactive\n    await supabase\n      .from('mp_core_person_group')\n      .update({\n        active: false,\n        updated_at: new Date().toISOString(),\n      })\n      .eq('person_id', userId)\n      .eq('group_id', teamId);\n\n    return true;\n  } catch (error) {\n    console.error('Error removing user from team:', error);\n    return false;\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/design-tokens.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/payments/actions.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'team' is defined but never used.","line":7,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priceId' is assigned a value but never used.","line":8,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":13,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'team' is defined but never used.","line":13,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":60}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server';\n\nimport { redirect } from 'next/navigation';\n// import { createCheckoutSession, createCustomerPortalSession } from './stripe';\nimport { withTeam } from '@/lib/auth/middleware';\n\nexport const checkoutAction = withTeam(async (formData, team) => {\n  const priceId = formData.get('priceId') as string;\n  // await createCheckoutSession({ team: team, priceId });\n  redirect('/dashboard');\n});\n\nexport const customerPortalAction = withTeam(async (_, team) => {\n  // const portalSession = await createCustomerPortalSession(team);\n  // redirect(portalSession.url);\n  redirect('/dashboard');\n});\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/payments/stripe.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getUser' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":19,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'priceId' is defined but never used.","line":20,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":20,"endColumn":10},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":29,"column":3,"nodeType":"MemberExpression","messageId":"unexpected","endLine":29,"endColumn":15,"suggestions":[{"fix":{"range":[934,1047],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'user' is defined but never used.","line":63,"column":51,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":55}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// import Stripe from 'stripe';\nimport { redirect } from 'next/navigation';\n// NOTE:\n// Stripe metadata (customer / subscription / product) is now stored on the\n// mpCorePerson model – *not* on mpCoreGroup.  Until we fully re-enable Stripe\n// billing, we just keep type-checking correct by importing `Person`.\nimport { type Person } from '@/lib/db/schema';\nimport {\n  getUser,\n  // getTeamByStripeCustomerId,\n  // updateTeamSubscription\n} from '@/lib/db/queries';\n\n// export const stripe = new Stripe(process.env.STRIPE_SECRET_KEY!, {\n//   apiVersion: '2025-04-30.basil'\n// });\n\nexport async function createCheckoutSession({\n  user,\n  priceId,\n}: {\n  user: Person | null;\n  priceId: string;\n}) {\n  // Stripe integration is on the backburner.\n  // This function needs to be refactored to use the new schema.\n  // Instead of throwing, gracefully redirect the user so the sign-in flow\n  // does not break when a checkout is requested.\n  console.warn(\n    'Stripe Checkout requested but integration is disabled. Redirecting to dashboard instead.'\n  );\n  redirect('/dashboard');\n  /*\n  const authUser = await getUser();\n\n  if (!user || !authUser) {\n    redirect(`/sign-up?redirect=checkout&priceId=${priceId}`);\n  }\n\n  const session = await stripe.checkout.sessions.create({\n    payment_method_types: ['card'],\n    line_items: [\n      {\n        price: priceId,\n        quantity: 1\n      }\n    ],\n    mode: 'subscription',\n    success_url: `${process.env.BASE_URL}/api/stripe/checkout?session_id={CHECKOUT_SESSION_ID}`,\n    cancel_url: `${process.env.BASE_URL}/pricing`,\n    customer: user.stripeCustomerId || undefined,\n    client_reference_id: authUser.id.toString(),\n    allow_promotion_codes: true,\n    subscription_data: {\n      trial_period_days: 14\n    }\n  });\n\n  redirect(session.url!);\n  */\n}\n\nexport async function createCustomerPortalSession(user: Person) {\n  // Stripe integration is on the backburner.\n  // This function needs to be refactored to use the new schema.\n  throw new Error('Stripe Customer Portal is temporarily disabled.');\n  /*\n  if (!user.stripeCustomerId || !user.stripeProductId) {\n    redirect('/pricing');\n  }\n\n  let configuration: Stripe.BillingPortal.Configuration;\n  const configurations = await stripe.billingPortal.configurations.list();\n\n  if (configurations.data.length > 0) {\n    configuration = configurations.data[0];\n  } else {\n    const product = await stripe.products.retrieve(user.stripeProductId);\n    if (!product.active) {\n      throw new Error(\"Team's product is not active in Stripe\");\n    }\n\n    const prices = await stripe.prices.list({\n      product: product.id,\n      active: true\n    });\n    if (prices.data.length === 0) {\n      throw new Error(\"No active prices found for the team's product\");\n    }\n\n    configuration = await stripe.billingPortal.configurations.create({\n      business_profile: {\n        headline: 'Manage your subscription'\n      },\n      features: {\n        subscription_update: {\n          enabled: true,\n          default_allowed_updates: ['price', 'quantity', 'promotion_code'],\n          proration_behavior: 'create_prorations',\n          products: [\n            {\n              product: product.id,\n              prices: prices.data.map((price) => price.id)\n            }\n          ]\n        },\n        subscription_cancel: {\n          enabled: true,\n          mode: 'at_period_end',\n          cancellation_reason: {\n            enabled: true,\n            options: [\n              'too_expensive',\n              'missing_features',\n              'switched_service',\n              'unused',\n              'other'\n            ]\n          }\n        },\n        payment_method_update: {\n          enabled: true\n        }\n      }\n    });\n  }\n\n  return stripe.billingPortal.sessions.create({\n    customer: user.stripeCustomerId,\n    return_url: `${process.env.BASE_URL}/dashboard`,\n    configuration: configuration.id\n  });\n  */\n}\n\n/*\n// This function is disabled as it depends on the old schema.\n// It needs to be refactored to use mp_core_group and related tables.\nexport async function handleSubscriptionChange(\n  subscription: Stripe.Subscription\n) {\n  const customerId = subscription.customer as string;\n  const subscriptionId = subscription.id;\n  const status = subscription.status;\n\n  const team = await getTeamByStripeCustomerId(customerId);\n\n  if (!team) {\n    console.error('Team not found for Stripe customer:', customerId);\n    return;\n  }\n\n  if (status === 'active' || status === 'trialing') {\n    const plan = subscription.items.data[0]?.plan;\n    await updateTeamSubscription(team.id, {\n      stripeSubscriptionId: subscriptionId,\n      stripeProductId: plan?.product as string,\n      planName: (plan?.product as Stripe.Product).name,\n      subscriptionStatus: status\n    });\n  } else if (status === 'canceled' || status === 'unpaid') {\n    await updateTeamSubscription(team.id, {\n      stripeSubscriptionId: null,\n      stripeProductId: null,\n      planName: null,\n      subscriptionStatus: status\n    });\n  }\n}\n*/\n\nexport async function getStripePrices() {\n  // Stripe integration is on the backburner.\n  // Return mock data for now to keep the pricing page functional.\n  return [\n    {\n      id: 'price_base',\n      productId: 'prod_base',\n      unitAmount: 800,\n      currency: 'usd',\n      interval: 'month',\n      trialPeriodDays: 7,\n    },\n    {\n      id: 'price_plus',\n      productId: 'prod_plus',\n      unitAmount: 1200,\n      currency: 'usd',\n      interval: 'month',\n      trialPeriodDays: 7,\n    },\n  ];\n}\n\nexport async function getStripeProducts() {\n  // Stripe integration is on the backburner.\n  // Return mock data for now to keep the pricing page functional.\n  return [\n    {\n      id: 'prod_base',\n      name: 'Base',\n      description: 'Basic plan for small teams',\n      defaultPriceId: 'price_base',\n    },\n    {\n      id: 'prod_plus',\n      name: 'Plus',\n      description: 'Advanced plan for growing teams',\n      defaultPriceId: 'price_plus',\n    },\n  ];\n}\n//       typeof product.default_price === 'string'\n//         ? product.default_price\n//         : product.default_price?.id\n//   }));\n// }\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/supabase/client.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":14,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":14,"endColumn":60},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":15,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":15,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":40,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":15},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":128,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":128,"endColumn":18,"suggestions":[{"fix":{"range":[3179,3235],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":149,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":166,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":166,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient as createSupabaseClient } from '@supabase/supabase-js';\nimport { type SupabaseClient } from '@supabase/supabase-js';\nimport { signIn, signUp } from '@/app/(login)/actions';\n\n// Initialize the Supabase client for browser usage\nlet supabaseClient: SupabaseClient | null = null;\n\n/**\n * Creates and returns a Supabase client for browser-side usage\n */\nexport const createClient = () => {\n  if (supabaseClient) return supabaseClient;\n\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Supabase URL and Anon Key must be provided');\n  }\n\n  supabaseClient = createSupabaseClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      persistSession: true,\n      autoRefreshToken: true,\n      detectSessionInUrl: true,\n    },\n  });\n\n  return supabaseClient;\n};\n\n/**\n * Sign in with email and password\n * This handles both Supabase authentication and our custom session management\n */\nexport const signInWithEmail = async (email: string, password: string) => {\n  const supabase = createClient();\n\n  // First authenticate with Supabase\n  const { data, error } = await supabase.auth.signInWithPassword({\n    email,\n    password,\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  // Then create our custom session\n  const formData = new FormData();\n  formData.append('email', email);\n\n  // Use our server action to create a session\n  return signIn({}, formData);\n};\n\n/**\n * Sign up with email and password\n * This handles both Supabase user creation and our custom session management\n */\nexport const signUpWithEmail = async (\n  email: string,\n  password: string,\n  displayName?: string,\n  inviteId?: string\n) => {\n  const supabase = createClient();\n\n  // First create a user in Supabase\n  const { data, error } = await supabase.auth.signUp({\n    email,\n    password,\n    options: {\n      emailRedirectTo: `${window.location.origin}/auth/confirm`,\n      data: {\n        display_name: displayName || email,\n      },\n    },\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  if (data.user) {\n    // Then create our custom session\n    const formData = new FormData();\n    formData.append('email', email);\n    formData.append('authUid', data.user.id);\n\n    if (displayName) {\n      formData.append('displayName', displayName);\n    }\n\n    if (inviteId) {\n      formData.append('inviteId', inviteId);\n    }\n\n    // Use our server action to create a session\n    return signUp({}, formData);\n  }\n\n  return { error: 'Failed to create user' };\n};\n\n/**\n * Sign out from both Supabase and our custom session\n */\nexport const signOutUser = async () => {\n  const supabase = createClient();\n\n  // Sign out from Supabase\n  await supabase.auth.signOut();\n\n  // Our server action will handle clearing the custom session cookie\n  // and redirecting to the sign-in page\n  window.location.href = '/sign-in';\n};\n\n/**\n * Get the current Supabase session\n */\nexport const getSupabaseSession = async () => {\n  const supabase = createClient();\n  const { data, error } = await supabase.auth.getSession();\n\n  if (error) {\n    console.error('Error getting Supabase session:', error);\n    return null;\n  }\n\n  return data.session;\n};\n\n/**\n * Get the current Supabase user\n */\nexport const getSupabaseUser = async () => {\n  const session = await getSupabaseSession();\n  return session?.user || null;\n};\n\n/**\n * Reset password\n */\nexport const resetPassword = async (email: string) => {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.auth.resetPasswordForEmail(email, {\n    redirectTo: `${window.location.origin}/auth/update-password`,\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { success: true };\n};\n\n/**\n * Update password\n */\nexport const updatePassword = async (newPassword: string) => {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.auth.updateUser({\n    password: newPassword,\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { success: true };\n};\n\nexport default {\n  createClient,\n  signInWithEmail,\n  signUpWithEmail,\n  signOutUser,\n  getSupabaseSession,\n  getSupabaseUser,\n  resetPassword,\n  updatePassword,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/supabase/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":21,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":21,"endColumn":42},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":22,"column":5,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":22,"endColumn":47}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createServerClient, type CookieOptions } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\n/**\n * Creates a Supabase client for use in the Next.js middleware\n * Handles cookie management for Supabase auth sessions\n *\n * @param request The incoming request\n * @returns The Supabase client and a modified response with updated cookies\n */\nexport const createClient = (request: NextRequest) => {\n  // Create an unmodified response\n  let response = NextResponse.next({\n    request: {\n      headers: request.headers,\n    },\n  });\n\n  // Create the Supabase client with cookie handling\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return request.cookies.get(name)?.value;\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          // If the cookie is updated, update the cookies for the request and response\n          request.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n          response = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          });\n          response.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n        },\n        remove(name: string, options: CookieOptions) {\n          // If the cookie is removed, update the cookies for the request and response\n          request.cookies.set({\n            name,\n            value: '',\n            ...options,\n          });\n          response = NextResponse.next({\n            request: {\n              headers: request.headers,\n            },\n          });\n          response.cookies.set({\n            name,\n            value: '',\n            ...options,\n          });\n        },\n      },\n    }\n  );\n\n  return { supabase, response };\n};\n\n/**\n * Refreshes the Supabase session in middleware if needed\n * This should be called in the middleware to ensure the Supabase session\n * is always valid before proceeding with the request\n *\n * @param request The incoming request\n * @returns A response with updated cookies if the session was refreshed, or null if no refresh was needed\n */\nexport const refreshSession = async (request: NextRequest) => {\n  const { supabase, response } = createClient(request);\n\n  // Get the session from Supabase\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n\n  // If no session or session doesn't need refresh, return null\n  if (!session) {\n    return null;\n  }\n\n  return response;\n};\n\nexport default {\n  createClient,\n  refreshSession,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/supabase/server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SupabaseClient' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":12,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":12,"endColumn":60},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":13,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":13,"endColumn":69},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":34,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":34,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":34,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1255,1258],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1255,1258],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'name' is defined but never used.","line":38,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":38,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":52,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":52,"endColumn":60},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2801,2804],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2801,2804],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":116,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4119,4122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4119,4122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient as createSupabaseClient } from '@supabase/supabase-js';\nimport { cookies } from 'next/headers';\nimport { type SupabaseClient } from '@supabase/supabase-js';\nimport { cache } from 'react';\n\n/**\n * Creates a Supabase client for server-side operations\n * This is cached to avoid creating multiple clients during a request\n */\nexport const createClient = cache(() => {\n  const cookieStore = cookies();\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\n  const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n  if (!supabaseUrl || !supabaseAnonKey) {\n    throw new Error('Supabase URL and Anon Key must be provided');\n  }\n\n  // Use the service role key if available for admin operations\n  // Otherwise use the anon key\n  const supabaseKey = supabaseServiceKey || supabaseAnonKey;\n\n  return createSupabaseClient(supabaseUrl, supabaseKey, {\n    auth: {\n      persistSession: false, // We don't want to persist the session on server\n      autoRefreshToken: false,\n      detectSessionInUrl: false,\n    },\n    cookies: {\n      get(name: string) {\n        return cookieStore.get(name)?.value;\n      },\n      set(name: string, value: string, options: any) {\n        // We don't set cookies from server components\n        // This is handled by our custom session management\n      },\n      remove(name: string, options: any) {\n        // We don't remove cookies from server components\n        // This is handled by our custom session management\n      },\n    },\n  });\n});\n\n/**\n * Gets a Supabase admin client with the service role key\n * This should only be used in trusted server contexts like API routes\n * and never exposed to the client\n */\nexport const createAdminClient = () => {\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\n  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;\n\n  if (!supabaseUrl || !supabaseServiceKey) {\n    throw new Error('Supabase URL and Service Role Key must be provided');\n  }\n\n  return createSupabaseClient(supabaseUrl, supabaseServiceKey, {\n    auth: {\n      persistSession: false,\n      autoRefreshToken: false,\n      detectSessionInUrl: false,\n    },\n  });\n};\n\n/**\n * Verify a Supabase auth token and get the user\n * This can be used to verify auth tokens from client requests\n */\nexport const verifyAuthToken = async (token: string) => {\n  const supabase = createClient();\n\n  const { data, error } = await supabase.auth.getUser(token);\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { user: data.user };\n};\n\n/**\n * Create a new user in Supabase Auth\n * This should only be used in trusted server contexts\n */\nexport const createAuthUser = async (\n  email: string,\n  password: string,\n  metadata?: Record<string, any>\n) => {\n  const adminClient = createAdminClient();\n\n  const { data, error } = await adminClient.auth.admin.createUser({\n    email,\n    password,\n    email_confirm: true, // Auto-confirm the email\n    user_metadata: metadata || {},\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { user: data.user };\n};\n\n/**\n * Delete a user from Supabase Auth\n * This should only be used in trusted server contexts\n */\nexport const deleteAuthUser = async (userId: string) => {\n  const adminClient = createAdminClient();\n\n  const { data, error } = await adminClient.auth.admin.deleteUser(userId);\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { success: true };\n};\n\n/**\n * Get a user from Supabase Auth by email\n * This should only be used in trusted server contexts\n */\nexport const getUserByEmail = async (email: string) => {\n  const adminClient = createAdminClient();\n\n  const { data, error } = await adminClient.auth.admin.listUsers({\n    filter: {\n      email: email,\n    },\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { user: data.users[0] || null };\n};\n\n/**\n * Update a user's metadata in Supabase Auth\n * This should only be used in trusted server contexts\n */\nexport const updateUserMetadata = async (\n  userId: string,\n  metadata: Record<string, any>\n) => {\n  const adminClient = createAdminClient();\n\n  const { data, error } = await adminClient.auth.admin.updateUserById(userId, {\n    user_metadata: metadata,\n  });\n\n  if (error) {\n    return { error: error.message };\n  }\n\n  return { user: data.user };\n};\n\nexport default {\n  createClient,\n  createAdminClient,\n  verifyAuthToken,\n  createAuthUser,\n  deleteAuthUser,\n  getUserByEmail,\n  updateUserMetadata,\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/middleware.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":54,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":54,"endColumn":20,"suggestions":[{"fix":{"range":[1877,1925],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { signToken, verifyToken } from '@/lib/auth/session';\n// Temporarily disable Supabase session refresh until the package is installed\n// import { refreshSession } from '@/lib/supabase/middleware';\n\nconst protectedRoutes = ['/dashboard', '/admin'];\nconst adminRoutes = ['/admin'];\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n  const sessionCookie = request.cookies.get('session');\n\n  const isProtectedRoute = protectedRoutes.some(route =>\n    pathname.startsWith(route)\n  );\n  const isAdminRoute = adminRoutes.some(route => pathname.startsWith(route));\n\n  if (isProtectedRoute && !sessionCookie) {\n    return NextResponse.redirect(new URL('/sign-in', request.url));\n  }\n\n  // Refresh Supabase auth session if needed\n  // const supabaseRes = await refreshSession(request);\n\n  // Use the response from Supabase refresh (if any) as our base response\n  let res = /* supabaseRes ?? */ NextResponse.next();\n\n  if (sessionCookie) {\n    try {\n      const parsed = await verifyToken(sessionCookie.value);\n\n      if (isAdminRoute && !parsed.user.isSuperadmin) {\n        // Redirect non-admins trying to access admin routes\n        return NextResponse.redirect(new URL('/dashboard', request.url));\n      }\n\n      // Refresh the session token on GET requests to keep the user logged in\n      if (request.method === 'GET') {\n        const expiresInOneDay = new Date(Date.now() + 24 * 60 * 60 * 1000);\n        res.cookies.set({\n          name: 'session',\n          value: await signToken({\n            ...parsed,\n            expires: expiresInOneDay.toISOString(),\n          }),\n          httpOnly: true,\n          secure: true,\n          sameSite: 'lax',\n          expires: expiresInOneDay,\n        });\n      }\n    } catch (error) {\n      console.error('Error updating session:', error);\n      // If token verification fails, delete the cookie\n      res.cookies.delete('session');\n      if (isProtectedRoute) {\n        return NextResponse.redirect(new URL('/sign-in', request.url));\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const config = {\n  matcher: ['/((?!api|_next/static|_next/image|favicon.ico).*)'],\n};\n","usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/postcss.config.mjs","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/tailwind.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/vitest.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/tahjholden/mp_development/vitest.setup.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@next/next/no-img-element","message":"Definition for rule '@next/next/no-img-element' was not found.","line":29,"column":5,"endLine":29,"endColumn":58,"severity":2,"nodeType":null}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import '@testing-library/jest-dom';\nimport { vi } from 'vitest';\nimport React from 'react';\n\n// Mock Next.js router\nvi.mock('next/navigation', () => ({\n  useRouter() {\n    return {\n      push: vi.fn(),\n      replace: vi.fn(),\n      prefetch: vi.fn(),\n      back: vi.fn(),\n      forward: vi.fn(),\n      refresh: vi.fn(),\n    };\n  },\n  useSearchParams() {\n    return new URLSearchParams();\n  },\n  usePathname() {\n    return '/';\n  },\n}));\n\n// Mock Next.js image\nvi.mock('next/image', () => ({\n  __esModule: true,\n  default: (props: any) => {\n    // eslint-disable-next-line @next/next/no-img-element\n    return React.createElement('img', props);\n  },\n}));\n","usedDeprecatedRules":[]}]
